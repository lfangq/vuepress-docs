import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as t}from"./app-DjqQ9Aow.js";const e="/react/202206280920478.jpg",p={},o=t(`<h2 id="响应事件" tabindex="-1"><a class="header-anchor" href="#响应事件"><span>响应事件</span></a></h2><p>使用 React 可以在 JSX 中添加 事件处理函数。其中事件处理函数为自定义函数，它将在响应交互（如点击、悬停、表单输入框获得焦点等）时触发。</p><h3 id="_1-添加事件处理函数" tabindex="-1"><a class="header-anchor" href="#_1-添加事件处理函数"><span>1. 添加事件处理函数</span></a></h3><p>事件处理函数有如下特点:</p><ul><li>通常在你的组件内部定义。</li><li>名称以 <code>handle</code> 开头，后跟事件名称。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你点击了我！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>
      点我
    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>传递给事件处理函数的函数应直接传递，而非调用。例如：</p><table><thead><tr><th>传递一个函数（正确）</th><th>调用一个函数（错误）</th></tr></thead><tbody><tr><td><code>&lt;button onClick={ handleClick }&gt;</code></td><td><code>&lt;button onClick={ handleClick() }&gt;</code></td></tr><tr><td>区别很微妙。在第一个示例中，handleClick 函数作为 onClick 事件处理函数传递。这会让 React 记住它，并且只在用户点击按钮时调用你的函数。</td><td></td></tr></tbody></table><p>在第二个示例中，handleClick() 中最后的 () 会在 渲染 过程中 立即 触发函数，即使没有任何点击。这是因为在 JSX { 和 } 之间的 JavaScript 会立即执行。</p><p>如果你想要定义内联事件处理函数，请将其包装在匿名函数中，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你点击了我！&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="_2-在事件处理函数中读取-props" tabindex="-1"><a class="header-anchor" href="#_2-在事件处理函数中读取-props"><span>2. 在事件处理函数中读取 props</span></a></h3><p><code>onClick</code>事件处理函数也可作为 props 传递：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onClick<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">PlayButton</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> movieName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">handlePlayClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">正在播放 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>movieName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">！</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handlePlayClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>
      播放 <span class="token string">&quot;{movieName}&quot;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">UploadButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;正在上传！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      上传图片
    <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>PlayButton movieName<span class="token operator">=</span><span class="token string">&quot;魔女宅急便&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>UploadButton <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-事件传播" tabindex="-1"><a class="header-anchor" href="#_3-事件传播"><span>3. 事件传播</span></a></h3><p>事件处理函数还将捕获任何来自子组件的事件。通常，我们会说事件会沿着树向上“冒泡”或“传播”：它从事件发生的地方开始，然后沿着树向上传播。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 React 中所有事件都会传播，除了 onScroll，它仅适用于你附加到的 JSX 标签。</p></div><h3 id="_4-阻止传播" tabindex="-1"><a class="header-anchor" href="#_4-阻止传播"><span>4. 阻止传播</span></a></h3><p>事件处理函数接收一个 事件对象 作为唯一的参数。按照惯例，它通常被称为 e ，代表 “event”（事件）。你可以使用此对象来读取有关事件的信息。</p><p>这个事件对象还允许你阻止传播。如果你想阻止一个事件到达父组件，你需要像下面 Button 组件那样调用 <code>e.stopPropagation()</code> ：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onClick<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;Toolbar&quot;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你点击了 toolbar ！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;正在播放！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
        播放电影
      <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;正在上传！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
        上传图片
      <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-捕获阶段事件" tabindex="-1"><a class="header-anchor" href="#_5-捕获阶段事件"><span>5. 捕获阶段事件</span></a></h3><p>极少数情况下，你可能需要捕获子元素上的所有事件，即便它们阻止了传播。例如，你可能想对每次点击进行埋点记录，传播逻辑暂且不论。那么你可以通过在事件名称末尾添加 Capture 来实现这一点：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div onClickCapture<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 这会首先执行 */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个事件分三个阶段传播：</p><ol><li>它向下传播，调用所有的 onClickCapture 处理函数。</li><li>它执行被点击元素的 onClick 处理函数。</li><li>它向上传播，调用所有的 onClick 处理函数。</li></ol><p>捕获事件对于路由或数据分析之类的代码很有用，但你可能不会在应用程序代码中使用它们。</p><h3 id="_6-阻止默认行为" tabindex="-1"><a class="header-anchor" href="#_6-阻止默认行为"><span>6. 阻止默认行为</span></a></h3><p>你可以调用事件对象中的 e.preventDefault() 来阻止默认行为发生：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Signup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;提交表单！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>发送<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="state-组件的记忆" tabindex="-1"><a class="header-anchor" href="#state-组件的记忆"><span>State：组件的记忆</span></a></h2><p>组件通常需要根据交互更改屏幕上显示的内容。输入表单应该更新输入字段，单击轮播图上的“下一个”应该更改显示的图片，单击“购买”应该将商品放入购物车。组件需要“记住”某些东西：当前输入值、当前图片、购物车。在 React 中，这种组件特有的记忆被称为 state。</p><h3 id="_1-使用-usestate-hook-添加-state-变量" tabindex="-1"><a class="header-anchor" href="#_1-使用-usestate-hook-添加-state-变量"><span>1. 使用 useState Hook 添加 state 变量</span></a></h3><p><code>useState</code> Hook 提供了这两个功能：</p><ol><li>State 变量 用于保存渲染间的数据。</li><li>State setter 函数 更新变量并触发 React 再次渲染组件。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// index: State 变量</span>
<span class="token comment">// setIndex: State setter 函数</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> setIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>Hooks</code> ——以 <code>use</code> 开头的函数——只能在组件或<code>自定义 Hook</code> 的最顶层调用。 你不能在条件语句、循环语句或其他嵌套函数内调用 <code>Hook</code>。<code>Hook</code> 是函数，但将它们视为关于组件需求的无条件声明会很有帮助。在组件顶部 “use” React 特性，类似于在文件顶部“导入”模块。</p></div><h3 id="_2-state-是隔离且私有的" tabindex="-1"><a class="header-anchor" href="#_2-state-是隔离且私有的"><span>2. State 是隔离且私有的</span></a></h3><p>State 是屏幕上组件实例内部的状态。换句话说，如果你渲染同一个组件两次，每个副本都会有完全隔离的 state！改变其中一个不会影响另一个。</p><h3 id="_3-设置-state-会触发渲染" tabindex="-1"><a class="header-anchor" href="#_3-设置-state-会触发渲染"><span>3. 设置 state 会触发渲染</span></a></h3><h3 id="_4-设置-state-只会为下一次渲染变更-state-的值-一个-state-变量的值永远不会在一次渲染的内部发生变化" tabindex="-1"><a class="header-anchor" href="#_4-设置-state-只会为下一次渲染变更-state-的值-一个-state-变量的值永远不会在一次渲染的内部发生变化"><span>4. 设置 state 只会为下一次渲染变更 state 的值, 一个 state 变量的值永远不会在一次渲染的内部发生变化</span></a></h3><p>每一次渲染的 state 值都是固定的，因此无论你调用多少次 setNumber(1)，在第一次渲染的事件处理函数内部的 number 值总是 0 ：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number = 0</span>
        <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number = 0</span>
        <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number = 0</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-在下次渲染前多次更新同一个-state-解决上面问题" tabindex="-1"><a class="header-anchor" href="#_5-在下次渲染前多次更新同一个-state-解决上面问题"><span>5. 在下次渲染前多次更新同一个 state (解决上面问题)</span></a></h3><p>这是一个不常见的用例，但是如果你想在下次渲染之前多次更新同一个 state，你可以像 setNumber(n =&gt; n + 1) 这样传入一个根据队列中的前一个 state 计算下一个 state 的 函数，而不是像 setNumber(number + 1) 这样传入 下一个 state 值。这是一种告诉 React “用 state 值做某事”而不是仅仅替换它的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number = 1</span>
        <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number = 2</span>
        <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number = 3</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-更新-state-中的对象" tabindex="-1"><a class="header-anchor" href="#_6-更新-state-中的对象"><span>6. 更新 state 中的对象</span></a></h3><p>state 中可以保存任意类型的 JavaScript 值，包括对象。但是，你不应该直接修改存放在 React state 中的对象。相反，当你想要更新一个对象时，你需要创建一个新的对象（或者将其拷贝一份），然后将 state 更新为此对象。</p><ul><li>将 React 中所有的 state 都视为不可直接修改的。</li><li>当你在 state 中存放对象时，直接修改对象并不会触发重渲染，并会改变前一次渲染“快照”中 state 的值。</li><li>不要直接修改一个对象，而要为它创建一个 新 版本，并通过把 state 设置成这个新版本来触发重新渲染。</li><li>你可以使用这样的 {...obj, something: &#39;newValue&#39;} 对象展开语法来创建对象的拷贝。</li><li>对象的展开语法是浅层的：它的复制深度只有一层。</li><li>想要更新嵌套对象，你需要从你更新的位置开始自底向上为每一层都创建新的拷贝。</li><li>想要减少重复的拷贝代码，可以使用 Immer。</li></ul><h3 id="_7-更新-state-中的数组" tabindex="-1"><a class="header-anchor" href="#_7-更新-state-中的数组"><span>7. 更新 state 中的数组</span></a></h3><p>数组是另外一种可以存储在 state 中的 JavaScript 对象，它虽然是可变的，但是却应该被视为不可变。同对象一样，当你想要更新存储于 state 中的数组时，你需要创建一个新的数组（或者创建一份已有数组的拷贝值），并使用新数组设置 state。</p><p>下面是常见数组操作的参考表。当你操作 React state 中的数组时，你需要避免使用左列的方法，而首选右列的方法：</p><table><thead><tr><th></th><th>避免使用 (会改变原始数组)</th><th>推荐使用 (会返回一个新数组）</th></tr></thead><tbody><tr><td>添加元素</td><td><code>push</code>，<code>unshift</code></td><td><code>concat</code>，<code>[...arr]</code></td></tr><tr><td>删除元素</td><td><code>pop</code>，<code>shift</code>，<code>splice</code></td><td><code>filter</code>，<code>slice</code></td></tr><tr><td>替换元素</td><td><code>splice</code>，<code>arr[i] = ... 赋值</code></td><td><code>map</code></td></tr><tr><td>排序</td><td><code>reverse</code>，<code>sort</code></td><td><code>先将数组复制一份</code></td></tr></tbody></table><h2 id="react生命周期" tabindex="-1"><a class="header-anchor" href="#react生命周期"><span>React生命周期</span></a></h2><p>React 生命周期分为三个阶段：</p><ol><li><p>创建阶段（初始化阶段）：这是组件第一次在 DOM 树中进行渲染的过程。在这个阶段，组件完成了初始化和加载。</p></li><li><p>更新阶段（存在阶段）：在这个阶段，组件被重新渲染。在这个过程中，组件可以处理用户交互、接收事件更新界面，以及因父组件的重新渲染而发生的变化。</p></li><li><p>卸载阶段（销毁阶段）：这是组件从 DOM 中删除的过程。在这个阶段，组件会执行一些清理工作。</p></li></ol><figure><img src="`+e+'" alt="React生命周期" tabindex="0" loading="lazy"><figcaption>React生命周期</figcaption></figure>',53),c=[o];function l(i,r){return a(),s("div",null,c)}const k=n(p,[["render",l],["__file","03.添加交互.html.vue"]]),v=JSON.parse('{"path":"/notes/react/03.%E6%B7%BB%E5%8A%A0%E4%BA%A4%E4%BA%92.html","title":"添加交互","lang":"zh-CN","frontmatter":{"title":"添加交互","date":"2024-01-30T10:43:25.000Z","order":4,"categories":["笔记"],"tags":["React"],"description":"响应事件 使用 React 可以在 JSX 中添加 事件处理函数。其中事件处理函数为自定义函数，它将在响应交互（如点击、悬停、表单输入框获得焦点等）时触发。 1. 添加事件处理函数 事件处理函数有如下特点: 通常在你的组件内部定义。 名称以 handle 开头，后跟事件名称。 注意 传递给事件处理函数的函数应直接传递，而非调用。例如： 在第二个示例中，...","head":[["meta",{"property":"og:url","content":"https://www.lfangq.top/notes/react/03.%E6%B7%BB%E5%8A%A0%E4%BA%A4%E4%BA%92.html"}],["meta",{"property":"og:site_name","content":"Lfangq"}],["meta",{"property":"og:title","content":"添加交互"}],["meta",{"property":"og:description","content":"响应事件 使用 React 可以在 JSX 中添加 事件处理函数。其中事件处理函数为自定义函数，它将在响应交互（如点击、悬停、表单输入框获得焦点等）时触发。 1. 添加事件处理函数 事件处理函数有如下特点: 通常在你的组件内部定义。 名称以 handle 开头，后跟事件名称。 注意 传递给事件处理函数的函数应直接传递，而非调用。例如： 在第二个示例中，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.lfangq.top/react/202206280920478.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T01:54:59.000Z"}],["meta",{"property":"article:author","content":"Lfangq"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:published_time","content":"2024-01-30T10:43:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T01:54:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"添加交互\\",\\"image\\":[\\"https://www.lfangq.top/react/202206280920478.jpg\\"],\\"datePublished\\":\\"2024-01-30T10:43:25.000Z\\",\\"dateModified\\":\\"2024-05-30T01:54:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lfangq\\",\\"url\\":\\"https://www.lfangq.top/\\"}]}"]]},"headers":[{"level":2,"title":"响应事件","slug":"响应事件","link":"#响应事件","children":[{"level":3,"title":"1. 添加事件处理函数","slug":"_1-添加事件处理函数","link":"#_1-添加事件处理函数","children":[]},{"level":3,"title":"2. 在事件处理函数中读取 props","slug":"_2-在事件处理函数中读取-props","link":"#_2-在事件处理函数中读取-props","children":[]},{"level":3,"title":"3. 事件传播","slug":"_3-事件传播","link":"#_3-事件传播","children":[]},{"level":3,"title":"4. 阻止传播","slug":"_4-阻止传播","link":"#_4-阻止传播","children":[]},{"level":3,"title":"5. 捕获阶段事件","slug":"_5-捕获阶段事件","link":"#_5-捕获阶段事件","children":[]},{"level":3,"title":"6. 阻止默认行为","slug":"_6-阻止默认行为","link":"#_6-阻止默认行为","children":[]}]},{"level":2,"title":"State：组件的记忆","slug":"state-组件的记忆","link":"#state-组件的记忆","children":[{"level":3,"title":"1. 使用 useState Hook 添加 state 变量","slug":"_1-使用-usestate-hook-添加-state-变量","link":"#_1-使用-usestate-hook-添加-state-变量","children":[]},{"level":3,"title":"2. State 是隔离且私有的","slug":"_2-state-是隔离且私有的","link":"#_2-state-是隔离且私有的","children":[]},{"level":3,"title":"3. 设置 state 会触发渲染","slug":"_3-设置-state-会触发渲染","link":"#_3-设置-state-会触发渲染","children":[]},{"level":3,"title":"4. 设置 state 只会为下一次渲染变更 state 的值, 一个 state 变量的值永远不会在一次渲染的内部发生变化","slug":"_4-设置-state-只会为下一次渲染变更-state-的值-一个-state-变量的值永远不会在一次渲染的内部发生变化","link":"#_4-设置-state-只会为下一次渲染变更-state-的值-一个-state-变量的值永远不会在一次渲染的内部发生变化","children":[]},{"level":3,"title":"5. 在下次渲染前多次更新同一个 state (解决上面问题)","slug":"_5-在下次渲染前多次更新同一个-state-解决上面问题","link":"#_5-在下次渲染前多次更新同一个-state-解决上面问题","children":[]},{"level":3,"title":"6. 更新 state 中的对象","slug":"_6-更新-state-中的对象","link":"#_6-更新-state-中的对象","children":[]},{"level":3,"title":"7. 更新 state 中的数组","slug":"_7-更新-state-中的数组","link":"#_7-更新-state-中的数组","children":[]}]},{"level":2,"title":"React生命周期","slug":"react生命周期","link":"#react生命周期","children":[]}],"git":{"createdTime":1717034099000,"updatedTime":1717034099000,"contributors":[{"name":"lfangq","email":"2251234678@qq.com","commits":1}]},"readingTime":{"minutes":7.38,"words":2215},"filePathRelative":"notes/react/03.添加交互.md","localizedDate":"2024年1月30日","excerpt":"","autoDesc":true}');export{k as comp,v as data};
