import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as s}from"./app-DjqQ9Aow.js";const n={},r=s(`<h2 id="构建-state-的原则" tabindex="-1"><a class="header-anchor" href="#构建-state-的原则"><span>构建 state 的原则</span></a></h2><ul><li><p>合并关联的 state。如果你总是同时更新两个或更多的 state 变量，请考虑将它们合并为一个单独的 state 变量。</p></li><li><p>避免互相矛盾的 state。当 state 结构中存在多个相互矛盾或“不一致”的 state 时，你就可能为此会留下隐患。应尽量避免这种情况。</p></li><li><p>避免冗余的 state。如果你能在渲染期间从组件的 props 或其现有的 state 变量中计算出一些信息，则不应将这些信息放入该组件的 state 中。</p></li><li><p>避免重复的 state。当同一数据在多个 state 变量之间或在多个嵌套对象中重复时，这会很难保持它们同步。应尽可能减少重复。</p></li><li><p>避免深度嵌套的 state。深度分层的 state 更新起来不是很方便。如果可能的话，最好以扁平化方式构建 state。</p></li></ul><h2 id="在组件间共享状态" tabindex="-1"><a class="header-anchor" href="#在组件间共享状态"><span>在组件间共享状态</span></a></h2><h3 id="_1-状态提升" tabindex="-1"><a class="header-anchor" href="#_1-状态提升"><span>1. 状态提升</span></a></h3><p>有时候，你希望两个组件的状态始终同步更改。要实现这一点，可以将相关 state 从这两个组件上移除，并把 state 放到它们的公共父级，再通过 props 将 state 传递给这两个组件。这被称为“状态提升”，这是编写 React 代码时常做的事。</p><h3 id="_2-每个状态都对应唯一的数据源" tabindex="-1"><a class="header-anchor" href="#_2-每个状态都对应唯一的数据源"><span>2. 每个状态都对应唯一的数据源</span></a></h3><p>对于每个独特的状态，都应该存在且只存在于一个指定的组件中作为 state。这一原则也被称为拥有 “可信单一数据源”。</p><h2 id="对-state-进行保留和重置" tabindex="-1"><a class="header-anchor" href="#对-state-进行保留和重置"><span>对 state 进行保留和重置</span></a></h2><h3 id="_1-state-进行保留和重置的原则" tabindex="-1"><a class="header-anchor" href="#_1-state-进行保留和重置的原则"><span>1. state 进行保留和重置的原则</span></a></h3><ul><li>相同位置的相同组件会使得 state 被保留下来</li><li>相同位置的不同组件会使 state 重置</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>记住对React来说重要的是组件在UI树中的位置, 而不是在 JSX 中的位置！</p></div><h3 id="_2-在相同位置重置-state" tabindex="-1"><a class="header-anchor" href="#_2-在相同位置重置-state"><span>2. 在相同位置重置 state</span></a></h3><ol><li>将组件渲染在不同的位置</li><li>使用 key 赋予每个组件一个明确的身份</li></ol><h2 id="reducer" tabindex="-1"><a class="header-anchor" href="#reducer"><span>reducer</span></a></h2><p>对于拥有许多状态更新逻辑的组件来说，过于分散的事件处理程序可能会令人不知所措。对于这种情况，你可以将组件的所有状态更新逻辑整合到一个外部函数中，这个函数叫作 reducer。</p><p>reducer就是一个它接受<code>目前的结果</code>和<code>当前的值</code>，然后返回<code>下一个结果</code>的外部函数。</p><h3 id="_1-在组件中使用-reducer" tabindex="-1"><a class="header-anchor" href="#_1-在组件中使用-reducer"><span>1. 在组件中使用 reducer</span></a></h3><p>在组件中使用 reducer, 必须使用 useReducer将reducer导入到组件中。 使用useReducer你必须给它传递一个初始状态，它会返回一个有状态的值和一个设置该状态的函数（在这个例子中就是 dispatch 函数）。</p><p>useReducer 钩子接受 2 个参数：</p><ul><li>一个 reducer 函数</li><li>一个初始的 state</li></ul><p>它返回如下内容：</p><ul><li>一个有状态的值</li><li>一个 dispatch 函数（用来 “派发” 用户操作给 reducer）</li></ul><iframe src="https://codesandbox.io/embed/k8rm2w?view=Editor+%2B+Preview&amp;module=%2Fsrc%2FApp.js" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;" title="react.dev" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 id="_2-对比-usestate-和-usereducer" tabindex="-1"><a class="header-anchor" href="#_2-对比-usestate-和-usereducer"><span>2. 对比 useState 和 useReducer</span></a></h3><ul><li><p>代码体积： 通常，在使用 useState 时，一开始只需要编写少量代码。而 useReducer 必须提前编写 reducer 函数和需要调度的 actions。但是，当多个事件处理程序以相似的方式修改 state 时，useReducer 可以减少代码量。</p></li><li><p>可读性： 当状态更新逻辑足够简单时，useState 的可读性还行。但是，一旦逻辑变得复杂起来，它们会使组件变得臃肿且难以阅读。在这种情况下，useReducer 允许你将状态更新逻辑与事件处理程序分离开来。</p></li><li><p>可调试性： 当使用 useState 出现问题时, 你很难发现具体原因以及为什么。 而使用 useReducer 时， 你可以在 reducer 函数中通过打印日志的方式来观察每个状态的更新，以及为什么要更新（来自哪个 action）。 如果所有 action 都没问题，你就知道问题出在了 reducer 本身的逻辑中。 然而，与使用 useState 相比，你必须单步执行更多的代码。</p></li><li><p>可测试性： reducer 是一个不依赖于组件的纯函数。这就意味着你可以单独对它进行测试。一般来说，我们最好是在真实环境中测试组件，但对于复杂的状态更新逻辑，针对特定的初始状态和 action，断言 reducer 返回的特定状态会很有帮助。</p></li><li><p>个人偏好： 并不是所有人都喜欢用 reducer，没关系，这是个人偏好问题。你可以随时在 useState 和 useReducer 之间切换，它们能做的事情是一样的！</p></li></ul><h3 id="_3-编写一个好的-reducers" tabindex="-1"><a class="header-anchor" href="#_3-编写一个好的-reducers"><span>3. 编写一个好的 reducers</span></a></h3><p>编写 reducers 时最好牢记以下两点：</p><ul><li><p><code>reducers 必须是纯粹的</code>。 这一点和 状态更新函数 是相似的，reducers 在是在渲染时运行的！（actions 会排队直到下一次渲染)。 这就意味着 reducers 必须纯净，即当输入相同时，输出也是相同的。它们不应该包含异步请求、定时器或者任何副作用（对组件外部有影响的操作）。它们应该以不可变值的方式去更新 对象 和 数组。</p></li><li><p><code>每个 action 都描述了一个单一的用户交互，即使它会引发数据的多个变化</code>。 举个例子，如果用户在一个由 reducer 管理的表单（包含五个表单项）中点击了 重置按钮，那么 dispatch 一个 reset_form 的 action 比 dispatch 五个单独的 set_field 的 action 更加合理。如果你在一个 reducer 中打印了所有的 action 日志，那么这个日志应该是很清晰的，它能让你以某种步骤复现已发生的交互或响应。这对代码调试很有帮助！</p></li></ul><h2 id="使用-context-深层传递参数" tabindex="-1"><a class="header-anchor" href="#使用-context-深层传递参数"><span>使用 Context 深层传递参数</span></a></h2><p>通常来说，你会通过 props 将信息从父组件传递到子组件。但是，如果你必须通过许多中间组件向下传递 props，或是在你应用中的许多组件需要相同的信息，传递 props 会变的十分冗长和不便。Context 允许父组件向其下层无论多深的任何组件提供信息，而无需通过 props 显式传递。</p><p>创建 Context 通过以下三个步骤来实现它：</p><ol><li>使用 <code>createContext</code> 创建 一个 context。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Context.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> LevelContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在需要数据的组件内 使用 <code>useContext</code> 获取刚刚创建的 context。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> LevelContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Context.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> level <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>LevelContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在指定数据的组件中使用 <code>&lt;Context创建名称.Provider value={值}&gt;</code> 提供 这个 context。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> LevelContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Context.js&#39;</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>LevelContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>LevelContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Context 的使用场景：</p><ul><li><p>主题： 如果你的应用允许用户更改其外观（例如暗夜模式），你可以在应用顶层放一个 context provider，并在需要调整其外观的组件中使用该 context。</p></li><li><p>当前账户： 许多组件可能需要知道当前登录的用户信息。将它放到 context 中可以方便地在树中的任何位置读取它。某些应用还允许你同时操作多个账户（例如，以不同用户的身份发表评论）。在这些情况下，将 UI 的一部分包裹到具有不同账户数据的 provider 中会很方便。</p></li><li><p>路由： 大多数路由解决方案在其内部使用 context 来保存当前路由。这就是每个链接“知道”它是否处于活动状态的方式。如果你创建自己的路由库，你可能也会这么做。</p></li><li><p>状态管理： 随着你的应用的增长，最终在靠近应用顶部的位置可能会有很多 state。许多遥远的下层组件可能想要修改它们。通常 将 reducer 与 context 搭配使用来管理复杂的状态并将其传递给深层的组件来避免过多的麻烦。</p></li></ul><h2 id="使用-reducer-和-context-拓展你的应用" tabindex="-1"><a class="header-anchor" href="#使用-reducer-和-context-拓展你的应用"><span>使用 Reducer 和 Context 拓展你的应用</span></a></h2><iframe src="https://codesandbox.io/embed/wy7lfd?view=Editor+%2B+Preview&amp;module=%2Fsrc%2FTasksContext.js" style="width:100%;height:400px;border:0;border-radius:4px;overflow:hidden;" title="react.dev" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>`,41),l=[r];function o(i,c){return a(),t("div",null,l)}const u=e(n,[["render",o],["__file","04.状态管理.html.vue"]]),h=JSON.parse('{"path":"/notes/react/04.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html","title":"状态管理","lang":"zh-CN","frontmatter":{"title":"状态管理","date":"2024-02-19T15:02:23.000Z","order":5,"categories":["笔记"],"tags":["React"],"description":"构建 state 的原则 合并关联的 state。如果你总是同时更新两个或更多的 state 变量，请考虑将它们合并为一个单独的 state 变量。 避免互相矛盾的 state。当 state 结构中存在多个相互矛盾或“不一致”的 state 时，你就可能为此会留下隐患。应尽量避免这种情况。 避免冗余的 state。如果你能在渲染期间从组件的 prop...","head":[["meta",{"property":"og:url","content":"https://www.lfangq.top/notes/react/04.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Lfangq"}],["meta",{"property":"og:title","content":"状态管理"}],["meta",{"property":"og:description","content":"构建 state 的原则 合并关联的 state。如果你总是同时更新两个或更多的 state 变量，请考虑将它们合并为一个单独的 state 变量。 避免互相矛盾的 state。当 state 结构中存在多个相互矛盾或“不一致”的 state 时，你就可能为此会留下隐患。应尽量避免这种情况。 避免冗余的 state。如果你能在渲染期间从组件的 prop..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T01:54:59.000Z"}],["meta",{"property":"article:author","content":"Lfangq"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:published_time","content":"2024-02-19T15:02:23.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T01:54:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"状态管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-19T15:02:23.000Z\\",\\"dateModified\\":\\"2024-05-30T01:54:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lfangq\\",\\"url\\":\\"https://www.lfangq.top/\\"}]}"]]},"headers":[{"level":2,"title":"构建 state 的原则","slug":"构建-state-的原则","link":"#构建-state-的原则","children":[]},{"level":2,"title":"在组件间共享状态","slug":"在组件间共享状态","link":"#在组件间共享状态","children":[{"level":3,"title":"1. 状态提升","slug":"_1-状态提升","link":"#_1-状态提升","children":[]},{"level":3,"title":"2. 每个状态都对应唯一的数据源","slug":"_2-每个状态都对应唯一的数据源","link":"#_2-每个状态都对应唯一的数据源","children":[]}]},{"level":2,"title":"对 state 进行保留和重置","slug":"对-state-进行保留和重置","link":"#对-state-进行保留和重置","children":[{"level":3,"title":"1. state 进行保留和重置的原则","slug":"_1-state-进行保留和重置的原则","link":"#_1-state-进行保留和重置的原则","children":[]},{"level":3,"title":"2. 在相同位置重置 state","slug":"_2-在相同位置重置-state","link":"#_2-在相同位置重置-state","children":[]}]},{"level":2,"title":"reducer","slug":"reducer","link":"#reducer","children":[{"level":3,"title":"1. 在组件中使用 reducer","slug":"_1-在组件中使用-reducer","link":"#_1-在组件中使用-reducer","children":[]},{"level":3,"title":"2. 对比 useState 和 useReducer","slug":"_2-对比-usestate-和-usereducer","link":"#_2-对比-usestate-和-usereducer","children":[]},{"level":3,"title":"3. 编写一个好的 reducers","slug":"_3-编写一个好的-reducers","link":"#_3-编写一个好的-reducers","children":[]}]},{"level":2,"title":"使用 Context 深层传递参数","slug":"使用-context-深层传递参数","link":"#使用-context-深层传递参数","children":[]},{"level":2,"title":"使用 Reducer 和 Context 拓展你的应用","slug":"使用-reducer-和-context-拓展你的应用","link":"#使用-reducer-和-context-拓展你的应用","children":[]}],"git":{"createdTime":1717034099000,"updatedTime":1717034099000,"contributors":[{"name":"lfangq","email":"2251234678@qq.com","commits":1}]},"readingTime":{"minutes":7.09,"words":2128},"filePathRelative":"notes/react/04.状态管理.md","localizedDate":"2024年2月19日","excerpt":"","autoDesc":true}');export{u as comp,h as data};
