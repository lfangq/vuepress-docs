import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,e as t}from"./app-DbdGz4CT.js";const p={},e=t(`<h2 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx"><span>JSX</span></a></h2><p>JSX 是 JavaScript 语法扩展，可以让你在 JavaScript 文件中书写类似 HTML 的标签。虽然还有其它方式可以编写组件，但大部分 React 开发者更喜欢 JSX 的简洁性，并且在大部分代码库中使用它。</p><h2 id="jsx-规则" tabindex="-1"><a class="header-anchor" href="#jsx-规则"><span>JSX 规则</span></a></h2><h3 id="_1-只能返回一个根元素" tabindex="-1"><a class="header-anchor" href="#_1-只能返回一个根元素"><span>1. 只能返回一个根元素</span></a></h3><p>如果想要在一个组件中包含多个元素，需要用一个父标签把它们包裹起来。如果你不想在标签中增加一个额外的 <code>&lt;div&gt;</code>，可以用 <code>&lt;&gt;</code> 和 <code>&lt;/&gt;</code> 元素来代替。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个空标签被称作 Fragment。React Fragment 允许你将子元素分组，而不会在 HTML 结构中添加额外节点。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><h4 id="为什么多个-jsx-标签需要被一个父元素包裹" tabindex="-1"><a class="header-anchor" href="#为什么多个-jsx-标签需要被一个父元素包裹"><span>为什么多个 JSX 标签需要被一个父元素包裹？</span></a></h4><p>JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。这就是为什么多个 JSX 标签必须要用一个父元素或者 Fragment 来包裹。</p></div><h3 id="_2-标签必须闭合" tabindex="-1"><a class="header-anchor" href="#_2-标签必须闭合"><span>2. 标签必须闭合</span></a></h3><h3 id="_3-使用驼峰式命名法给-所有-大部分属性命名" tabindex="-1"><a class="header-anchor" href="#_3-使用驼峰式命名法给-所有-大部分属性命名"><span>3. 使用驼峰式命名法给 <s>所有</s> 大部分属性命名！</span></a></h3><p>JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在你自己的组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，变量名称不能包含 - 符号或者像 class 这样的保留字。</p><p>这就是为什么在 React 中，大部分 HTML 和 SVG 属性都用驼峰式命名法表示。例如，需要用 strokeWidth 代替 stroke-width。由于 class 是一个保留字，所以在 React 中需要用 className 来代替。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/className" target="_blank" rel="noopener noreferrer">这也是 DOM 属性中的命名</a>。</p><p>你可以 在 <a href="https://zh-hans.react.dev/reference/react-dom/components/common" target="_blank" rel="noopener noreferrer">React DOM 元素</a>中找到所有对应的属性。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>由于历史原因，<code>aria-*</code> 和 <code>data-*</code> 属性是以带 - 符号的 HTML 格式书写的。</p></div><h3 id="_4-在-jsx-中通过大括号使用-javascript" tabindex="-1"><a class="header-anchor" href="#_4-在-jsx-中通过大括号使用-javascript"><span>4. 在 JSX 中通过大括号使用 JavaScript</span></a></h3><p>你可能想要在标签中添加一些 JavaScript 逻辑或者引用动态的属性。这种情况下，你可以在 JSX 的大括号内来编写 JavaScript。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> avatar <span class="token operator">=</span> <span class="token string">&#39;https://i.imgur.com/7vQD0fPs.jpg&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token string">&#39;Gregorio Y. Zara&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>
      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>avatar<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>avatar<span class="token punctuation">}</span></span>
      <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>description<span class="token punctuation">}</span></span>
    <span class="token punctuation">/&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JSX 中，只能在以下两种场景中使用大括号：</p><ol><li><p>用作 JSX 标签内的文本：<code>&lt;h1&gt;{name}&#39;s To Do List&lt;/h1&gt;</code> 是有效的，但是 <code>&lt;{tag}&gt;Gregorio Y. Zara&#39;s To Do List&lt;/{tag}&gt;</code> 无效。</p></li><li><p>用作紧跟在 = 符号后的 属性：<code>src={avatar}</code> 会读取 <code>avatar</code> 变量，但是 <code>src=&quot;{avatar}&quot;</code> 只会传一个字符串 <code>{avatar}</code>。</p></li></ol><h3 id="_5-使用-双大括号-jsx-中的-css-和-对象" tabindex="-1"><a class="header-anchor" href="#_5-使用-双大括号-jsx-中的-css-和-对象"><span>5. 使用 “双大括号”：JSX 中的 CSS 和 对象</span></a></h3><p>除了字符串、数字和其它 JavaScript 表达式，你甚至可以在 JSX 中传递对象。对象也用大括号表示，例如 <code>{ name: &quot;Hedy Lamarr&quot;, inventions: 5 }</code>。因此，为了能在 JSX 中传递，你必须用另一对额外的大括号包裹对象：<code>person={ { name: &quot;Hedy Lamarr&quot;, inventions: 5 } }</code>。</p><p>你可能在 JSX 的内联 CSS 样式中就已经见过这种写法了。React 不要求你使用内联样式（使用 CSS 类就能满足大部分情况）。但是当你需要内联样式的时候，你可以给 style 属性传递一个对象：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">TodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
      <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;pink&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Improve the videophone</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Prepare aeronautics lectures</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Work on the alcohol-fuelled engine</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>内联 style 属性 使用驼峰命名法编写。例如，HTML <code>&lt;ul style=&quot;background-color: black&quot;&gt;</code> 在你的组件里应该写成 <code>&lt;ul style={ { backgroundColor: &#39;black&#39; } }&gt;</code>。</p></div><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props"><span>Props</span></a></h2><p>React 组件使用 props 来互相通信。每个父组件都可以提供 props 给它的子组件，从而将一些信息传递给它。Props 可能会让你想起 HTML 属性，但你可以通过它们传递任何 JavaScript 值，包括对象、数组和函数。</p><h3 id="_1-props的传递和读取" tabindex="-1"><a class="header-anchor" href="#_1-props的传递和读取"><span>1. Props的传递和读取</span></a></h3><p>Props的传递方式和标签属性一样，<code>&lt;img&gt;</code> 标签的 props 是预定义的（ReactDOM 符合 <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element" target="_blank" rel="noopener noreferrer">HTML 标准</a>）。但是你可以将任何 props 传递给 你自己的 组件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 读取</span>
<span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> person <span class="token operator">=</span> props<span class="token punctuation">.</span>person<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// Props的传递</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Avatar
      person<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Lin Lanying&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">imageId</span><span class="token operator">:</span> <span class="token string">&#39;1bX5QH6&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
      size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">}</span>
    <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-给-prop-指定一个默认值" tabindex="-1"><a class="header-anchor" href="#_2-给-prop-指定一个默认值"><span>2. 给 prop 指定一个默认值</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 默认值</span>
<span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span><span class="token punctuation">{</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Lin Lanying&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// Props的传递</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Avatar
      person<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Lin Lanying&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">imageId</span><span class="token operator">:</span> <span class="token string">&#39;1bX5QH6&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
      size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">}</span>
    <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认值仅在缺少 person prop 或 person={undefined} 时生效。 但是如果你传递了 person={null} 或 person={0}，默认值将 不 被使用。</p><h3 id="_3-使用-jsx-展开语法传递-props" tabindex="-1"><a class="header-anchor" href="#_3-使用-jsx-展开语法传递-props"><span>3. 使用 JSX 展开语法传递 props</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 默认值</span>
<span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// JSX 展开语法传递 props</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Avatar <span class="token punctuation">{</span><span class="token operator">...</span>data<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-将-jsx-作为子组件传递" tabindex="-1"><a class="header-anchor" href="#_4-将-jsx-作为子组件传递"><span>4. 将 JSX 作为子组件传递</span></a></h3><p>当您将内容嵌套在 JSX 标签中时，父组件将在名为 children 的 prop 中接收到该内容。例如，下面的 Card 组件将接收一个被设为 <code>&lt;Avatar /&gt;</code> 的 children prop 并将其包裹在 div 中渲染：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 通过children读取传递的组件</span>
<span class="token keyword">function</span> <span class="token function">Card</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;card&quot;</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// ....</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Card<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Avatar
        size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">}</span>
        person<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> 
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Katsuko Saruhashi&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">imageId</span><span class="token operator">:</span> <span class="token string">&#39;YfeOqp2&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Card<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-props是不可变的" tabindex="-1"><a class="header-anchor" href="#_5-props是不可变的"><span>5. Props是不可变的</span></a></h3><p>Props 是只读的时间快照：每次渲染都会收到新版本的 props，你不能改变 props，当你需要交互性时，你可以设置 state。</p><h2 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染"><span>条件渲染</span></a></h2><h3 id="_1-条件返回-jsx" tabindex="-1"><a class="header-anchor" href="#_1-条件返回-jsx"><span>1. 条件返回 JSX</span></a></h3><p>你可以用 if/else 语句 去判断：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>isPacked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> ✔<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或三目运算符（? :）去判断：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>isPacked <span class="token operator">?</span> name <span class="token operator">+</span> <span class="token string">&#39; ✔&#39;</span> <span class="token operator">:</span> name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与运算符（&amp;&amp;）：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token punctuation">{</span>isPacked <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;✔&#39;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 JSX 里，React 会将 false 视为一个“空值”，就像 null 或者 undefined，这样 React 就不会在这里进行任何渲染。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>切勿将数字放在 &amp;&amp; 左侧.</p><p>JavaScript 会自动将左侧的值转换成布尔类型以判断条件成立与否。然而，如果左侧是 0，整个表达式将变成左侧的值（0），React 此时则会渲染 0 而不是不进行渲染。</p><p>例如，一个常见的错误是 <code>messageCount &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;</code>。其原本是想当 messageCount 为 0 的时候不进行渲染，但实际上却渲染了 0。</p><p>为了更正，可以将左侧的值改成布尔类型：<code>messageCount &gt; 0 &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;</code>。</p></div><h3 id="_2-选择性地返回-null" tabindex="-1"><a class="header-anchor" href="#_2-选择性地返回-null"><span>2. 选择性地返回 null</span></a></h3><p>在一些情况下，你不想有任何东西进行渲染。比如，你不想显示已经打包好的物品。但一个组件必须返回一些东西。这种情况下，你可以直接返回 null。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>isPacked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 JSX 里，返回false, null, undefined在React中不会渲染。</p></div><h3 id="_3-渲染列表" tabindex="-1"><a class="header-anchor" href="#_3-渲染列表"><span>3. 渲染列表</span></a></h3><p>从数组中渲染数据：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;凯瑟琳·约翰逊: 数学家&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;马里奥·莫利纳: 化学家&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;穆罕默德·阿卜杜勒·萨拉姆: 物理学家&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;珀西·莱温·朱利亚: 化学家&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;苏布拉马尼扬·钱德拉塞卡: 天体物理学家&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> listItems <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">person<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>person<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 或者</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>
      people<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">person<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>person<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><ol><li><p>数组生成的JSX元素必须用 key 保持列表项的顺序，否则会报错</p></li><li><p>Fragment 语法的简写形式 <code>&lt;&gt; &lt;/&gt;</code> 无法接受 key 值，所以你只能要么把生成的节点用一个 <code>&lt;div&gt;</code> 标签包裹起来，要么使用长一点但更明确的 <code>&lt;Fragment&gt;</code> 写法：</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token keyword">const</span> listItems <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">person</span> <span class="token operator">=&gt;</span>
  <span class="token operator">&lt;</span>Fragment key<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>bio<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>组件不会把 key 当作 props 的一部分。Key 的存在只对 React 本身起到提示作用。如果你的组件需要一个 ID，那么请把它作为一个单独的 prop 传给组件： <code>&lt;Profile key={id} userId={id} /&gt;</code>。</li></ol></div><h2 id="保持组件纯粹" tabindex="-1"><a class="header-anchor" href="#保持组件纯粹"><span>保持组件纯粹</span></a></h2><ul><li>一个组件必须是纯粹的，就意味着： <ul><li>只负责自己的任务。 它不会更改在该函数调用前就已存在的对象或变量。</li><li>输入相同，则输出相同。 给定相同的输入，组件应该总是返回相同的 JSX。</li></ul></li><li>渲染随时可能发生，因此组件不应依赖于彼此的渲染顺序。</li><li>你不应该改变任何用于组件渲染的输入。这包括 props、state 和 context。通过 “设置” state 来更新界面，而不要改变预先存在的对象。</li><li>努力在你返回的 JSX 中表达你的组件逻辑。当你需要“改变事物”时，你通常希望在事件处理程序中进行。作为最后的手段，你可以使用 useEffect。</li><li>编写纯函数需要一些练习，但它充分释放了 React 范式的能力。</li></ul><h2 id="将-ui-视为树" tabindex="-1"><a class="header-anchor" href="#将-ui-视为树"><span>将 UI 视为树</span></a></h2><ul><li>树是表示实体之间关系的常见方式，它们经常用于建模 UI。</li><li>渲染树表示单次渲染中 React 组件之间的嵌套关系。</li><li>使用条件渲染，渲染树可能会在不同的渲染过程中发生变化。使用不同的属性值，组件可能会渲染不同的子组件。</li><li>渲染树有助于识别顶级组件和叶子组件。顶级组件会影响其下所有组件的渲染性能，而叶子组件通常会频繁重新渲染。识别它们有助于理解和调试渲染性能问题。</li><li>依赖树表示 React 应用程序中的模块依赖关系。</li><li>构建工具使用依赖树来捆绑必要的代码以部署应用程序。</li><li>依赖树有助于调试大型捆绑包带来的渲染速度过慢的问题，以及发现哪些捆绑代码可以被优化。</li></ul>`,61),o=[e];function l(c,i){return a(),s("div",null,o)}const d=n(p,[["render",l],["__file","02.描述UI.html.vue"]]),k=JSON.parse('{"path":"/notes/react/02.%E6%8F%8F%E8%BF%B0UI.html","title":"描述UI","lang":"zh-CN","frontmatter":{"title":"描述UI","date":"2024-01-22T11:27:45.000Z","order":3,"categories":["笔记"],"tags":["React"],"description":"JSX JSX 是 JavaScript 语法扩展，可以让你在 JavaScript 文件中书写类似 HTML 的标签。虽然还有其它方式可以编写组件，但大部分 React 开发者更喜欢 JSX 的简洁性，并且在大部分代码库中使用它。 JSX 规则 1. 只能返回一个根元素 如果想要在一个组件中包含多个元素，需要用一个父标签把它们包裹起来。如果你不想在标...","head":[["meta",{"property":"og:url","content":"https://www.lfangq.top/notes/react/02.%E6%8F%8F%E8%BF%B0UI.html"}],["meta",{"property":"og:site_name","content":"Lfangq"}],["meta",{"property":"og:title","content":"描述UI"}],["meta",{"property":"og:description","content":"JSX JSX 是 JavaScript 语法扩展，可以让你在 JavaScript 文件中书写类似 HTML 的标签。虽然还有其它方式可以编写组件，但大部分 React 开发者更喜欢 JSX 的简洁性，并且在大部分代码库中使用它。 JSX 规则 1. 只能返回一个根元素 如果想要在一个组件中包含多个元素，需要用一个父标签把它们包裹起来。如果你不想在标..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T01:54:59.000Z"}],["meta",{"property":"article:author","content":"Lfangq"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:published_time","content":"2024-01-22T11:27:45.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T01:54:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"描述UI\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-22T11:27:45.000Z\\",\\"dateModified\\":\\"2024-05-30T01:54:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lfangq\\",\\"url\\":\\"https://www.lfangq.top/\\"}]}"]]},"headers":[{"level":2,"title":"JSX","slug":"jsx","link":"#jsx","children":[]},{"level":2,"title":"JSX 规则","slug":"jsx-规则","link":"#jsx-规则","children":[{"level":3,"title":"1. 只能返回一个根元素","slug":"_1-只能返回一个根元素","link":"#_1-只能返回一个根元素","children":[]},{"level":3,"title":"2. 标签必须闭合","slug":"_2-标签必须闭合","link":"#_2-标签必须闭合","children":[]},{"level":3,"title":"3. 使用驼峰式命名法给 所有 大部分属性命名！","slug":"_3-使用驼峰式命名法给-所有-大部分属性命名","link":"#_3-使用驼峰式命名法给-所有-大部分属性命名","children":[]},{"level":3,"title":"4. 在 JSX 中通过大括号使用 JavaScript","slug":"_4-在-jsx-中通过大括号使用-javascript","link":"#_4-在-jsx-中通过大括号使用-javascript","children":[]},{"level":3,"title":"5. 使用 “双大括号”：JSX 中的 CSS 和 对象","slug":"_5-使用-双大括号-jsx-中的-css-和-对象","link":"#_5-使用-双大括号-jsx-中的-css-和-对象","children":[]}]},{"level":2,"title":"Props","slug":"props","link":"#props","children":[{"level":3,"title":"1. Props的传递和读取","slug":"_1-props的传递和读取","link":"#_1-props的传递和读取","children":[]},{"level":3,"title":"2. 给 prop 指定一个默认值","slug":"_2-给-prop-指定一个默认值","link":"#_2-给-prop-指定一个默认值","children":[]},{"level":3,"title":"3. 使用 JSX 展开语法传递 props","slug":"_3-使用-jsx-展开语法传递-props","link":"#_3-使用-jsx-展开语法传递-props","children":[]},{"level":3,"title":"4. 将 JSX 作为子组件传递","slug":"_4-将-jsx-作为子组件传递","link":"#_4-将-jsx-作为子组件传递","children":[]},{"level":3,"title":"5. Props是不可变的","slug":"_5-props是不可变的","link":"#_5-props是不可变的","children":[]}]},{"level":2,"title":"条件渲染","slug":"条件渲染","link":"#条件渲染","children":[{"level":3,"title":"1. 条件返回 JSX","slug":"_1-条件返回-jsx","link":"#_1-条件返回-jsx","children":[]},{"level":3,"title":"2. 选择性地返回 null","slug":"_2-选择性地返回-null","link":"#_2-选择性地返回-null","children":[]},{"level":3,"title":"3. 渲染列表","slug":"_3-渲染列表","link":"#_3-渲染列表","children":[]}]},{"level":2,"title":"保持组件纯粹","slug":"保持组件纯粹","link":"#保持组件纯粹","children":[]},{"level":2,"title":"将 UI 视为树","slug":"将-ui-视为树","link":"#将-ui-视为树","children":[]}],"git":{"createdTime":1717034099000,"updatedTime":1717034099000,"contributors":[{"name":"lfangq","email":"2251234678@qq.com","commits":1}]},"readingTime":{"minutes":8.15,"words":2444},"filePathRelative":"notes/react/02.描述UI.md","localizedDate":"2024年1月22日","excerpt":"","autoDesc":true}');export{d as comp,k as data};
