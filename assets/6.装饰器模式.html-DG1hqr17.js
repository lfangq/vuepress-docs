import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as t,b as e,d as p,o}from"./app-DjqQ9Aow.js";const c={},i=p(`<h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><ol><li>es6 示例</li></ol><p>es7可以使用装饰器语法糖实现</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义打开按钮</span>
<span class="token keyword">class</span> <span class="token class-name">OpenButton</span> <span class="token punctuation">{</span>
    <span class="token comment">// 点击后展示弹窗（旧逻辑）</span>
    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    	  modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;block&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义按钮对应的装饰器</span>
<span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将按钮实例传入</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">open_button</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>open_button <span class="token operator">=</span> open_button
    <span class="token punctuation">}</span>
    
    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>open_button<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// “包装”了一层新逻辑</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeButtonStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">changeButtonStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeButtonText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">disableButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">disableButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> btn <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span>
        btn<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;disabled&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">changeButtonText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span>
        btn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;快去登录&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> openButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> decorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span>openButton<span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// openButton.onClick()</span>
    <span class="token comment">// 此处可以分别尝试两个实例的onClick方法，验证装饰器是否生效</span>
    decorator<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function l(u,r){const n=a("Mermaid");return o(),t("div",null,[e(n,{id:"mermaid-0",code:"eJzT1dXlKsksyUm1UnixuPXl0g1PZ654tmLh0z39XEApBQWu9KLEggwFnyAuBSBwjH66fueLjQtjFYByzzpXPt04NSbvyY7eZ1N2Pu2f8bRv/rO5S5/Panm+e/KzeS1ANXYKTtFwY6FawQY5gQx4saH5+ZQVYGXO0U/XLXrWsf356vWxXMWlSRBbEU4CanJUABJOXKl5KQpcAFr8Vbw="}),i])}const m=s(c,[["render",l],["__file","6.装饰器模式.html.vue"]]),v=JSON.parse('{"path":"/notes/design-mode/6.%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"装饰器模式","lang":"zh-CN","frontmatter":{"title":"装饰器模式","date":"2024-05-17T15:43:22.000Z","order":6,"icon":"layer-group","category":["笔记"],"tags":["设计模式"],"description":"定义 装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。 示例 es6 示例 es7可以使用装饰器语法糖实现","head":[["meta",{"property":"og:url","content":"https://www.lfangq.top/notes/design-mode/6.%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Lfangq"}],["meta",{"property":"og:title","content":"装饰器模式"}],["meta",{"property":"og:description","content":"定义 装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。 示例 es6 示例 es7可以使用装饰器语法糖实现"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-05T05:25:35.000Z"}],["meta",{"property":"article:author","content":"Lfangq"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2024-05-17T15:43:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-05T05:25:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"装饰器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-17T15:43:22.000Z\\",\\"dateModified\\":\\"2024-06-05T05:25:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lfangq\\",\\"url\\":\\"https://www.lfangq.top/\\"}]}"]]},"headers":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}],"git":{"createdTime":1716882891000,"updatedTime":1717565135000,"contributors":[{"name":"lfangq","email":"2251234678@qq.com","commits":2}]},"readingTime":{"minutes":0.93,"words":280},"filePathRelative":"notes/design-mode/6.装饰器模式.md","localizedDate":"2024年5月17日","excerpt":"","autoDesc":true}');export{m as comp,v as data};
