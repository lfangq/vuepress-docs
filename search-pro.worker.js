const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":553,\"nextId\":553,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"3\",\"4\":\"3@0\",\"5\":\"4\",\"6\":\"5\",\"7\":\"5@0\",\"8\":\"6\",\"9\":\"6@0\",\"10\":\"7\",\"11\":\"7#快捷键大全\",\"12\":\"7#general\",\"13\":\"7#basic-editing\",\"14\":\"7#navigation\",\"15\":\"7#search-and-replace\",\"16\":\"7#multi-cursor-and-selection\",\"17\":\"7#rich-languages-editing\",\"18\":\"7#editor-management\",\"19\":\"7#file-management\",\"20\":\"7#display\",\"21\":\"7#debug\",\"22\":\"7#integrated-terminal\",\"23\":\"7#插件\",\"24\":\"7#path-intellisense\",\"25\":\"8\",\"26\":\"8@0\",\"27\":\"9\",\"28\":\"10\",\"29\":\"10#runtime\",\"30\":\"12\",\"31\":\"12#types\",\"32\":\"12#_1-1-基本类型-你可以直接获取到基本类型的值\",\"33\":\"12#_1-2-复杂类型-复杂类型赋值是获取到他的引用的值。-相当于传引用\",\"34\":\"12#_1-3-javascript-判断数据类型方法\",\"35\":\"12#references\",\"36\":\"12#_2-1-所有的赋值都用-const-避免使用var-eslint-prefer-const-no-const-assign\",\"37\":\"12#_2-2-如果你一定要对参数重新赋值-那就用let-而不是var-eslint-no-var\",\"38\":\"12#_2-3-注意-let、const-都是块级作用域\",\"39\":\"12#objects\",\"40\":\"12#_3-1-使用字面值创建对象-eslint-no-new-object\",\"41\":\"12#_3-2-当创建一个带有动态属性名的对象时-用计算后属性名\",\"42\":\"12#_3-3-用对象方法简写-eslint-object-shorthand\",\"43\":\"12#_3-4-用属性值缩写-eslint-object-shorthand\",\"44\":\"12#_3-5-将你的所有缩写放在对象声明的开始\",\"45\":\"12#_3-6-只对那些无效的标示使用引号-eslint-quote-props\",\"46\":\"12#_3-7-不要直接调用object-prototype上的方法-如hasownproperty-propertyisenumerable-isprototypeof。\",\"47\":\"12#_3-8-对象浅拷贝时-更推荐使用扩展运算符-就是-运算符-而不是object-assign。获取对象指定的几个属性时-用对象的rest解构运算符-也是-运算符-更好。\",\"48\":\"12#arrays\",\"49\":\"12#_4-1-用字面量赋值。-eslint-no-array-constructor\",\"50\":\"12#_4-2-用array-push-代替直接向数组中添加一个值。\",\"51\":\"12#_4-3-用扩展运算符做数组浅拷贝-类似上面的对象浅拷贝\",\"52\":\"12#_4-4-用-运算符而不是array-from来将一个可迭代的对象转换成数组。\",\"53\":\"12#_4-5-用-array-from-去将一个类数组对象转成一个数组。\",\"54\":\"12#_4-6-用-array-from-而不是-运算符去做map遍历。-因为这样可以避免创建一个临时数组。\",\"55\":\"12#_4-7-在数组方法的回调函数中使用-return-语句。-如果函数体由一条返回一个表达式的语句组成-并且这个表达式没有副作用-这个时候可以忽略return-详见-8-2-eslint-array-callback-return。\",\"56\":\"12#_4-8-如果一个数组有很多行-在数组的-后和-前断行。-请看下面示例\",\"57\":\"12#destructuring\",\"58\":\"12#_5-1-用对象的解构赋值来获取和使用对象某个或多个属性值。-eslint-prefer-destructuring\",\"59\":\"12#_5-2-用数组解构。\",\"60\":\"12#_5-3-多个返回值用对象的解构-而不是数组解构。\",\"61\":\"12#strings\",\"62\":\"12#_6-1-对string用单引号-。-eslint-quotes\",\"63\":\"12#_6-2-超过100个字符的字符串不应该用string串联成多行。\",\"64\":\"12#_6-3-用字符串模板而不是字符串拼接来组织可编程字符串。-eslint-prefer-template-template-curly-spacing\",\"65\":\"12#_6-4-永远不要在字符串中用eval-他就是潘多拉盒子。-eslint-no-eval\",\"66\":\"12#_6-5-不要使用不必要的转义字符。eslint-no-useless-escape\",\"67\":\"12#functions\",\"68\":\"12#_7-1-用命名函数表达式而不是函数声明。eslint-func-style\",\"69\":\"12#_7-2-把立即执行函数包裹在圆括号里。-eslint-wrap-iife\",\"70\":\"12#_7-2-1-iife\",\"71\":\"12#_7-3-不要在非函数块-if、while等等-内声明函数。把这个函数分配给一个变量。浏览器会允许你这样做-但浏览器解析方式不同-这是一个坏消息。【详见no-loop-func】-eslint-no-loop-func\",\"72\":\"12#_7-4-note-在ecma-262中-块-block-的定义是-一系列的语句-但是函数声明不是一个语句。-函数表达式是一个语句。\",\"73\":\"12#_7-5-不要用arguments命名参数。他的优先级高于每个函数作用域自带的arguments对象-这会导致函数自带的arguments值被覆盖\",\"74\":\"12#_7-6-不要使用arguments-用rest语法-代替。-eslint-prefer-rest-params\",\"75\":\"12#_7-7-用默认参数语法而不是在函数里对参数重新赋值。\",\"76\":\"12#_7-8-默认参数避免副作用\",\"77\":\"12#_7-9-把默认参数赋值放在最后\",\"78\":\"12#_7-10-不要用函数构造器创建函数。-eslint-no-new-func\",\"79\":\"12#_7-11-函数签名部分要有空格。eslint-space-before-function-paren-space-before-blocks\",\"80\":\"12#_7-12-不要改参数-eslint-no-param-reassign\",\"81\":\"12#_7-13-不要对参数重新赋值。-eslint-no-param-reassign\",\"82\":\"12#_7-14-用spread操作符-去调用多变的函数更好。-eslint-prefer-spread\",\"83\":\"12#_7-15-调用或者书写一个包含多个参数的函数应该像这个指南里的其他多行代码写法一样-每行值包含一个参数-每行逗号结尾。\",\"84\":\"12#arrow-functions\",\"85\":\"12#_8-1-当你一定要用函数表达式-在回调函数里-的时候就用箭头表达式吧。-eslint-prefer-arrow-callback-arrow-spacing\",\"86\":\"12#_8-2-如果函数体由一个没有副作用的表达式语句组成-删除大括号和return。否则-继续用大括号和-return-语句。-eslint-arrow-parens-arrow-body-style\",\"87\":\"12#_8-3-万一表达式涉及多行-把他包裹在圆括号里更可读。\",\"88\":\"12#_8-4-如果你的函数只有一个参数并且函数体没有大括号-就删除圆括号。否则-参数总是放在圆括号里。-注意-一直用圆括号也是没问题-只需要配置-always-option-for-eslint-eslint-arrow-parens\",\"89\":\"12#_8-5-避免箭头函数-和比较操作符-混淆-eslint-no-confusing-arrow\",\"90\":\"12#_8-6-在隐式return中强制约束函数体的位置-就写在箭头后面。-eslint-implicit-arrow-linebreak\",\"91\":\"12#classes-constructors\",\"92\":\"12#_9-1-常用class-避免直接操作prototype\",\"93\":\"12#_9-2-用extends实现继承\",\"94\":\"12#_9-3-方法可以返回this来实现方法链\",\"95\":\"12#_9-4-写一个定制的tostring-方法是可以的-只要保证它是可以正常工作且没有副作用的\",\"96\":\"12#_9-5-如果没有具体说明-类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。-eslint-no-useless-constructor\",\"97\":\"12#_9-6-避免重复类成员。-eslint-no-dupe-class-members\",\"98\":\"12#_9-7-除非外部库或框架需要使用特定的非静态方法-否则类方法应该使用this或被做成静态方法。-作为一个实例方法应该表明它根据接收者的属性有不同的行为。eslint-class-methods-use-this\",\"99\":\"12#modules\",\"100\":\"12#_10-1-用-import-export-模块而不是无标准的模块系统。你可以随时转到你喜欢的模块系统。\",\"101\":\"12#_10-2-不要用import通配符-就是-这种方式\",\"102\":\"12#_10-3-不要直接从import中直接export\",\"103\":\"12#_10-4-一个路径只-import-一次。-eslint-no-duplicate-imports\",\"104\":\"12#_10-5-不要导出可变的东西-eslint-import-no-mutable-exports\",\"105\":\"12#_10-6-在一个单一导出模块里-用-export-default-更好。-eslint-import-prefer-default-export\",\"106\":\"12#_10-7-import-放在其他所有语句之前。-eslint-import-first\",\"107\":\"12#_10-8-多行import应该缩进-就像多行数组和对象字面量\",\"108\":\"12#_10-9-在import语句里不允许webpack-loader语法-eslint-import-no-webpack-loader-syntax\",\"109\":\"12#iterators-and-generators\",\"110\":\"12#_11-1-不要用遍历器。用javascript高级函数代替for-in、-for-of。-eslint-no-iterator-no-restricted-syntax\",\"111\":\"12#_11-2-现在不要用generator\",\"112\":\"12#_11-3-如果你一定要用-或者你忽略我们的建议-请确保它们的函数签名空格是得当的。-eslint-generator-star-spacing\",\"113\":\"12#properties\",\"114\":\"12#_12-1-访问属性时使用点符号-eslint-dot-notation\",\"115\":\"12#_12-2-当获取的属性是变量时用方括号-取。\",\"116\":\"12#_12-3-做幂运算时用幂操作符-。-eslint-no-restricted-properties\",\"117\":\"12#variables\",\"118\":\"12#_13-1-用const或let声明变量。不这样做会导致全局变量。-我们想要避免污染全局命名空间。首长这样警告我们。-eslint-no-undef-prefer-const\",\"119\":\"12#_13-2-每个变量都用一个-const-或-let-。-eslint-one-var\",\"120\":\"12#_13-3-const放一起-let放一起\",\"121\":\"12#_13-4-在你需要的地方声明变量-但是要放在合理的位置\",\"122\":\"12#_13-5-不要使用链接变量分配。-eslint-no-multi-assign\",\"123\":\"12#_13-6-不要使用一元自增自减运算符-eslint-no-plusplus\",\"124\":\"12#_13-7-在赋值的时候避免在-前-后换行。-如果你的赋值语句超出-max-len-那就用小括号把这个值包起来再换行。-eslint-operator-linebreak\",\"125\":\"12#_13-8-不允许有未使用的变量。-eslint-no-unused-vars\",\"126\":\"12#hoisting\",\"127\":\"12#_14-1-var声明会被提前到他的作用域的最前面-它分配的值还没有提前。const-和-let被赋予了新的调用概念时效区-——-temporal-dead-zones-tdz-。-重要的是要知道为什么-typeof不再安全\",\"128\":\"12#_14-2-匿名函数表达式和-var-情况相同\",\"129\":\"12#_14-3-已命名函数表达式提升他的变量名-不是函数名或函数体\",\"130\":\"12#_14-4-函数声明则提升了函数名和函数体\",\"131\":\"12#comparison-operators-equality\",\"132\":\"12#_15-1-用-和-而不是-和-eslint-eqeqeq\",\"133\":\"12#_15-2-条件语句如-if-语句使用强制-toboolean-抽象方法来评估它们的表达式-并且始终遵循以下简单规则\",\"134\":\"12#_15-3-布尔值用缩写-而字符串和数字要明确比较对象\",\"135\":\"12#_15-4-更多信息请见angus-croll的真理、平等和javascript-——-truth-equality-and-javascript\",\"136\":\"12#_15-5-在case和default分句里用大括号创建一块包含语法声明的区域-e-g-let-const-function-and-class-eslint-no-case-declarations\",\"137\":\"12#_15-6-三元表达式不应该嵌套-通常是单行表达式。eslint-no-nested-ternary\",\"138\":\"12#_15-7-避免不需要的三元表达式。-eslint-no-unneeded-ternary\",\"139\":\"12#_15-8-用圆括号来混合这些操作符。-只有当标准的算术运算符-并且它们的优先级显而易见时-可以不用圆括号括起来。-eslint-no-mixed-operators\",\"140\":\"12#blocks\",\"141\":\"12#_16-1-用大括号包裹多行代码块。-eslint-nonblock-statement-body-position\",\"142\":\"12#_16-2-if表达式的else和if的关闭大括号在一行。-eslint-brace-style\",\"143\":\"12#_16-3-如果-if-语句中总是需要用-return-返回-那后续的-else-就不需要写了。-if-块中包含-return-它后面的-else-if-块中也包含了-return-这个时候就可以把-return-分到多个-if-语句块中。-eslint-no-else-return\",\"144\":\"12#control-statements\",\"145\":\"12#_17-1-当你的控制语句-if-while-等-太长或者超过最大长度限制的时候-把每一个-组-判断条件放在单独一行里。-逻辑操作符放在行首。\",\"146\":\"12#_17-2-不要用选择操作符代替控制语句。\",\"147\":\"12#comments\",\"148\":\"12#_18-1-多行注释用\",\"149\":\"12#_18-2-单行注释用-将单行注释放在被注释区域上面。如果注释不是在第一行-那么注释前面就空一行\",\"150\":\"12#_18-3-所有注释开头空一个-方便阅读。-eslint-spaced-comment\",\"151\":\"12#_18-4-在你的注释前使用fixme-或todo-前缀-这有助于其他开发人员快速理解你指出的需要重新访问的问题-或者您建议需要实现的问题的解决方案。-这些不同于常规注释-因为它们是可操作的。-动作是fixme-需要计算出来或todo-需要实现。\",\"152\":\"12#_18-5-用-fixme-给问题做注释\",\"153\":\"12#_18-6-用-todo-去注释问题的解决方案\",\"154\":\"12#whitespace\",\"155\":\"12#_19-1-tab用两个空格-eslint-indent\",\"156\":\"12#_19-2-在大括号前空一格。-eslint-space-before-blocks\",\"157\":\"12#_19-3-在控制语句-if-while-等-的圆括号前空一格。在函数调用和定义时-参数列表和函数名之间不空格。-eslint-keyword-spacing\",\"158\":\"12#_19-4-用空格来隔开运算符。-eslint-space-infix-ops\",\"159\":\"12#_19-5-文件结尾空一行-eslint-eol-last\",\"160\":\"12#_19-6-当出现长的方法链-2个-时用缩进。用点开头强调该行是一个方法调用-而不是一个新的语句。eslint-newline-per-chained-call-no-whitespace-before-property\",\"161\":\"12#_19-7-在一个代码块后下一条语句前空一行。\",\"162\":\"12#_19-8-不要用空白行填充块。-eslint-padded-blocks\",\"163\":\"12#_19-9不要在代码之间使用多个空白行填充。-eslint-no-multiple-empty-lines\",\"164\":\"12#_19-10-圆括号里不要加空格。-eslint-space-in-parens\",\"165\":\"12#_19-11-方括号里不要加空格。看示例。-eslint-array-bracket-spacing\",\"166\":\"12#_19-12-花括号里加空格。-eslint-object-curly-spacing\",\"167\":\"12#_19-13-避免一行代码超过100个字符-包含空格-。\",\"168\":\"12#_19-14-作为语句的花括号内也要加空格-——-后和-前都需要空格。-eslint-block-spacing\",\"169\":\"12#_19-15-前不要空格-后需要空格。-eslint-comma-spacing\",\"170\":\"12#_19-16-计算属性内要空格。参考上述花括号和中括号的规则。-eslint-computed-property-spacing\",\"171\":\"12#_19-17-调用函数时-函数名和小括号之间不要空格。-eslint-func-call-spacing\",\"172\":\"12#_19-18-在对象的字面量属性中-key-value-之间要有空格。-eslint-key-spacing\",\"173\":\"12#_19-19-行末不要空格。-eslint-no-trailing-spaces\",\"174\":\"12#_19-20-避免出现多个空行。-在文件末尾只允许空一行。-eslint-no-multiple-empty-lines\",\"175\":\"12#commas\",\"176\":\"12#_20-1-不要前置逗号。-eslint-comma-style\",\"177\":\"12#_20-2-额外结尾逗号-要-eslint-comma-dangle\",\"178\":\"12#semicolons\",\"179\":\"12#_21-1-yup-eslint-semi\",\"180\":\"12#type-casting-coercion\",\"181\":\"12#_22-1-在语句开始执行强制类型转换。\",\"182\":\"12#_22-2-strings-eslint-no-new-wrappers\",\"183\":\"12#_22-3-numbers-用-number-做类型转换-parseint转换string常需要带上基数。-eslint-radix\",\"184\":\"12#_22-4-请在注释中解释为什么要用移位运算和你在做什么。无论你做什么狂野的事-比如由于-parseint-是你的性能瓶颈导致你一定要用移位运算。-请说明这个是因为性能原因\",\"185\":\"12#_22-5-注意-用移位运算要小心-数字使用64-位表示的-但移位运算常常返回的是32为整形source-。移位运算对大于32位的整数会导致意外行为。discussion-最大的32位整数是-2-147-483-647\",\"186\":\"12#_22-6-布尔\",\"187\":\"12#naming-conventions\",\"188\":\"12#_23-1-避免用一个字母命名-让你的命名可描述。-eslint-id-length\",\"189\":\"12#_23-2-用小驼峰式命名你的对象、函数、实例。-eslint-camelcase\",\"190\":\"12#_23-3-用大驼峰式命名类。-eslint-new-cap\",\"191\":\"12#_23-4-不要用前置或后置下划线。-eslint-no-underscore-dangle\",\"192\":\"12#_23-5-不要保存引用this-用箭头函数或函数绑定——function-bind\",\"193\":\"12#_23-6-export-default导出模块a-则这个文件名也叫a-import-时候的参数也叫a。-大小写完全一致。\",\"194\":\"12#_23-7-当你export-default一个函数时-函数名用小驼峰-文件名需要和函数名一致。\",\"195\":\"12#_23-8-当你export一个结构体-类-单例-函数库-对象-时用大驼峰。\",\"196\":\"12#_23-9-简称和缩写应该全部大写或全部小写。\",\"197\":\"12#_23-10-你可以用全大写字母设置静态变量-他需要满足三个条件。\",\"198\":\"12#accessors\",\"199\":\"12#_24-1-不需要使用属性的访问器函数。\",\"200\":\"12#_24-2-不要使用javascript的getters-setters-因为他们会产生副作用-并且难以测试、维护和理解。相反的-你可以用-getval-和setval-hello-去创造你自己的accessor函数\",\"201\":\"12#_24-3-如果属性-方法是boolean-用-isval-或-hasval\",\"202\":\"12#_24-4-用get-和set-函数是可以的-但是要一起用\",\"203\":\"12#events\",\"204\":\"12#_25-1-通过哈希而不是原始值向事件装载数据时-不论是dom事件还是像backbone事件的很多属性-。-这使得后续的贡献者-程序员-向这个事件装载更多的数据时不用去找或者更新每个处理器。例如\",\"205\":\"12#jquery对象\",\"206\":\"12#_26-1-jquery对象用-变量表示。\",\"207\":\"12#_26-2-暂存jquery查找\",\"208\":\"12#_26-3-dom查找用层叠式-sidebar-ul-或-父节点-子节点-sidebar-ul-jsperf\",\"209\":\"12#_26-4-用jquery对象查询作用域的find方法查询\",\"210\":\"12#es5-兼容性\",\"211\":\"12#_27-1-参考kangax的es5兼容性列表\",\"212\":\"12#ecmascript-6-es-2015-styles\",\"213\":\"12#_28-1-这是收集到的各种es6特性的链接\",\"214\":\"12#_28-2-不要用tc39-proposals-tc39还没有到-stage-3。\",\"215\":\"12#standard-library\",\"216\":\"12#_29-1-用-number-isnan-代替全局的-isnan-eslint-no-restricted-globals\",\"217\":\"12#_29-2-用-number-isfinite-代替-isfinite-eslint-no-restricted-globals\",\"218\":\"12#testing\",\"219\":\"12#_30-1-yup\",\"220\":\"12#_30-2-no-but-seriously\",\"221\":\"13\",\"222\":\"13#一、模块化的理解\",\"223\":\"13#_1-什么是模块\",\"224\":\"13#_2-模块化的进化过程\",\"225\":\"13#_3-模块化的好处\",\"226\":\"13#_4-引入多个-script-后出现出现问题\",\"227\":\"13#二、模块化规范\",\"228\":\"13#_1-commonjs\",\"229\":\"13#_1-概述\",\"230\":\"13#_2-特点\",\"231\":\"13#_3-基本语法\",\"232\":\"13#_4-模块的加载机制\",\"233\":\"13#_5-服务器端实现\",\"234\":\"13#_1-下载安装node-js\",\"235\":\"13#_2-创建项目结构\",\"236\":\"13#_3-下载第三方模块\",\"237\":\"13#_4-定义模块代码\",\"238\":\"13#_5-通过node运行app-js\",\"239\":\"13#_6-浏览器端实现-借助browserify\",\"240\":\"13#_1-创建项目结构\",\"241\":\"13#_2-下载browserify\",\"242\":\"13#_3-定义模块代码-同服务器端\",\"243\":\"13#_4-打包处理js\",\"244\":\"13#_5-页面使用引入\",\"245\":\"13#_2-amd\",\"246\":\"13#_1-amd规范基本语法\",\"247\":\"13#_2-使用require-js\",\"248\":\"13#_1-下载require-js-并引入\",\"249\":\"13#_2-创建项目结构-1\",\"250\":\"13#_3-定义require-js的模块代码\",\"251\":\"13#_4-页面引入require-js模块\",\"252\":\"13#_3-cmd\",\"253\":\"13#_1-cmd规范基本语法\",\"254\":\"13#_2-sea-js简单使用教程\",\"255\":\"13#_1-下载sea-js-并引入\",\"256\":\"13#_2-创建项目结构-2\",\"257\":\"13#_3-定义sea-js的模块代码\",\"258\":\"13#_4-在index-html中引入\",\"259\":\"13#_4-es6模块化\",\"260\":\"13#_1-es6模块化语法\",\"261\":\"13#_2-es6-模块与-commonjs-模块的差异\",\"262\":\"13#_1-commonjs-模块输出的是一个值的拷贝-es6-模块输出的是值的引用。\",\"263\":\"13#_2-commonjs-模块是运行时加载-es6-模块是编译时输出接口。\",\"264\":\"13#_3-es6-babel-browserify使用教程\",\"265\":\"13#_1-定义package-json文件\",\"266\":\"13#_2-安装babel-cli-babel-preset-es2015和browserify\",\"267\":\"13#_3-定义-babelrc文件\",\"268\":\"13#_4-定义模块代码-1\",\"269\":\"13#_5-编译并在index-html中引入\",\"270\":\"13#三、总结\",\"271\":\"15\",\"272\":\"15#_1-定义\",\"273\":\"15#_2-this-绑定规则\",\"274\":\"15#_2-1-默认绑定\",\"275\":\"15#_2-2-隐式绑定\",\"276\":\"15#_2-3-显式绑定\",\"277\":\"15#_2-4-new绑定\",\"278\":\"15#_3-优先级\",\"279\":\"16\",\"280\":\"16#一、安装verdaccio\",\"281\":\"16#_1-全局安装-verdaccio\",\"282\":\"16#_2-启动verdaccio\",\"283\":\"16#_3-修改配置\",\"284\":\"16#二、部署\",\"285\":\"16#_1-docker部署\",\"286\":\"16#_2-pm2部署\",\"287\":\"16#三、管理npm仓库源\",\"288\":\"16#四、npm包发布\",\"289\":\"16#_1-注册\",\"290\":\"16#_2-登录\",\"291\":\"16#_3-发布\",\"292\":\"17\",\"293\":\"17#join\",\"294\":\"17#push\",\"295\":\"17#pop\",\"296\":\"17#shift\",\"297\":\"17#unshift\",\"298\":\"17#sort\",\"299\":\"17#reverse\",\"300\":\"17#concat\",\"301\":\"17#slice\",\"302\":\"17#splice\",\"303\":\"17#indexof\",\"304\":\"17#lastindexof\",\"305\":\"17#foreach\",\"306\":\"17#map\",\"307\":\"17#filter\",\"308\":\"17#every\",\"309\":\"17#some\",\"310\":\"18\",\"311\":\"18#创建-manifest\",\"312\":\"18#在清单中注册后台脚本\",\"313\":\"18#创建文件目录层级\",\"314\":\"18#创建后台脚本\",\"315\":\"18#添加存储权限\",\"316\":\"18#检查后台脚本\",\"317\":\"18#引入用户界面\",\"318\":\"18#层逻辑\",\"319\":\"18#给用户-options\",\"320\":\"18#配置文件说明\",\"321\":\"20\",\"322\":\"20#设计原则\",\"323\":\"20#单一功能原则\",\"324\":\"20#开放封闭原则\",\"325\":\"20#里式替换原则\",\"326\":\"20#接口隔离原则\",\"327\":\"20#依赖反转原则\",\"328\":\"20#设计模式\",\"329\":\"20@0\",\"330\":\"21\",\"331\":\"21#定义\",\"332\":\"21#疑问\",\"333\":\"21#示例\",\"334\":\"21@0\",\"335\":\"22\",\"336\":\"22#定义\",\"337\":\"22#示例\",\"338\":\"22#发布-订阅模式\",\"339\":\"22#观察者模式与发布-订阅模式的区别\",\"340\":\"22@0\",\"341\":\"23\",\"342\":\"23#定义\",\"343\":\"23@0\",\"344\":\"24\",\"345\":\"24#定义\",\"346\":\"24#示例\",\"347\":\"24@0\",\"348\":\"25\",\"349\":\"25#定义\",\"350\":\"25#示例\",\"351\":\"25@0\",\"352\":\"26\",\"353\":\"26#定义\",\"354\":\"26#示例\",\"355\":\"26@0\",\"356\":\"27\",\"357\":\"27#定义\",\"358\":\"27#示例\",\"359\":\"27#深拷贝\",\"360\":\"27@0\",\"361\":\"28\",\"362\":\"28#定义\",\"363\":\"28#示例\",\"364\":\"28@0\",\"365\":\"29\",\"366\":\"29#定义\",\"367\":\"29#示例\",\"368\":\"29@0\",\"369\":\"30\",\"370\":\"30#代理模式\",\"371\":\"30#示例\",\"372\":\"30@0\",\"373\":\"31\",\"374\":\"31#定义\",\"375\":\"31#示例\",\"376\":\"31@0\",\"377\":\"34\",\"378\":\"34#react是什么\",\"379\":\"34#使用react\",\"380\":\"34#通过src引用react\",\"381\":\"34#通过框架创建-react-项目\",\"382\":\"34#生产级的-react-框架\",\"383\":\"34#next-js\",\"384\":\"34#remix\",\"385\":\"34#gatsby\",\"386\":\"34#expo-用于原生应用\",\"387\":\"34#react-常用脚手架\",\"388\":\"34#create-react-app-官方脚手架\",\"389\":\"34#umijs-蚂蚁金服脚手架\",\"390\":\"34#icejs-阿里巴巴脚手架\",\"391\":\"34#icejs-与-next-js、umijs-之类的框架有什么区别\",\"392\":\"35\",\"393\":\"35#jsx\",\"394\":\"35#jsx-规则\",\"395\":\"35#_1-只能返回一个根元素\",\"396\":\"35#为什么多个-jsx-标签需要被一个父元素包裹\",\"397\":\"35#_2-标签必须闭合\",\"398\":\"35#_3-使用驼峰式命名法给-所有-大部分属性命名\",\"399\":\"35#_4-在-jsx-中通过大括号使用-javascript\",\"400\":\"35#_5-使用-双大括号-jsx-中的-css-和-对象\",\"401\":\"35#props\",\"402\":\"35#_1-props的传递和读取\",\"403\":\"35#_2-给-prop-指定一个默认值\",\"404\":\"35#_3-使用-jsx-展开语法传递-props\",\"405\":\"35#_4-将-jsx-作为子组件传递\",\"406\":\"35#_5-props是不可变的\",\"407\":\"35#条件渲染\",\"408\":\"35#_1-条件返回-jsx\",\"409\":\"35#_2-选择性地返回-null\",\"410\":\"35#_3-渲染列表\",\"411\":\"35#保持组件纯粹\",\"412\":\"35#将-ui-视为树\",\"413\":\"36\",\"414\":\"36#响应事件\",\"415\":\"36#_1-添加事件处理函数\",\"416\":\"36#_2-在事件处理函数中读取-props\",\"417\":\"36#_3-事件传播\",\"418\":\"36#_4-阻止传播\",\"419\":\"36#_5-捕获阶段事件\",\"420\":\"36#_6-阻止默认行为\",\"421\":\"36#state-组件的记忆\",\"422\":\"36#_1-使用-usestate-hook-添加-state-变量\",\"423\":\"36#_2-state-是隔离且私有的\",\"424\":\"36#_3-设置-state-会触发渲染\",\"425\":\"36#_4-设置-state-只会为下一次渲染变更-state-的值-一个-state-变量的值永远不会在一次渲染的内部发生变化\",\"426\":\"36#_5-在下次渲染前多次更新同一个-state-解决上面问题\",\"427\":\"36#_6-更新-state-中的对象\",\"428\":\"36#_7-更新-state-中的数组\",\"429\":\"36#react生命周期\",\"430\":\"37\",\"431\":\"37#构建-state-的原则\",\"432\":\"37#在组件间共享状态\",\"433\":\"37#_1-状态提升\",\"434\":\"37#_2-每个状态都对应唯一的数据源\",\"435\":\"37#对-state-进行保留和重置\",\"436\":\"37#_1-state-进行保留和重置的原则\",\"437\":\"37#_2-在相同位置重置-state\",\"438\":\"37#reducer\",\"439\":\"37#_1-在组件中使用-reducer\",\"440\":\"37#_2-对比-usestate-和-usereducer\",\"441\":\"37#_3-编写一个好的-reducers\",\"442\":\"37#使用-context-深层传递参数\",\"443\":\"37#使用-reducer-和-context-拓展你的应用\",\"444\":\"38\",\"445\":\"38#使用-ref-引用值\",\"446\":\"38#使用-ref-操作-dom\",\"447\":\"38#使用-ref-回调管理-ref-列表\",\"448\":\"38#访问另一个组件的-dom-节点\",\"449\":\"38#使用-useimperativehandle-命令句柄限制暴露的api\",\"450\":\"38#react-何时添加-refs\",\"451\":\"38#用-flushsync-同步更新-state\",\"452\":\"38#使用-effect-实现同步\",\"453\":\"38#_1-如何编写-effect\",\"454\":\"38#_2-指定-effect-依赖\",\"455\":\"38#_3-按需添加清理-cleanup-函数\",\"456\":\"38#_4-如何处理在开发环境中-effect-执行两次\",\"457\":\"38#_5-effect的不同渲染\",\"458\":\"38#_6-effect-的生命周期\",\"459\":\"38#_7-从-effect-提取非响应式逻辑\",\"460\":\"38#_8-移除-effect-依赖\",\"461\":\"40\",\"462\":\"40#技术选择\",\"463\":\"40#一、脚手架搭建\",\"464\":\"40#typescript-与-typescript-swc的区别\",\"465\":\"40#创建目录\",\"466\":\"42\",\"467\":\"42#什么是-typescript\",\"468\":\"42#安装-typescript\",\"469\":\"43\",\"470\":\"43#介绍\",\"471\":\"43#布尔类型-boolean\",\"472\":\"43#数字类型-number\",\"473\":\"43#字符串类型-string\",\"474\":\"43#数组类型-array\",\"475\":\"43#元组类型-tuple\",\"476\":\"43#枚举类型-enum\",\"477\":\"43#任意类型-any\",\"478\":\"43#null-和-undefined\",\"479\":\"43#void类型\",\"480\":\"43#never类型\",\"481\":\"43#symbol-es6-中的新类型\",\"482\":\"43#bigint-es10-中的新类型\",\"483\":\"44\",\"484\":\"44#基础\",\"485\":\"44#最佳通用类型\",\"486\":\"44#上下文类型\",\"487\":\"45\",\"488\":\"45#访问联合类型的属性或方法\",\"489\":\"46\",\"490\":\"46#「类型-方括号」表示法\",\"491\":\"46#数组泛型\",\"492\":\"46#用接口表示数组\",\"493\":\"46#类数组\",\"494\":\"46#any-在数组中的应用\",\"495\":\"47\",\"496\":\"47#什么是接口\",\"497\":\"47#简单的例子\",\"498\":\"47#可选属性\",\"499\":\"47#任意属性\",\"500\":\"47#只读属性\",\"501\":\"48\",\"502\":\"48#函数声明\",\"503\":\"48#函数表达式\",\"504\":\"48#用接口定义函数的形状\",\"505\":\"48#可选参数\",\"506\":\"48#参数默认值\",\"507\":\"48#剩余参数\",\"508\":\"48#重载\",\"509\":\"49\",\"510\":\"49#语法\",\"511\":\"49#类型断言的用途\",\"512\":\"49#将一个联合类型断言为其中一个类型\",\"513\":\"49#将一个父类断言为更加具体的子类\",\"514\":\"49#将任何一个类型断言为-any\",\"515\":\"49#将-any-断言为一个具体的类型\",\"516\":\"49#类型断言的限制\",\"517\":\"49#双重断言\",\"518\":\"49#类型断言-vs-类型转换\",\"519\":\"49#类型断言-vs-类型声明\",\"520\":\"49#类型断言-vs-泛型\",\"521\":\"50\",\"522\":\"50#新语法索引\",\"523\":\"50#什么是声明语句\",\"524\":\"50#第三方声明文件\",\"525\":\"50#书写声明文件\",\"526\":\"50#全局变量\",\"527\":\"50#declare-var\",\"528\":\"50#declare-function\",\"529\":\"50#declare-class\",\"530\":\"50#declare-enum\",\"531\":\"50#declare-namespace\",\"532\":\"50#嵌套的命名空间\",\"533\":\"50#interface-和-type\",\"534\":\"50#防止命名冲突\",\"535\":\"50#声明合并\",\"536\":\"50#npm-包\",\"537\":\"50#export\",\"538\":\"50#混用-declare-和-export\",\"539\":\"50#export-namespace\",\"540\":\"50#export-default\",\"541\":\"50#export-1\",\"542\":\"50#umd-库\",\"543\":\"50#export-as-namespace\",\"544\":\"50#直接扩展全局变量\",\"545\":\"50#在-npm-包或-umd-库中扩展全局变量\",\"546\":\"50#declare-global\",\"547\":\"50#模块插件\",\"548\":\"50#声明文件中的依赖\",\"549\":\"50#三斜线指令\",\"550\":\"50#书写一个全局变量的声明文件\",\"551\":\"50#依赖一个全局变量的声明文件\",\"552\":\"52\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[2],\"2\":[null,null,1],\"3\":[1],\"4\":[null,null,1],\"5\":[1,5],\"6\":[1],\"7\":[null,null,1],\"8\":[1],\"9\":[null,null,1],\"10\":[1],\"11\":[1],\"12\":[1,36],\"13\":[2,87],\"14\":[1,50],\"15\":[3,46],\"16\":[4,62],\"17\":[3,52],\"18\":[2,44],\"19\":[2,60],\"20\":[1,76],\"21\":[1,28],\"22\":[2,41],\"23\":[1],\"24\":[2,1],\"25\":[1],\"26\":[null,null,1],\"27\":[1],\"28\":[1],\"29\":[1],\"30\":[3],\"31\":[1],\"32\":[3,17],\"33\":[5,15],\"34\":[4,111],\"35\":[1],\"36\":[7,15],\"37\":[6,18],\"38\":[4,12],\"39\":[1],\"40\":[5,8],\"41\":[4,25],\"42\":[4,13],\"43\":[5,9],\"44\":[4,21],\"45\":[5,18],\"46\":[6,32],\"47\":[9,29],\"48\":[1],\"49\":[5,8],\"50\":[5,9],\"51\":[4,16],\"52\":[5,11],\"53\":[5,20],\"54\":[7,11],\"55\":[12,41],\"56\":[7,15],\"57\":[1],\"58\":[5,17],\"59\":[4,13],\"60\":[5,20],\"61\":[1],\"62\":[6,11],\"63\":[5,37],\"64\":[5,19],\"65\":[6],\"66\":[5,19],\"67\":[1],\"68\":[5,36],\"69\":[5,25],\"70\":[4,30],\"71\":[14],\"72\":[11,14],\"73\":[8,9],\"74\":[7,19],\"75\":[3,23],\"76\":[3,19],\"77\":[3,8],\"78\":[5,17],\"79\":[5,17],\"80\":[5,19],\"81\":[5,21],\"82\":[6,26],\"83\":[6,11],\"84\":[2],\"85\":[7,22],\"86\":[9,40],\"87\":[5,16],\"88\":[14,41],\"89\":[7,15],\"90\":[7,6],\"91\":[2],\"92\":[4,21],\"93\":[3,22],\"94\":[3,21],\"95\":[5,16],\"96\":[7,16],\"97\":[5,12],\"98\":[7,14],\"99\":[1],\"100\":[6,18],\"101\":[5,9],\"102\":[4,15],\"103\":[6,13],\"104\":[5,14],\"105\":[7,11],\"106\":[6,10],\"107\":[5,14],\"108\":[6,19],\"109\":[3],\"110\":[9,55],\"111\":[3,2],\"112\":[7,17],\"113\":[1],\"114\":[5,11],\"115\":[5,13],\"116\":[5,10],\"117\":[1],\"118\":[10,8],\"119\":[8,26],\"120\":[4,18],\"121\":[4,24],\"122\":[5,25],\"123\":[6,42],\"124\":[12,11],\"125\":[5,41],\"126\":[1],\"127\":[14,29],\"128\":[4,15],\"129\":[4,19],\"130\":[3,8],\"131\":[3],\"132\":[10],\"133\":[8,24],\"134\":[4,13],\"135\":[9],\"136\":[10,27],\"137\":[6,16],\"138\":[5,14],\"139\":[9,26],\"140\":[1],\"141\":[5,10],\"142\":[5,9],\"143\":[18,13],\"144\":[2],\"145\":[12,17],\"146\":[4,6],\"147\":[1],\"148\":[3,20],\"149\":[6,25],\"150\":[6,24],\"151\":[13],\"152\":[4,17],\"153\":[4,19],\"154\":[1],\"155\":[5,11],\"156\":[5,17],\"157\":[11,10],\"158\":[5,10],\"159\":[5,10],\"160\":[9,35],\"161\":[4,13],\"162\":[5,13],\"163\":[4,18],\"164\":[5,10],\"165\":[6,13],\"166\":[5,8],\"167\":[5,45],\"168\":[7,11],\"169\":[6,10],\"170\":[6,11],\"171\":[6,4],\"172\":[6,9],\"173\":[4],\"174\":[6,9],\"175\":[1],\"176\":[5,18],\"177\":[6,46],\"178\":[1],\"179\":[5,26],\"180\":[3],\"181\":[4],\"182\":[5,22],\"183\":[8,15],\"184\":[8,10],\"185\":[15,7],\"186\":[4,11],\"187\":[2],\"188\":[6,6],\"189\":[7,14],\"190\":[5,16],\"191\":[5,18],\"192\":[7,14],\"193\":[9,47],\"194\":[7,5],\"195\":[9,7],\"196\":[4,20],\"197\":[5,61],\"198\":[1],\"199\":[4],\"200\":[10,11],\"201\":[6,9],\"202\":[6,16],\"203\":[1],\"204\":[9,18],\"205\":[1],\"206\":[4,10],\"207\":[3,15],\"208\":[11],\"209\":[3,10],\"210\":[2],\"211\":[4],\"212\":[5],\"213\":[3,35],\"214\":[8,8],\"215\":[2,1],\"216\":[8,18],\"217\":[8,14],\"218\":[1],\"219\":[4,5],\"220\":[6,25],\"221\":[1,3],\"222\":[2],\"223\":[3,9],\"224\":[2,90],\"225\":[2,6],\"226\":[3,19],\"227\":[2],\"228\":[2],\"229\":[3,17],\"230\":[3,12],\"231\":[3,50],\"232\":[3,32],\"233\":[3],\"234\":[3],\"235\":[2,23],\"236\":[2,6],\"237\":[2,26],\"238\":[3,4],\"239\":[4],\"240\":[2,23],\"241\":[2,9],\"242\":[4,9],\"243\":[2,7],\"244\":[2,11],\"245\":[2,19],\"246\":[3,15],\"247\":[4,10],\"248\":[4,13],\"249\":[2,11],\"250\":[3,60],\"251\":[4,61],\"252\":[2,13],\"253\":[3,27],\"254\":[4],\"255\":[4,10],\"256\":[2,13],\"257\":[3,40],\"258\":[3,17],\"259\":[2,13],\"260\":[3,41],\"261\":[6,2],\"262\":[6],\"263\":[6,35],\"264\":[5,4],\"265\":[3,8],\"266\":[6,13],\"267\":[3,3],\"268\":[2,24],\"269\":[3,46],\"270\":[2,33],\"271\":[1],\"272\":[2,5],\"273\":[3,10],\"274\":[3,59],\"275\":[2,88],\"276\":[3,81],\"277\":[3,46],\"278\":[2],\"279\":[4],\"280\":[2],\"281\":[1,5],\"282\":[2,48],\"283\":[2,130],\"284\":[2,2],\"285\":[2,84],\"286\":[2,46],\"287\":[2,34],\"288\":[2],\"289\":[2,28],\"290\":[2,28],\"291\":[2,35],\"292\":[1],\"293\":[2,14],\"294\":[2,16],\"295\":[2,16],\"296\":[2,17],\"297\":[2,15],\"298\":[2,25],\"299\":[2,13],\"300\":[2,23],\"301\":[2,28],\"302\":[2,36],\"303\":[2,21],\"304\":[2,20],\"305\":[2,34],\"306\":[2,23],\"307\":[2,30],\"308\":[2,25],\"309\":[2,23],\"310\":[1,28],\"311\":[2,30],\"312\":[1,30],\"313\":[1,19],\"314\":[1,35],\"315\":[1,29],\"316\":[1,12],\"317\":[1,151],\"318\":[1,80],\"319\":[2,120],\"320\":[1,141],\"321\":[1,3],\"322\":[1,21],\"323\":[1,45],\"324\":[1,56],\"325\":[1,60],\"326\":[1,57],\"327\":[1,71],\"328\":[1,29],\"329\":[null,null,1],\"330\":[1],\"331\":[1,13],\"332\":[1,22],\"333\":[1,54],\"334\":[null,null,1],\"335\":[1],\"336\":[1,13],\"337\":[1,43],\"338\":[2,61],\"339\":[2,4],\"340\":[null,null,1],\"341\":[1],\"342\":[1,11],\"343\":[null,null,1],\"344\":[1],\"345\":[1,13],\"346\":[1,76],\"347\":[null,null,1],\"348\":[1],\"349\":[1,6],\"350\":[1,117],\"351\":[null,null,1],\"352\":[1],\"353\":[1,4],\"354\":[1,62],\"355\":[null,null,1],\"356\":[1],\"357\":[1,16],\"358\":[1,44],\"359\":[1,69],\"360\":[null,null,1],\"361\":[1],\"362\":[1,8],\"363\":[1,45],\"364\":[null,null,1],\"365\":[1],\"366\":[1,5],\"367\":[1,51],\"368\":[null,null,1],\"369\":[1],\"370\":[1,9],\"371\":[1,54],\"372\":[null,null,1],\"373\":[1],\"374\":[1,19],\"375\":[1,34],\"376\":[null,null,1],\"377\":[1],\"378\":[1,12],\"379\":[1],\"380\":[1,101],\"381\":[3],\"382\":[3],\"383\":[2,19],\"384\":[1,13],\"385\":[1,18],\"386\":[3,26],\"387\":[2],\"388\":[2,8],\"389\":[2,12],\"390\":[2,10],\"391\":[7,15],\"392\":[1],\"393\":[1,15],\"394\":[2],\"395\":[2,20],\"396\":[4,13],\"397\":[2],\"398\":[4,48],\"399\":[5,55],\"400\":[8,65],\"401\":[1,17],\"402\":[2,35],\"403\":[4,32],\"404\":[5,14],\"405\":[4,41],\"406\":[2,9],\"407\":[1],\"408\":[3,57],\"409\":[3,25],\"410\":[2,82],\"411\":[1,35],\"412\":[3,20],\"413\":[1],\"414\":[1,13],\"415\":[2,56],\"416\":[3,37],\"417\":[2,18],\"418\":[2,42],\"419\":[2,31],\"420\":[2,21],\"421\":[2,20],\"422\":[7,36],\"423\":[3,8],\"424\":[4],\"425\":[7,33],\"426\":[5,47],\"427\":[4,44],\"428\":[4,42],\"429\":[1,22],\"430\":[1],\"431\":[3,31],\"432\":[1],\"433\":[2,18],\"434\":[2,6],\"435\":[3],\"436\":[3,11],\"437\":[3,4],\"438\":[1,9],\"439\":[3,22],\"440\":[5,59],\"441\":[3,50],\"442\":[3,82],\"443\":[5],\"444\":[1],\"445\":[3,28],\"446\":[4,22],\"447\":[4,19],\"448\":[3,38],\"449\":[3,21],\"450\":[3,45],\"451\":[4,7],\"452\":[3,17],\"453\":[3,50],\"454\":[4,58],\"455\":[4,15],\"456\":[5,43],\"457\":[2,28],\"458\":[3,13],\"459\":[4,27],\"460\":[4,34],\"461\":[1],\"462\":[1,4],\"463\":[2,6],\"464\":[3,5],\"465\":[1,1],\"466\":[1,4],\"467\":[2,4],\"468\":[2,27],\"469\":[1],\"470\":[1,28],\"471\":[3,39],\"472\":[3,30],\"473\":[3,31],\"474\":[3,16],\"475\":[3,46],\"476\":[3,36],\"477\":[3,51],\"478\":[3,39],\"479\":[1,30],\"480\":[1,31],\"481\":[4,24],\"482\":[4,32],\"483\":[1],\"484\":[1,33],\"485\":[1,38],\"486\":[1,59],\"487\":[1,36],\"488\":[1,52],\"489\":[1,6],\"490\":[5,36],\"491\":[1,16],\"492\":[1,21],\"493\":[1,58],\"494\":[2,13],\"495\":[2,7],\"496\":[1,17],\"497\":[1,43],\"498\":[1,43],\"499\":[1,61],\"500\":[1,67],\"501\":[1],\"502\":[1,50],\"503\":[1,40],\"504\":[1,21],\"505\":[1,43],\"506\":[1,28],\"507\":[1,28],\"508\":[1,52],\"509\":[1,5],\"510\":[1,28],\"511\":[1,2],\"512\":[1,90],\"513\":[1,83],\"514\":[1,78],\"515\":[2,51],\"516\":[1,105],\"517\":[1,42],\"518\":[3,26],\"519\":[3,85],\"520\":[3,33],\"521\":[1,5],\"522\":[1,38],\"523\":[1,85],\"524\":[1,17],\"525\":[1,39],\"526\":[1,60],\"527\":[2,67],\"528\":[2,23],\"529\":[2,40],\"530\":[2,29],\"531\":[2,79],\"532\":[1,37],\"533\":[3,97],\"534\":[1,41],\"535\":[1,30],\"536\":[2,123],\"537\":[1,56],\"538\":[4,36],\"539\":[2,23],\"540\":[2,49],\"541\":[2,78],\"542\":[2,20],\"543\":[3,28],\"544\":[1,34],\"545\":[5,18],\"546\":[2,25],\"547\":[1,33],\"548\":[1,26],\"549\":[1,20],\"550\":[1,45],\"551\":[1,27],\"552\":[1,3]},\"averageFieldLength\":[3.2612089308988197,27.058508207028265,0.6090676412854409],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"1\":{\"h\":\"AES/DES加密解密示例\"},\"2\":{\"c\":[\"示例\"]},\"3\":{\"h\":\"示例\"},\"4\":{\"c\":[\"示例\"]},\"5\":{\"h\":\"技术文档\",\"t\":[\"收集记录各种常用的网站站点、技术文档、命令行，方便导航和查询。\"]},\"6\":{\"h\":\"Git命令\"},\"7\":{\"c\":[\"技术文档\"]},\"8\":{\"h\":\"Node命令\"},\"9\":{\"c\":[\"技术文档\"]},\"10\":{\"h\":\"VsCode快捷键\"},\"11\":{\"h\":\"快捷键大全\"},\"12\":{\"h\":\"General\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"Ctrl + Shift + P, F1\",\"Show Command Palette\",\"显示命令面板\",\"Ctrl + P\",\"Quick Open, Go to File…\",\"快速打开，进入文件\",\"Ctrl + Shift + N\",\"New window/instance\",\"新窗口/实例\",\"Ctrl+Shift+W\",\"Close window/instance\",\"关闭窗口/实例\",\"Ctrl +\",\"User Settings\",\"用户设置\",\"Ctrl + K Ctrl + S\",\"Keyboard Shortcuts\",\"键盘快捷键\"]},\"13\":{\"h\":\"Basic editing\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"Ctrl + X\",\"Cut line (empty selection)\",\"剪切\",\"Ctrl + C\",\"Copy line (empty selection)\",\"复制\",\"Alt + ↑ / ↓\",\"Move line up/down\",\"向上/下移动行\",\"Shift + Alt + ↓ / ↑\",\"Copy line up/down\",\"向上/下复制行\",\"Ctrl + Shift + K\",\"Delete line\",\"删除行\",\"Ctrl + Enter\",\"Insert line below\",\"在下面插入行\",\"Ctrl + Shift + Enter\",\"Insert line above\",\"在上面插入行\",\"Ctrl + Shift + \\\\\",\"Jump to matching bracket\",\"跳到匹配的括号\",\"Ctrl + ] / [\",\"Indent/outdent line\",\"行缩进\",\"Home /\",\"End Go to beginning/end of line\",\"转到行首/行尾\",\"Ctrl + Home\",\"Go to beginning of file\",\"转到文件的开头\",\"Ctrl + End\",\"Go to end of file\",\"转到文件的结尾\",\"Ctrl + ↑ / ↓\",\"Scroll line up/down\",\"行上下滚动\",\"Alt + PgUp / PgDn\",\"Scroll page up/down\",\"页面上下滚动\",\"Ctrl + Shift + [\",\"Fold (collapse) region\",\"折叠\",\"Ctrl + Shift + ]\",\"Unfold (uncollapse) region\",\"展开\",\"Ctrl + K Ctrl + [\",\"Fold (collapse) all subregions\",\"折叠全部区域\",\"Ctrl + K Ctrl + ]\",\"Unfold (uncollapse) all subregions\",\"展开全部区域\",\"Ctrl + K Ctrl + 0\",\"Fold (collapse) all regions\",\"折叠全部区域\",\"Ctrl + K Ctrl + J\",\"Unfold (uncollapse) all regions\",\"展开全部区域\",\"Ctrl + K Ctrl + C\",\"Add line comment\",\"添加行注释\",\"Ctrl + K Ctrl + U\",\"Remove line comment\",\"删除行注释\",\"Ctrl + /\",\"Toggle line comment\",\"行注释\",\"Shift + Alt + A\",\"Toggle block comment\",\"块注释\",\"Alt + Z\",\"Toggle word wrap\",\"切换自动换行\"]},\"14\":{\"h\":\"Navigation\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"Ctrl + T\",\"Show all Symbols\",\"按关键字搜索\",\"Ctrl + G\",\"Go to Line...\",\"行跳转\",\"Ctrl + P\",\"Go to File...\",\"打开文件\",\"Ctrl + Shift + O\",\"Go to Symbol...\",\"转到编辑器中的符号\",\"Ctrl + Shift + M\",\"Show Problems panel\",\"显示问题面板\",\"F8\",\"Go to next error or warning\",\"转到下个错误或警告\",\"Shift + F8\",\"Go to previous error or warning\",\"转到上个错误或警告\",\"Ctrl + Shift + Tab\",\"Navigate editor group history\",\"切换工作区\",\"Alt + ← / →\",\"Go back / forward\",\"切换工作区\",\"Ctrl + M\",\"Toggle Tab moves focus\",\"切换 Tab 键移动焦点\"]},\"15\":{\"h\":\"Search and replace\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"Ctrl + F\",\"Find\",\"查找\",\"Ctrl + H\",\"Replace\",\"替换\",\"F3 / Shift + F3\",\"Find next/previous\",\"查找上/下一个\",\"Alt + Enter\",\"Select all occurences of Find match\",\"执行笔记本单元格并在下方插入\",\"Ctrl + D\",\"Add selection to next Find match\",\"将下一个查找匹配项添加到选择\",\"Ctrl + K Ctrl + D\",\"Move last selection to next Find match\",\"将上次选择移动到下一个查找匹配项\",\"Alt + C / R / W\",\"Toggle case-sensitive / regex / whole word\",\"区分大小写/正则匹配/全字匹配\"]},\"16\":{\"h\":\"Multi-cursor and selection\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"Alt + Click\",\"Insert cursor\",\"将鼠标点击的行添加到选择项\",\"Ctrl + Alt + ↑ / ↓\",\"Insert cursor above / below\",\"在上面/下面插入光标\",\"Ctrl + U\",\"Undo last cursor operation\",\"撤销最后光标操作\",\"Shift + Alt + I\",\"Insert cursor at end of each line selected\",\"在选定的每一行的末尾插入光标\",\"Ctrl + L\",\"Select current line\",\"选择当前行\",\"Ctrl + Shift + L\",\"Select all occurrences of current selection\",\"选择当前选择的所有匹配项\",\"Ctrl + F2\",\"Select all occurrences of current word\",\"选择当前出现的所有单词\",\"Shift + Alt + →\",\"Expand selection\",\"扩大选择\",\"Shift + Alt + ←\",\"Shrink selection\",\"缩小选择\",\"Shift + Alt + (drag mouse)\",\"Column (box) selection\",\"列(箱)的选择\",\"Ctrl + Shift+Alt + (arrow key)\",\"Column (box) selection\",\"列(箱)的选择\",\"Ctrl + Shift+Alt + PgUp / PgDn\",\"Column (box) selection page up/down\",\"列(箱)的选择\"]},\"17\":{\"h\":\"Rich languages editing\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"Ctrl + Space\",\"Trigger suggestion\",\"触发的建议\",\"Ctrl + Shift+Space\",\"Trigger parameter hints\",\"触发参数提示\",\"Shift + Alt + F\",\"Format document\",\"格式化文件\",\"Ctrl + K Ctrl + F\",\"Format selection\",\"格式选择\",\"F12\",\"Go to Definition\",\"移至定义区\",\"Alt + F12\",\"Peek Definition\",\"Ctrl + K F12\",\"Open Definition to the side\",\"打开定义到边\",\"Ctrl + .\",\"Quick Fix\",\"快速修复\",\"Shift + F12\",\"Show References\",\"显示引用\",\"F2\",\"Rename Symbol\",\"重命名符号\",\"Ctrl + K Ctrl + X\",\"Trim trailing whitespace\",\"修剪尾随空格\",\"Ctrl + K M\",\"Change file language\",\"更改文件语言\"]},\"18\":{\"h\":\"Editor management\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"Ctrl + F4, Ctrl + W\",\"Close editor\",\"关闭编辑器\",\"Ctrl + K F\",\"Close folder\",\"关闭文件夹\",\"Ctrl + \\\\\",\"Split editor\",\"拆分编辑器\",\"Ctrl + 1 / 2 / 3\",\"Focus into 1st, 2nd or 3rd editor group\",\"关注第一，第二或第三编辑组\",\"Ctrl + K Ctrl + ← / →\",\"Focus into previous/next editor group\",\"关注上个/下个编辑组\",\"Ctrl + Shift + PgUp / PgDn\",\"Move editor left/right\",\"左/右移动编辑器\",\"Ctrl + K ← / →\",\"Move active editor group\",\"移动活动编辑器组\"]},\"19\":{\"h\":\"File management\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"Ctrl + N\",\"New File\",\"创建新文件\",\"Ctrl + O\",\"Open File...\",\"打开文件\",\"Ctrl + S\",\"Save\",\"保存\",\"Ctrl + Shift + S\",\"Save As...\",\"另保存\",\"Ctrl + K S\",\"Save All\",\"全部保存\",\"Ctrl + F4\",\"Close\",\"关闭\",\"Ctrl + K Ctrl + W\",\"Close All\",\"关闭全部\",\"Ctrl + Shift + T\",\"Reopen closed editor\",\"重新\",\"Ctrl + K\",\"Enter Keep preview mode editor open\",\"重新打开关闭编辑器\",\"Ctrl + Tab\",\"Open next\",\"打开下一个\",\"Ctrl + Shift + Tab\",\"Open previous\",\"打开上一个\",\"Ctrl + K P\",\"Copy path of active file\",\"复制活动文件的路径\",\"Ctrl + K R\",\"Reveal active file in Explorer\",\"在资源管理器中显示活动文件\",\"Ctrl + K O\",\"Show active file in new window/instance\",\"在新窗口/实例中显示活动文件\"]},\"20\":{\"h\":\"Display\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"F11\",\"Toggle full screen\",\"全屏\",\"Shift + Alt + 0\",\"Toggle editor layout (horizontal/vertical)\",\"切换编辑器布局(水平/垂直)\",\"Ctrl + = / -\",\"Zoom in/out\",\"放大/缩小\",\"Ctrl + B\",\"Toggle Sidebar visibility\",\"切换侧栏可见性\",\"Ctrl + Shift + E\",\"Show Explorer / Toggle focus\",\"显示资源管理器\",\"Ctrl + Shift + F\",\"Show Search\",\"显示搜索栏\",\"Ctrl + Shift + G\",\"Show Source Control\",\"显示源控制\",\"Ctrl + Shift + D\",\"Show Debug\",\"显示 Debug\",\"Ctrl + Shift + X\",\"Show Extensions\",\"显示插件\",\"Ctrl + Shift + H\",\"Replace in files\",\"批量文件替换\",\"Ctrl + Shift + J\",\"Toggle Search details\",\"切换搜索细节\",\"Ctrl + Shift + U\",\"Show Output panel\",\"显示输出面板\",\"Ctrl + Shift + V\",\"Open Markdown preview\",\"打开 Markdown 预览\",\"Ctrl + K V\",\"Open Markdown preview to the side\",\"侧边打开 Markdown 预览\",\"Ctrl + K Z\",\"Zen Mode (Esc Esc to exit)\"]},\"21\":{\"h\":\"Debug\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"F9\",\"Toggle breakpoint\",\"切换断点\",\"F5\",\"Start/Continue\",\"开始\",\"Shift + F5\",\"Stop\",\"停止\",\"F11 / Shift + F11\",\"Step into/out\",\"步入\",\"F10\",\"Step over\",\"跨步\",\"Ctrl+K Ctrl+I\",\"Show hover\",\"显示悬停\"]},\"22\":{\"h\":\"Integrated terminal\",\"t\":[\"快捷键\",\"描述\",\"中文\",\"Ctrl + C\",\"Copy selection\",\"复制到活动终端\",\"Ctrl + V\",\"Paste into active terminal\",\"粘贴到活动终端\",\"Ctrl + ↑ / ↓\",\"Scroll up/down\",\"向上/向下滚动\",\"Shift + PgUp / PgDn\",\"Scroll page up/down\",\"向上/向下滚动页面\",\"Ctrl + Home / End\",\"Scroll to top/bottom\",\"滚动到顶部/底部\",\"Ctrl + `\",\"Show integrated terminal\",\"显示终端\",\"Ctrl + Shift + `\",\"Create new terminal\",\"打开新终端\"]},\"23\":{\"h\":\"插件\"},\"24\":{\"h\":\"Path Intellisense\",\"t\":[\"路径自动补全插件\"]},\"25\":{\"h\":\"更多\"},\"26\":{\"c\":[\"更多\"]},\"27\":{\"h\":\"学习路线图\"},\"28\":{\"h\":\"站点导航\"},\"29\":{\"h\":\"runtime\"},\"30\":{\"h\":\"Airbnb JavaScript 风格指南\"},\"31\":{\"h\":\"Types\"},\"32\":{\"h\":\"1.1 基本类型: 你可以直接获取到基本类型的值\",\"t\":[\"string\",\"number\",\"boolean\",\"null\",\"undefined\",\"symbol\",\"const foo = 1 let bar = foo bar = 9 console.log(foo, bar) // => 1,9 \"]},\"33\":{\"h\":\"1.2 复杂类型: 复杂类型赋值是获取到他的引用的值。 相当于传引用\",\"t\":[\"object\",\"array\",\"function\",\"const foo = [1, 2] const bar = foo bar[0] = 9 console.log(foo[0], bar[0]) // => 9, 9 \"]},\"34\":{\"h\":\"1.3 javascript 判断数据类型方法\",\"t\":[\"typeof\",\"typeof '' // => string typeof 1 // => number typeof true // => boolean typeof Symbol() // => symbol typeof undefined // => undefined typeof null // => object typeof new Function() // => function typeof new Date() // => object typeof [] // => object typeof new RegExp() // => object typeof new Error() // => object typeof document // => object typeof window // => object \",\"引用类型，除了 function 返回 function 类型外，其他都返回 object。但引用类型中的数组、日期、正则都有属于自己的具体类型，而 typeof 对于这些类型的处理，只返回了处于其原型链最顶端的 Object 类型。\",\"toString\",\"Object.prototype.toString.call('') // =>[object String] Object.prototype.toString.call(1) // => [object Number] Object.prototype.toString.call(true) // => [object Boolean] Object.prototype.toString.call(Symbol()) // =>[object Symbol] Object.prototype.toString.call(undefined) // => [object Undefined] Object.prototype.toString.call(null) // => [object Null] Object.prototype.toString.call(new Function()) // => [object Function] Object.prototype.toString.call(new Date()) // => [object Date] Object.prototype.toString.call([]) // => [object Array] Object.prototype.toString.call(new RegExp()) // => [object RegExp] Object.prototype.toString.call(new Error()) // => [object Error] Object.prototype.toString.call(document) // => [object HTMLDocument] Object.prototype.toString.call(window) // =>[object global] window 是全局对象 global 的引用 \",\"toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。\",\"对于 Object 对象，直接调用 toString() 就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。\",\"constructor\",\"''.constructor == String // => true new Number(1).constructor == Number // => true true.constructor == Boolean // => true new Function().constructor == Function // => true new Date().constructor == Date // => true new Error().constructor == Error // => true [].constructor == Array // => true document.constructor == HTMLDocument // => true window.constructor == Window // => true \",\"constructor 是原型 prototype 的一个属性，当函数被定义时候，js 引擎会为函数添加原型 prototype，并且这个 prototype 中 constructor 属性指向函数引用， 因此重写 prototype 会丢失原来的 constructor。 缺点：\",\"null 和 undefined 无 constructor，这种方法判断不了\",\"还有，如果自定义对象，开发者重写 prototype 之后，原有的 constructor 会丢失，因此，为了规范开发，在重写对象原型时一般都需要重新给 constructor 赋值，以保证对象实例的类型不被篡改\",\"instanceof\",\"instanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。 在这里需要特别注意的是：instanceof 检测的是原型\",\"由上图可以看出[]的原型指向 Array.prototype，间接指向 Object.prototype, 因此 [] instanceof Array 返回 true， [] instanceof Object 也返回 true。\",\"instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型\"]},\"35\":{\"h\":\"References\"},\"36\":{\"h\":\"2.1 所有的赋值都用 const，避免使用 . eslint: ,\",\"t\":[\"Why? 因为这个确保你不会改变你的初始值，重复引用会导致 bug 和代码难以理解\",\"// bad var a = 1 var b = 2 // good const a = 1 const b = 2 \"]},\"37\":{\"h\":\"2.2 如果你一定要对参数重新赋值，那就用 ，而不是 . eslint:\",\"t\":[\"Why? 因为 let 是块级作用域，而 var 是函数级作用域\",\"// bad var count = 1 if (true) { count += 1 } // good, use the let. let count = 1 if (true) { count += 1 } \"]},\"38\":{\"h\":\"2.3 注意： 、 都是块级作用域\",\"t\":[\"// const 和 let 都只存在于它定义的那个块级作用域 { let a = 1 const b = 1 } console.log(a) // ReferenceError console.log(b) // ReferenceError \"]},\"39\":{\"h\":\"Objects\"},\"40\":{\"h\":\"3.1 使用字面值创建对象. eslint:\",\"t\":[\"// bad const item = new Object() // good const item = {} \"]},\"41\":{\"h\":\"3.2 当创建一个带有动态属性名的对象时，用计算后属性名\",\"t\":[\"Why? 这可以使你将定义的所有属性放在对象的一个地方.\",\"function getKey(k) { return `a key named ${k}` } // bad const obj = { id: 5, name: 'San Francisco', } obj[getKey('enabled')] = true // good getKey('enabled')是动态属性名 const obj = { id: 5, name: 'San Francisco', [getKey('enabled')]: true, } \"]},\"42\":{\"h\":\"3.3 用对象方法简写. eslint:\",\"t\":[\"// bad const atom = { value: 1, addValue: function (value) { return atom.value + value }, } // good const atom = { value: 1, // 对象的方法 addValue(value) { return atom.value + value }, } \"]},\"43\":{\"h\":\"3.4 用属性值缩写. eslint:\",\"t\":[\"const lukeSkywalker = 'Luke Skywalker' // bad const obj = { lukeSkywalker: lukeSkywalker, } // good const obj = { lukeSkywalker, } \"]},\"44\":{\"h\":\"3.5 将你的所有缩写放在对象声明的开始.\",\"t\":[\"Why? 这样也是为了更方便的知道有哪些属性用了缩写.\",\"const anakinSkywalker = 'Anakin Skywalker' const lukeSkywalker = 'Luke Skywalker' // bad const obj = { episodeOne: 1, twoJediWalkIntoACantina: 2, lukeSkywalker, episodeThree: 3, mayTheFourth: 4, anakinSkywalker, } // good const obj = { lukeSkywalker, anakinSkywalker, episodeOne: 1, twoJediWalkIntoACantina: 2, episodeThree: 3, mayTheFourth: 4, } \"]},\"45\":{\"h\":\"3.6 只对那些无效的标示使用引号 ''. eslint:\",\"t\":[\"Why? 通常我们认为这种方式主观上易读。他优化了代码高亮，并且页更容易被许多 JS 引擎压缩。\",\"// bad const bad = { 'foo': 3, 'bar': 4, 'data-blah': 5, } // good const good = { foo: 3, bar: 4, 'data-blah': 5, } \"]},\"46\":{\"h\":\"3.7 不要直接调用 上的方法，如 , , 。\",\"t\":[\"Why? 在一些有问题的对象上， 这些方法可能会被屏蔽掉 - 如：{ hasOwnProperty: false } - 或这是一个空对象Object.create(null)\",\"// bad console.log(object.hasOwnProperty(key)); // good console.log(Object.prototype.hasOwnProperty.call(object, key)); // best const has = Object.prototype.hasOwnProperty; // 在模块作用内做一次缓存 /* or */ import has from 'has'; // https://www.npmjs.com/package/has // ... console.log(has.call(object, key)); \"]},\"47\":{\"h\":\"3.8 对象浅拷贝时，更推荐使用扩展运算符 ，而不是 。获取对象指定的几个属性时，用对象的rest解构运算符 更好。\",\"t\":[\"// very bad const original = { a: 1, b: 2 }; const copy = Object.assign(original, { c: 3 }); // this mutates `original` ಠ_ಠ delete copy.a; // so does this // bad const original = { a: 1, b: 2 }; const copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 } // good es6扩展运算符 ... const original = { a: 1, b: 2 }; // 浅拷贝 const copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 } // rest 赋值运算符 const { a, ...noA } = copy; // noA => { b: 2, c: 3 } \"]},\"48\":{\"h\":\"Arrays\"},\"49\":{\"h\":\"4.1 用字面量赋值。 eslint:\",\"t\":[\"// bad const items = new Array(); // good const items = []; \"]},\"50\":{\"h\":\"4.2 用 代替直接向数组中添加一个值。\",\"t\":[\"const someStack = []; // bad someStack[someStack.length] = 'abracadabra'; // good someStack.push('abracadabra'); \"]},\"51\":{\"h\":\"4.3 用扩展运算符做数组浅拷贝，类似上面的对象浅拷贝\",\"t\":[\"// bad const len = items.length; const itemsCopy = []; let i; for (i = 0; i < len; i += 1) { itemsCopy[i] = items[i]; } // good const itemsCopy = [...items]; \"]},\"52\":{\"h\":\"4.4 用 运算符而不是Array.from来将一个可迭代的对象转换成数组。\",\"t\":[\"const foo = document.querySelectorAll('.foo'); // good const nodes = Array.from(foo); // best const nodes = [...foo]; \"]},\"53\":{\"h\":\"4.5 用 去将一个类数组对象转成一个数组。\",\"t\":[\"const arrLike = { 0: 'foo', 1: 'bar', 2: 'baz', length: 3 }; // bad const arr = Array.prototype.slice.call(arrLike); // good const arr = Array.from(arrLike); \"]},\"54\":{\"h\":\"4.6 用 而不是 运算符去做map遍历。 因为这样可以避免创建一个临时数组。\",\"t\":[\"// bad const baz = [...foo].map(bar); // good const baz = Array.from(foo, bar); \"]},\"55\":{\"h\":\"4.7 在数组方法的回调函数中使用 语句。 如果函数体由一条返回一个表达式的语句组成， 并且这个表达式没有副作用， 这个时候可以忽略 ，详见 8.2. eslint: 。\",\"t\":[\"// good [1, 2, 3].map((x) => { const y = x + 1; return x * y; }); // good 函数只有一个语句 [1, 2, 3].map(x => x + 1); // bad - 没有返回值， 因为在第一次迭代后acc 就变成undefined了 [[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => { const flatten = acc.concat(item); acc[index] = flatten; }); // good // reduce没有设置初始值，则默认取数组第一个值为初始值 [[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => { const flatten = acc.concat(item); acc[index] = flatten; return flatten; }); // bad inbox.filter((msg) => { const { subject, author } = msg; if (subject === 'Mockingbird') { return author === 'Harper Lee'; } else { return false; } }); // good inbox.filter((msg) => { const { subject, author } = msg; if (subject === 'Mockingbird') { return author === 'Harper Lee'; } return false; }); \"]},\"56\":{\"h\":\"4.8 如果一个数组有很多行，在数组的 [ 后和 ] 前断行。 请看下面示例\",\"t\":[\"// bad const arr = [ [0, 1], [2, 3], [4, 5], ]; const objectInArray = [{ id: 1, }, { id: 2, }]; const numberInArray = [ 1, 2, ]; // good const arr = [[0, 1], [2, 3], [4, 5]]; const objectInArray = [ { id: 1, }, { id: 2, }, ]; const numberInArray = [ 1, 2, ]; \"]},\"57\":{\"h\":\"Destructuring\"},\"58\":{\"h\":\"5.1 用对象的解构赋值来获取和使用对象某个或多个属性值。 eslint:\",\"t\":[\"Why? 解构使您不必为这些属性创建临时引用\",\"// bad function getFullName(user) { const firstName = user.firstName; const lastName = user.lastName; return `${firstName} ${lastName}`; } // good function getFullName(user) { const { firstName, lastName } = user; return `${firstName} ${lastName}`; } // best function getFullName({ firstName, lastName }) { return `${firstName} ${lastName}`; } \"]},\"59\":{\"h\":\"5.2 用数组解构。\",\"t\":[\"const arr = [1, 2, 3, 4]; // bad const first = arr[0]; const second = arr[1]; // good const [first, second] = arr; \"]},\"60\":{\"h\":\"5.3 多个返回值用对象的解构，而不是数组解构。\",\"t\":[\"Why? 你可以在后期添加新的属性或者变换变量的顺序而不会打破原有的调用\",\"// bad function processInput(input) { // 然后就是见证奇迹的时刻 return [left, right, top, bottom]; } // 调用者需要想一想返回值的顺序 const [left, __, top] = processInput(input); // good function processInput(input) { // oops， 奇迹又发生了 return { left, right, top, bottom }; } // 调用者只需要选择他想用的值就好了 const { left, top } = processInput(input); \"]},\"61\":{\"h\":\"Strings\"},\"62\":{\"h\":\"6.1 对 用单引号 '' 。 eslint:\",\"t\":[\"// bad const name = \\\"Capt. Janeway\\\"; // bad - 样例应该包含插入文字或换行 const name = `Capt. Janeway`; // good const name = 'Capt. Janeway'; \"]},\"63\":{\"h\":\"6.2 超过100个字符的字符串不应该用 串联成多行。\",\"t\":[\"Why? 被折断的字符串工作起来是糟糕的而且使得代码更不易被搜索。\",\"// bad const errorMessage = 'This is a super long error that was thrown because \\\\ of Batman. When you stop to think about how Batman had anything to do \\\\ with this, you would get nowhere \\\\ fast.'; // bad const errorMessage = 'This is a super long error that was thrown because ' + 'of Batman. When you stop to think about how Batman had anything to do ' + 'with this, you would get nowhere fast.'; // good const errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'; \"]},\"64\":{\"h\":\"6.3 用字符串模板而不是字符串拼接来组织可编程字符串。 eslint:\",\"t\":[\"Why? 模板字符串更具可读性、语法简洁、字符串插入参数。\",\"// bad function sayHi(name) { return 'How are you, ' + name + '?'; } // bad function sayHi(name) { return ['How are you, ', name, '?'].join(); } // bad function sayHi(name) { return `How are you, ${ name }?`; } // good function sayHi(name) { return `How are you, ${name}?`; } \"]},\"65\":{\"h\":\"6.4 永远不要在字符串中用 ，他就是潘多拉盒子。 eslint:\"},\"66\":{\"h\":\"6.5 不要使用不必要的转义字符。eslint:\",\"t\":[\"Why? 反斜线可读性差，所以他们只在必须使用时才出现哦\",\"// bad const foo = '\\\\'this\\\\' \\\\i\\\\s \\\\\\\"quoted\\\\\\\"'; // good const foo = '\\\\'this\\\\' is \\\"quoted\\\"'; //best const foo = `my name is '${name}'`; \"]},\"67\":{\"h\":\"Functions\"},\"68\":{\"h\":\"7.1 用命名函数表达式而不是函数声明。eslint:\",\"t\":[\"函数表达式： const func = function () {}\",\"函数声明： function func() {}\",\"Why? 函数声明时作用域被提前了，这意味着在一个文件里函数很容易（太容易了）在其定义之前被引用。这样伤害了代码可读性和可维护性。如果你发现一个函数又大又复杂，这个函数妨碍这个文件其他部分的理解性，这可能就是时候把这个函数单独抽成一个模块了。别忘了给表达式显示的命名，不用管这个名字是不是由一个确定的变量推断出来的，这消除了由匿名函数在错误调用栈产生的所有假设，这在现代浏览器和类似babel编译器中很常见 (Discussion)\",\"// bad function foo() { // ... } // bad const foo = function () { // ... }; // good // lexical name distinguished from the variable-referenced invocation(s) // 函数表达式名和声明的函数名是不一样的 const short = function longUniqueMoreDescriptiveLexicalFoo() { // ... }; \"]},\"69\":{\"h\":\"7.2 把立即执行函数包裹在圆括号里。 eslint:\",\"t\":[\"Why? immediately invoked function expression = IIFE Why? 一个立即调用的函数表达式是一个单元 - 把它和他的调用者（圆括号）包裹起来，在括号中可以清晰的地表达这些。 Why? 注意：在模块化世界里，你几乎用不着 IIFE\",\"// immediately-invoked function expression (IIFE) (function () { console.log('Welcome to the Internet. Please follow me.'); }()); \"]},\"70\":{\"h\":\"7.2.1 IIFE\",\"t\":[\"IIFE: Immediately Invoked Function Expression，意为立即调用的函数表达式，也就是说，声明函数的同时立即调用这个函数。\",\"不采用IIFE时的函数声明和函数调用：\",\"function foo(){ var a = 10; console.log(a); } foo(); \",\"IIFE形式的函数调用：\",\"(function foo(){ var a = 10; console.log(a); })(); \",\"函数的声明和IIFE的区别在于，在函数的声明中，我们首先看到的是function关键字，而IIFE我们首先看到的是左边的（。也就是说，使用一对（）将函数的声明括起来，使得JS编译器不再认为这是一个函数声明，而是一个IIFE，即需要立刻执行声明的函数。 两者达到的目的是相同的，都是声明了一个函数foo并且随后调用函数foo。\"]},\"71\":{\"h\":\"7.3 不要在非函数块（ 、 等等）内声明函数。把这个函数分配给一个变量。浏览器会允许你这样做，但浏览器解析方式不同，这是一个坏消息。【详见no-loop-func】 eslint:\"},\"72\":{\"h\":\"7.4 Note: 在ECMA-262中 [块 ] 的定义是： 一系列的语句； 但是函数声明不是一个语句。 函数表达式是一个语句。\",\"t\":[\"// bad if (currentUser) { function test() { console.log('Nope.'); } } // good let test; if (currentUser) { test = () => { console.log('Yup.'); }; } \"]},\"73\":{\"h\":\"7.5 不要用 命名参数。他的优先级高于每个函数作用域自带的 对象， 这会导致函数自带的 值被覆盖\",\"t\":[\"// bad function foo(name, options, arguments) { // ... } // good function foo(name, options, args) { // ... } \"]},\"74\":{\"h\":\"7.6 不要使用 ，用rest语法 代替。 eslint:\",\"t\":[\"Why? ...明确你想用那个参数。而且rest参数是真数组，而不是类似数组的arguments\",\"// bad function concatenateAll() { const args = Array.prototype.slice.call(arguments); return args.join(''); } // good function concatenateAll(...args) { return args.join(''); } \"]},\"75\":{\"h\":\"7.7 用默认参数语法而不是在函数里对参数重新赋值。\",\"t\":[\"// really bad function handleThings(opts) { // 不， 我们不该改arguments // 第二： 如果 opts 的值为 false, 它会被赋值为 {} // 虽然你想这么写， 但是这个会带来一些细微的bug opts = opts || {}; // ... } // still bad function handleThings(opts) { if (opts === void 0) { opts = {}; } // ... } // good function handleThings(opts = {}) { // ... } \"]},\"76\":{\"h\":\"7.8 默认参数避免副作用\",\"t\":[\"Why? 他会令人迷惑不解， 比如下面这个， a到底等于几， 这个需要想一下。\",\"var b = 1; // bad function count(a = b++) { console.log(a); } count(); // 1 count(); // 2 count(3); // 3 count(); // 3 \"]},\"77\":{\"h\":\"7.9 把默认参数赋值放在最后\",\"t\":[\"// bad function handleThings(opts = {}, name) { // ... } // good function handleThings(name, opts = {}) { // ... } \"]},\"78\":{\"h\":\"7.10 不要用函数构造器创建函数。 eslint:\",\"t\":[\"Why? 以这种方式创建函数将类似于字符串 eval()，这会打开漏洞。\",\"// bad var add = new Function('a', 'b', 'return a + b'); // still bad var subtract = Function('a', 'b', 'return a - b'); \"]},\"79\":{\"h\":\"7.11 函数签名部分要有空格。eslint:\",\"t\":[\"Why? 统一性好，而且在你添加/删除一个名字的时候不需要添加/删除空格\",\"// bad const f = function(){}; const g = function (){}; const h = function() {}; // good const x = function () {}; const y = function a() {}; \"]},\"80\":{\"h\":\"7.12 不要改参数. eslint:\",\"t\":[\"Why? 操作参数对象对原始调用者会导致意想不到的副作用。 就是不要改参数的数据结构，保留参数原始值和数据结构。\",\"// bad function f1(obj) { obj.key = 1; }; // good function f2(obj) { const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1; }; \"]},\"81\":{\"h\":\"7.13 不要对参数重新赋值。 eslint:\",\"t\":[\"Why? 参数重新赋值会导致意外行为，尤其是对 arguments。这也会导致优化问题，特别是在V8里\",\"// bad function f1(a) { a = 1; // ... } function f2(a) { if (!a) { a = 1; } // ... } // good function f3(a) { const b = a || 1; // ... } function f4(a = 1) { // ... } \"]},\"82\":{\"h\":\"7.14 用spread操作符...去调用多变的函数更好。 eslint:\",\"t\":[\"Why? 这样更清晰，你不必提供上下文，而且你不能轻易地用apply来组成new\",\"// bad const x = [1, 2, 3, 4, 5]; console.log.apply(console, x); // good const x = [1, 2, 3, 4, 5]; console.log(...x); // bad new (Function.prototype.bind.apply(Date, [null, 2016, 8, 5])); // good new Date(...[2016, 8, 5]); \"]},\"83\":{\"h\":\"7.15 调用或者书写一个包含多个参数的函数应该像这个指南里的其他多行代码写法一样： 每行值包含一个参数，每行逗号结尾。\",\"t\":[\"// bad function foo(bar, baz, quux) { // ... } // good 缩进不要太过分 function foo( bar, baz, quux, ) { // ... } // bad console.log(foo, bar, baz); // good console.log( foo, bar, baz, ); \"]},\"84\":{\"h\":\"Arrow Functions\"},\"85\":{\"h\":\"8.1 当你一定要用函数表达式（在回调函数里）的时候就用箭头表达式吧。 eslint: ,\",\"t\":[\"Why? 他创建了一个this的当前执行上下文的函数的版本，这通常就是你想要的；而且箭头函数是更简洁的语法\",\"Why? 什么时候不用箭头函数： 如果你有一个相当复杂的函数，你可能会把这个逻辑移出到他自己的函数声明里。\",\"// bad [1, 2, 3].map(function (x) { const y = x + 1; return x * y; }); // good [1, 2, 3].map((x) => { const y = x + 1; return x * y; }); \"]},\"86\":{\"h\":\"8.2 如果函数体由一个没有副作用的表达式语句组成，删除大括号和 。否则，继续用大括号和 语句。 eslint: ,\",\"t\":[\"Why? 语法糖，当多个函数链在一起的时候好读\",\"// bad [1, 2, 3].map(number => { const nextNumber = number + 1; `A string containing the ${nextNumber}.`; }); // good [1, 2, 3].map(number => `A string containing the ${number}.`); // good [1, 2, 3].map((number) => { const nextNumber = number + 1; return `A string containing the ${nextNumber}.`; }); // good [1, 2, 3].map((number, index) => ({ [index]: number })); // 表达式有副作用就不要用隐式return function foo(callback) { const val = callback(); if (val === true) { // Do something if callback returns true } } let bool = false; // bad // 这种情况会return bool = true, 不好 foo(() => bool = true); // good foo(() => { bool = true; }); \"]},\"87\":{\"h\":\"8.3 万一表达式涉及多行，把他包裹在圆括号里更可读。\",\"t\":[\"Why? 这样清晰的显示函数的开始和结束\",\"// bad ['get', 'post', 'put'].map(httpMethod => Object.prototype.hasOwnProperty.call( httpMagicObjectWithAVeryLongName, httpMethod ) ); // good ['get', 'post', 'put'].map(httpMethod => ( Object.prototype.hasOwnProperty.call( httpMagicObjectWithAVeryLongName, httpMethod ) )); \"]},\"88\":{\"h\":\"8.4 如果你的函数只有一个参数并且函数体没有大括号，就删除圆括号。否则，参数总是放在圆括号里。 注意： 一直用圆括号也是没问题，只需要配置 “always” option for eslint. eslint:\",\"t\":[\"Why? 这样少一些混乱， 其实没啥语法上的讲究，就保持一个风格。\",\"// bad [1, 2, 3].map((x) => x * x); // good [1, 2, 3].map(x => x * x); // good [1, 2, 3].map(number => ( `A long string with the ${number}. It’s so long that we don’t want it to take up space on the .map line!` )); // bad [1, 2, 3].map(x => { const y = x + 1; return x * y; }); // good [1, 2, 3].map((x) => { const y = x + 1; return x * y; }); \"]},\"89\":{\"h\":\"8.5 避免箭头函数( )和比较操作符（ , ）混淆. eslint:\",\"t\":[\"// bad const itemHeight = (item) => item.height <= 256 ? item.largeSize : item.smallSize; // bad const itemHeight = (item) => item.height >= 256 ? item.largeSize : item.smallSize; // good const itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize); // good const itemHeight = (item) => { const { height, largeSize, smallSize } = item; return height <= 256 ? largeSize : smallSize; }; \"]},\"90\":{\"h\":\"8.6 在隐式 中强制约束函数体的位置， 就写在箭头后面。 eslint:\",\"t\":[\"// bad (foo) => bar; (foo) => (bar); // good (foo) => bar; (foo) => (bar); (foo) => ( bar ) \"]},\"91\":{\"h\":\"Classes & Constructors\"},\"92\":{\"h\":\"9.1 常用class，避免直接操作prototype\",\"t\":[\"Why? class语法更简洁更易理解\",\"// bad function Queue(contents = []) { this.queue = [...contents]; } Queue.prototype.pop = function () { const value = this.queue[0]; this.queue.splice(0, 1); return value; }; // good class Queue { constructor(contents = []) { this.queue = [...contents]; } pop() { const value = this.queue[0]; this.queue.splice(0, 1); return value; } } \"]},\"93\":{\"h\":\"9.2 用extends实现继承\",\"t\":[\"Why? 它是一种内置的方法来继承原型功能而不打破instanceof\",\"// bad const inherits = require('inherits'); function PeekableQueue(contents) { Queue.apply(this, contents); } inherits(PeekableQueue, Queue); PeekableQueue.prototype.peek = function () { return this.queue[0]; } // good class PeekableQueue extends Queue { peek() { return this.queue[0]; } } \"]},\"94\":{\"h\":\"9.3 方法可以返回this来实现方法链\",\"t\":[\"// bad Jedi.prototype.jump = function () { this.jumping = true; return true; }; Jedi.prototype.setHeight = function (height) { this.height = height; }; const luke = new Jedi(); luke.jump(); // => true luke.setHeight(20); // => undefined // good class Jedi { jump() { this.jumping = true; return this; } setHeight(height) { this.height = height; return this; } } const luke = new Jedi(); luke.jump() .setHeight(20); \"]},\"95\":{\"h\":\"9.4 写一个定制的 方法是可以的，只要保证它是可以正常工作且没有副作用的\",\"t\":[\"class Jedi { constructor(options = {}) { this.name = options.name || 'no name'; } getName() { return this.name; } toString() { return `Jedi - ${this.getName()}`; } } \"]},\"96\":{\"h\":\"9.5 如果没有具体说明，类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。 eslint:\",\"t\":[\"// bad class Jedi { constructor() {} getName() { return this.name; } } // bad class Rey extends Jedi { // 这种构造函数是不需要写的 constructor(...args) { super(...args); } } // good class Rey extends Jedi { constructor(...args) { super(...args); this.name = 'Rey'; } } \"]},\"97\":{\"h\":\"9.6 避免重复类成员。 eslint:\",\"t\":[\"Why? 重复类成员会默默的执行最后一个 —— 重复本身也是一个bug\",\"// bad class Foo { bar() { return 1; } bar() { return 2; } } // good class Foo { bar() { return 1; } } // good class Foo { bar() { return 2; } } \"]},\"98\":{\"h\":\"9.7 除非外部库或框架需要使用特定的非静态方法，否则类方法应该使用this或被做成静态方法。 作为一个实例方法应该表明它根据接收者的属性有不同的行为。eslint:\",\"t\":[\"// bad class Foo { bar() { console.log('bar'); } } // good - this 被使用了 class Foo { bar() { console.log(this.bar); } } // good - constructor 不一定要使用this class Foo { constructor() { // ... } } // good - 静态方法不需要使用 this class Foo { static bar() { console.log('bar'); } } \"]},\"99\":{\"h\":\"Modules\"},\"100\":{\"h\":\"10.1 用( ) 模块而不是无标准的模块系统。你可以随时转到你喜欢的模块系统。\",\"t\":[\"Why? 模块化是未来，让我们现在就开启未来吧。\",\"// bad const AirbnbStyleGuide = require('./AirbnbStyleGuide'); module.exports = AirbnbStyleGuide.es6; // ok import AirbnbStyleGuide from './AirbnbStyleGuide'; export default AirbnbStyleGuide.es6; // best import { es6 } from './AirbnbStyleGuide'; export default es6; \"]},\"101\":{\"h\":\"10.2 不要用import通配符， 就是 * 这种方式\",\"t\":[\"Why? 这确保你有单个默认的导出\",\"// bad import * as AirbnbStyleGuide from './AirbnbStyleGuide'; // good import AirbnbStyleGuide from './AirbnbStyleGuide'; \"]},\"102\":{\"h\":\"10.3 不要直接从 中直接\",\"t\":[\"Why? 虽然一行是简洁的，有一个明确的方式进口和一个明确的出口方式来保证一致性。\",\"// bad // filename es6.js export { es6 as default } from './AirbnbStyleGuide'; // good // filename es6.js import { es6 } from './AirbnbStyleGuide'; export default es6; \"]},\"103\":{\"h\":\"10.4 一个路径只 一次。 eslint:\",\"t\":[\"Why? 从同一个路径下import多行会使代码难以维护\",\"// bad import foo from 'foo'; // … some other imports … // import { named1, named2 } from 'foo'; // good import foo, { named1, named2 } from 'foo'; // good import foo, { named1, named2, } from 'foo'; \"]},\"104\":{\"h\":\"10.5 不要导出可变的东西 eslint:\",\"t\":[\"Why? 变化通常都是需要避免，特别是当你要输出可变的绑定。虽然在某些场景下可能需要这种技术，但总的来说应该导出常量。\",\"// bad let foo = 3; export { foo } // good const foo = 3; export { foo } \"]},\"105\":{\"h\":\"10.6 在一个单一导出模块里，用 更好。 eslint:\",\"t\":[\"Why? 鼓励使用更多文件，每个文件只做一件事情并导出，这样可读性和可维护性更好。\",\"// bad export function foo() {} // good export default function foo() {} \"]},\"106\":{\"h\":\"10.7 import 放在其他所有语句之前。 eslint:\",\"t\":[\"Why? 让import放在最前面防止意外行为。\",\"// bad import foo from 'foo'; foo.init(); import bar from 'bar'; // good import foo from 'foo'; import bar from 'bar'; foo.init(); \"]},\"107\":{\"h\":\"10.8 多行 应该缩进，就像多行数组和对象字面量\",\"t\":[\"Why? 花括号与样式指南中每个其他花括号块遵循相同的缩进规则，逗号也是。\",\"// bad import {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path'; // good import { longNameA, longNameB, longNameC, longNameD, longNameE, } from 'path'; \"]},\"108\":{\"h\":\"10.9 在import语句里不允许Webpack loader语法 eslint:\",\"t\":[\"Why? 一旦用Webpack语法在import里会把代码耦合到模块绑定器。最好是在webpack.config.js里写webpack loader语法\",\"// bad import fooSass from 'css!sass!foo.scss'; import barCss from 'style!css!bar.css'; // good import fooSass from 'foo.scss'; import barCss from 'bar.css'; \"]},\"109\":{\"h\":\"Iterators and Generators\"},\"110\":{\"h\":\"11.1 不要用遍历器。用JavaScript高级函数代替for-in、 for-of。 eslint:\",\"t\":[\"Why? 这强调了我们不可变的规则。 处理返回值的纯函数比副作用更容易。\",\"Why?用数组的这些迭代方法：\",\"map()\",\"every()\",\"filter()\",\"find()\",\"findIndex()\",\"reduce()\",\"some()\",\"... ,\",\"用对象的这些方法\",\"Object.keys()\",\"Object.values()\",\"Object.entries()\",\"去产生一个数组， 这样你就能去遍历对象了。\",\"const numbers = [1, 2, 3, 4, 5]; // bad let sum = 0; for (let num of numbers) { sum += num; } sum === 15; // good let sum = 0; numbers.forEach(num => sum += num); sum === 15; // best (use the functional force) const sum = numbers.reduce((total, num) => total + num, 0); sum === 15; // bad const increasedByOne = []; for (let i = 0; i < numbers.length; i++) { increasedByOne.push(numbers[i] + 1); } // good const increasedByOne = []; numbers.forEach(num => increasedByOne.push(num + 1)); // best (keeping it functional) const increasedByOne = numbers.map(num => num + 1); \"]},\"111\":{\"h\":\"11.2 现在不要用generator\",\"t\":[\"Why? 它在es5上支持的不好\"]},\"112\":{\"h\":\"11.3 如果你一定要用，或者你忽略我们的建议, 请确保它们的函数签名空格是得当的。 eslint:\",\"t\":[\"Why? function 和 * 是同一概念关键字 - 不是function的修饰符，function是一个和function不一样的独特结构\",\"// bad function * foo() { // ... } // bad const bar = function * () { // ... } // bad const baz = function *() { // ... } // bad const quux = function*() { // ... } // bad function*foo() { // ... } // bad function *foo() { // ... } // very bad function * foo() { // ... } // very bad const wat = function * () { // ... } // good function* foo() { // ... } // good const foo = function* () { // ... } \"]},\"113\":{\"h\":\"Properties\"},\"114\":{\"h\":\"12.1 访问属性时使用点符号. eslint:\",\"t\":[\"const luke = { jedi: true, age: 28, }; // bad const isJedi = luke['jedi']; // good const isJedi = luke.jedi; \"]},\"115\":{\"h\":\"12.2 当获取的属性是变量时用方括号 取。\",\"t\":[\"const luke = { jedi: true, age: 28, }; function getProp(prop) { return luke[prop]; } const isJedi = getProp('jedi'); \"]},\"116\":{\"h\":\"12.3 做幂运算时用幂操作符 。 eslint: .\",\"t\":[\"// bad const binary = Math.pow(2, 10); // good const binary = 2 ** 10; \"]},\"117\":{\"h\":\"Variables\"},\"118\":{\"h\":\"13.1 用 或 声明变量。不这样做会导致全局变量。 我们想要避免污染全局命名空间。首长这样警告我们。 eslint:\",\"t\":[\"// bad superPower = new SuperPower(); // good const superPower = new SuperPower(); \"]},\"119\":{\"h\":\"13.2 每个变量都用一个 const 或 let 。 eslint:\",\"t\":[\"Why? 这种方式很容易去声明新的变量，你不用去考虑把;调换成,，或者引入一个只有标点的不同的变化。这种做法也可以是你在调试的时候单步每个声明语句，而不是一下跳过所有声明。\",\"// bad const items = getItems(), goSportsTeam = true, dragonball = 'z'; // bad // (compare to above, and try to spot the mistake) const items = getItems(), goSportsTeam = true; dragonball = 'z'; // good const items = getItems(); const goSportsTeam = true; const dragonball = 'z'; \"]},\"120\":{\"h\":\"13.3 const放一起，let放一起\",\"t\":[\"Why? 在你需要分配一个新的变量， 而这个变量依赖之前分配过的变量的时候，这种做法是有帮助的\",\"// bad let i, len, dragonball, items = getItems(), goSportsTeam = true; // bad let i; const items = getItems(); let dragonball; const goSportsTeam = true; let len; // good const goSportsTeam = true; const items = getItems(); let dragonball; let i; let length; \"]},\"121\":{\"h\":\"13.4 在你需要的地方声明变量，但是要放在合理的位置\",\"t\":[\"Why? let 和 const 都是块级作用域而不是函数级作用域\",\"// bad - unnecessary function call function checkName(hasName) { const name = getName(); if (hasName === 'test') { return false; } if (name === 'test') { this.setName(''); return false; } return name; } // good function checkName(hasName) { if (hasName === 'test') { return false; } // 在需要的时候分配 const name = getName(); if (name === 'test') { this.setName(''); return false; } return name; } \"]},\"122\":{\"h\":\"13.5 不要使用链接变量分配。 eslint:\",\"t\":[\"Why? 链接变量分配创建隐式全局变量。\",\"// bad (function example() { // JavaScript 将这一段解释为 // let a = ( b = ( c = 1 ) ); // let 只对变量 a 起作用; 变量 b 和 c 都变成了全局变量 let a = b = c = 1; }()); console.log(a); // undefined console.log(b); // 1 console.log(c); // 1 // good (function example() { let a = 1; let b = a; let c = a; }()); console.log(a); // undefined console.log(b); // undefined console.log(c); // undefined // `const` 也是如此 \"]},\"123\":{\"h\":\"13.6 不要使用一元自增自减运算符（++， --）. eslint:\",\"t\":[\"Why? 根据eslint文档，一元增量和减量语句受到自动分号插入的影响，并且可能会导致应用程序中的值递增或递减的无声错误。 使用num + = 1而不是num ++或num ++语句来表达你的值也是更有表现力的。 禁止一元增量和减量语句还会阻止您无意地预增/预减值，这也会导致程序出现意外行为。\",\" // bad const array = [1, 2, 3]; let num = 1; num++; --num; let sum = 0; let truthyCount = 0; for (let i = 0; i < array.length; i++) { let value = array[i]; sum += value; if (value) { truthyCount++; } } // good const array = [1, 2, 3]; let num = 1; num += 1; num -= 1; const sum = array.reduce((a, b) => a + b, 0); const truthyCount = array.filter(Boolean).length; \"]},\"124\":{\"h\":\"13.7 在赋值的时候避免在 = 前/后换行。 如果你的赋值语句超出 max-len， 那就用小括号把这个值包起来再换行。 eslint: .\",\"t\":[\"Why? 在 = 附近换行容易混淆这个赋值语句。\",\"// bad const foo = superLongLongLongLongLongLongLongLongFunctionName(); // bad const foo = 'superLongLongLongLongLongLongLongLongString'; // good const foo = ( superLongLongLongLongLongLongLongLongFunctionName() ); // good const foo = 'superLongLongLongLongLongLongLongLongString'; \"]},\"125\":{\"h\":\"13.8 不允许有未使用的变量。 eslint:\",\"t\":[\"Why? 一个声明了但未使用的变量更像是由于重构未完成产生的错误。这种在代码中出现的变量会使阅读者迷惑。\",\"// bad var some_unused_var = 42; // 写了没用 var y = 10; y = 5; // 变量改了自己的值，也没有用这个变量 var z = 0; z = z + 1; // 参数定义了但未使用 function getX(x, y) { return x; } // good function getXPlusY(x, y) { return x + y; } var x = 1; var y = a + 2; alert(getXPlusY(x, y)); // 'type' 即使没有使用也可以可以被忽略， 因为这个有一个 rest 取值的属性。 // 这是从对象中抽取一个忽略特殊字段的对象的一种形式 var { type, ...coords } = data; // 'coords' 现在就是一个没有 'type' 属性的 'data' 对象 \"]},\"126\":{\"h\":\"Hoisting\"},\"127\":{\"h\":\"14.1 var声明会被提前到他的作用域的最前面，它分配的值还没有提前。const 和 let被赋予了新的调用概念时效区 —— Temporal Dead Zones (TDZ)。 重要的是要知道为什么 typeof不再安全.\",\"t\":[\"// 我们知道这个不会工作，假设没有定义全局的notDefined function example() { console.log(notDefined); // => throws a ReferenceError } // 在你引用的地方之后声明一个变量，他会正常输出是因为变量作用域上升。 // 注意： declaredButNotAssigned的值没有上升 function example() { console.log(declaredButNotAssigned); // => undefined var declaredButNotAssigned = true; } // 解释器把变量声明提升到作用域最前面， // 可以重写成如下例子， 二者意义相同 function example() { let declaredButNotAssigned; console.log(declaredButNotAssigned); // => undefined declaredButNotAssigned = true; } // 用 const， let就不一样了 function example() { console.log(declaredButNotAssigned); // => throws a ReferenceError console.log(typeof declaredButNotAssigned); // => throws a ReferenceError const declaredButNotAssigned = true; } \"]},\"128\":{\"h\":\"14.2 匿名函数表达式和 情况相同\",\"t\":[\"function example() { console.log(anonymous); // => undefined anonymous(); // => TypeError anonymous is not a function var anonymous = function () { console.log('anonymous function expression'); }; } \"]},\"129\":{\"h\":\"14.3 已命名函数表达式提升他的变量名，不是函数名或函数体\",\"t\":[\"function example() { console.log(named); // => undefined named(); // => TypeError named is not a function superPower(); // => ReferenceError superPower is not defined var named = function superPower() { console.log('Flying'); }; } // 函数名和变量名一样是也如此 function example() { console.log(named); // => undefined named(); // => TypeError named is not a function var named = function named() { console.log('named'); }; } \"]},\"130\":{\"h\":\"14.4 函数声明则提升了函数名和函数体\",\"t\":[\"function example() { superPower(); // => Flying function superPower() { console.log('Flying'); } } \"]},\"131\":{\"h\":\"Comparison Operators & Equality\"},\"132\":{\"h\":\"15.1 用 === 和 !== 而不是 == 和 !=. eslint:\"},\"133\":{\"h\":\"15.2 条件语句如'if'语句使用强制`ToBoolean'抽象方法来评估它们的表达式，并且始终遵循以下简单规则：\",\"t\":[\"Objects 计算成 true\",\"Undefined 计算成 false\",\"Null 计算成 false\",\"Booleans 计算成 the value of the boolean\",\"Numbers\",\"+0, -0, or NaN 计算成 false\",\"其他 true\",\"Strings\",\"'' 计算成 false\",\"其他 true\",\"if ([0] && []) { // true // 数组（即使是空数组）是对象，对象会计算成true } \"]},\"134\":{\"h\":\"15.3 布尔值用缩写，而字符串和数字要明确比较对象\",\"t\":[\"// bad if (isValid === true) { // ... } // good if (isValid) { // ... } // bad if (name) { // ... } // good if (name !== '') { // ... } // bad if (collection.length) { // ... } // good if (collection.length > 0) { // ... } \"]},\"135\":{\"h\":\"15.4 更多信息请见Angus Croll的真理、平等和JavaScript —— Truth Equality and JavaScript\"},\"136\":{\"h\":\"15.5 在 和 分句里用大括号创建一块包含语法声明的区域(e.g. , , , and ). eslint: .\",\"t\":[\"Why? 语法声明在整个switch的代码块里都可见，但是只有当其被分配后才会初始化，他的初始化时当这个case被执行时才产生。 当多个case分句试图定义同一个事情时就出问题了\",\"// bad switch (foo) { case 1: let x = 1; break; case 2: const y = 2; break; case 3: function f() { // ... } break; default: class C {} } // good switch (foo) { case 1: { let x = 1; break; } case 2: { const y = 2; break; } case 3: { function f() { // ... } break; } case 4: bar(); break; default: { class C {} } } \"]},\"137\":{\"h\":\"15.6 三元表达式不应该嵌套，通常是单行表达式。eslint: .\",\"t\":[\"// bad const foo = maybe1 > maybe2 ? \\\"bar\\\" : value1 > value2 ? \\\"baz\\\" : null; // better const maybeNull = value1 > value2 ? 'baz' : null; const foo = maybe1 > maybe2 ? 'bar' : maybeNull; // best const maybeNull = value1 > value2 ? 'baz' : null; const foo = maybe1 > maybe2 ? 'bar' : maybeNull; \"]},\"138\":{\"h\":\"15.7 避免不需要的三元表达式。 eslint: .\",\"t\":[\"// bad const foo = a ? a : b; const bar = c ? true : false; const baz = c ? false : true; // good const foo = a || b; const bar = !!c; const baz = !c; \"]},\"139\":{\"h\":\"15.8 用圆括号来混合这些操作符。 只有当标准的算术运算符(+, -, *, & /)， 并且它们的优先级显而易见时，可以不用圆括号括起来。 eslint:\",\"t\":[\"Why? 这提高了可读性，并且明确了开发者的意图\",\"// bad const foo = a && b < 0 || c > 0 || d + 1 === 0; // bad const bar = a ** b - 5 % d; // bad // 别人会陷入(a || b) && c 的迷惑中 if (a || b && c) { return d; } // good const foo = (a && b < 0) || c > 0 || (d + 1 === 0); // good const bar = (a ** b) - (5 % d); // good if (a || (b && c)) { return d; } // good const bar = a + b / c * d; \"]},\"140\":{\"h\":\"Blocks\"},\"141\":{\"h\":\"16.1 用大括号包裹多行代码块。 eslint:\",\"t\":[\"// bad if (test) return false; // good if (test) return false; // good if (test) { return false; } // bad function foo() { return false; } // good function bar() { return false; } \"]},\"142\":{\"h\":\"16.2 if表达式的else和if的关闭大括号在一行。 eslint:\",\"t\":[\"// bad if (test) { thing1(); thing2(); } else { thing3(); } // good if (test) { thing1(); thing2(); } else { thing3(); } \"]},\"143\":{\"h\":\"16.3 如果 if 语句中总是需要用 return 返回， 那后续的 else 就不需要写了。 if 块中包含 return， 它后面的 else if 块中也包含了 return， 这个时候就可以把 return 分到多个 if 语句块中。 eslint:\",\"t\":[\"// bad function foo() { if (x) { return x; } else { return y; } } // bad function cats() { if (x) { return x; } else if (y) { return y; } } // bad function dogs() { if (x) { return x; } else { if (y) { return y; } } } // good function foo() { if (x) { return x; } return y; } // good function cats() { if (x) { return x; } if (y) { return y; } } // good function dogs(x) { if (x) { if (z) { return y; } } else { return z; } } \"]},\"144\":{\"h\":\"Control Statements\"},\"145\":{\"h\":\"17.1 当你的控制语句(if, while 等)太长或者超过最大长度限制的时候， 把每一个(组)判断条件放在单独一行里。 逻辑操作符放在行首。\",\"t\":[\"Why? 把逻辑操作符放在行首是让操作符的对齐方式和链式函数保持一致。这提高了可读性，也让复杂逻辑更容易看清楚。\",\"// bad if ((foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening()) { thing1(); } // bad if (foo === 123 && bar === 'abc') { thing1(); } // bad if (foo === 123 && bar === 'abc') { thing1(); } // bad if ( foo === 123 && bar === 'abc' ) { thing1(); } // good if ( foo === 123 && bar === 'abc' ) { thing1(); } // good if ( (foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening() ) { thing1(); } // good if (foo === 123 && bar === 'abc') { thing1(); } \"]},\"146\":{\"h\":\"17.2 不要用选择操作符代替控制语句。\",\"t\":[\"// bad !isRunning && startRunning(); // good if (!isRunning) { startRunning(); } \"]},\"147\":{\"h\":\"Comments\"},\"148\":{\"h\":\"18.1 多行注释用\",\"t\":[\"// bad // make() returns a new element // based on the passed in tag name // // @param {String} tag // @return {Element} element function make(tag) { // ... return element; } // good /** * make() returns a new element * based on the passed-in tag name */ function make(tag) { // ... return element; } \"]},\"149\":{\"h\":\"18.2 单行注释用 ，将单行注释放在被注释区域上面。如果注释不是在第一行，那么注释前面就空一行\",\"t\":[\"// bad const active = true; // is current tab // good // is current tab const active = true; // bad function getType() { console.log('fetching type...'); // set the default type to 'no type' const type = this._type || 'no type'; return type; } // good function getType() { console.log('fetching type...'); // set the default type to 'no type' const type = this._type || 'no type'; return type; } // also good function getType() { // set the default type to 'no type' const type = this._type || 'no type'; return type; } \"]},\"150\":{\"h\":\"18.3 所有注释开头空一个，方便阅读。 eslint:\",\"t\":[\"// bad //is current tab const active = true; // good // is current tab const active = true; // bad /** *make() returns a new element *based on the passed-in tag name */ function make(tag) { // ... return element; } // good /** * make() returns a new element * based on the passed-in tag name */ function make(tag) { // ... return element; } \"]},\"151\":{\"h\":\"18.4 在你的注释前使用FIXME'或TODO'前缀， 这有助于其他开发人员快速理解你指出的需要重新访问的问题， 或者您建议需要实现的问题的解决方案。 这些不同于常规注释，因为它们是可操作的。 动作是FIXME： - 需要计算出来或TODO： - 需要实现。\"},\"152\":{\"h\":\"18.5 用 给问题做注释\",\"t\":[\"class Calculator extends Abacus { constructor() { super(); // FIXME: shouldn't use a global here total = 0; } } \"]},\"153\":{\"h\":\"18.6 用 去注释问题的解决方案\",\"t\":[\"class Calculator extends Abacus { constructor() { super(); // TODO: total should be configurable by an options param this.total = 0; } } \"]},\"154\":{\"h\":\"Whitespace\"},\"155\":{\"h\":\"19.1 tab用两个空格. eslint:\",\"t\":[\"// bad function foo() { ∙∙∙∙const name; } // bad function bar() { ∙const name; } // good function baz() { ∙∙const name; } \"]},\"156\":{\"h\":\"19.2 在大括号前空一格。 eslint:\",\"t\":[\"// bad function test(){ console.log('test'); } // good function test() { console.log('test'); } // bad dog.set('attr',{ age: '1 year', breed: 'Bernese Mountain Dog', }); // good dog.set('attr', { age: '1 year', breed: 'Bernese Mountain Dog', }); \"]},\"157\":{\"h\":\"19.3 在控制语句(if, while 等)的圆括号前空一格。在函数调用和定义时，参数列表和函数名之间不空格。 eslint:\",\"t\":[\"// bad if(isJedi) { fight (); } // good if (isJedi) { fight(); } // bad function fight () { console.log ('Swooosh!'); } // good function fight() { console.log('Swooosh!'); } \"]},\"158\":{\"h\":\"19.4 用空格来隔开运算符。 eslint:\",\"t\":[\"// bad const x=y+5; // good const x = y + 5; \"]},\"159\":{\"h\":\"19.5 文件结尾空一行. eslint:\",\"t\":[\"// bad import { es6 } from './AirbnbStyleGuide'; // ... export default es6; \",\"// bad import { es6 } from './AirbnbStyleGuide'; // ... export default es6;↵ ↵ \",\"// good import { es6 } from './AirbnbStyleGuide'; // ... export default es6;↵ \"]},\"160\":{\"h\":\"19.6 当出现长的方法链（>2个）时用缩进。用点开头强调该行是一个方法调用，而不是一个新的语句。eslint:\",\"t\":[\"// bad $('#items').find('.selected').highlight().end().find('.open').updateCount(); // bad $('#items'). find('.selected'). highlight(). end(). find('.open'). updateCount(); // good $('#items') .find('.selected') .highlight() .end() .find('.open') .updateCount(); // bad const leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true) .attr('width', (radius + margin) * 2).append('svg:g') .attr('transform', `translate(${radius + margin},${radius + margin})`) .call(tron.led); // good const leds = stage.selectAll('.led') .data(data) .enter().append('svg:svg') .classed('led', true) .attr('width', (radius + margin) * 2) .append('svg:g') .attr('transform', `translate(${radius + margin},${radius + margin})`) .call(tron.led); // good const leds = stage.selectAll('.led').data(data); \"]},\"161\":{\"h\":\"19.7 在一个代码块后下一条语句前空一行。\",\"t\":[\"// bad if (foo) { return bar; } return baz; // good if (foo) { return bar; } return baz; // bad const obj = { foo() { }, bar() { }, }; return obj; // good const obj = { foo() { }, bar() { }, }; return obj; // bad const arr = [ function foo() { }, function bar() { }, ]; return arr; // good const arr = [ function foo() { }, function bar() { }, ]; return arr; \"]},\"162\":{\"h\":\"19.8 不要用空白行填充块。 eslint:\",\"t\":[\"// bad function bar() { console.log(foo); } // also bad if (baz) { console.log(qux); } else { console.log(foo); } // good function bar() { console.log(foo); } // good if (baz) { console.log(qux); } else { console.log(foo); } \"]},\"163\":{\"h\":\"19.9不要在代码之间使用多个空白行填充。 eslint:\",\"t\":[\"// bad class Person { constructor(fullName, email, birthday) { this.fullName = fullName; this.email = email; this.setAge(birthday); } setAge(birthday) { const today = new Date(); const age = this.getAge(today, birthday); this.age = age; } getAge(today, birthday) { // .. } } // good class Person { constructor(fullName, email, birthday) { this.fullName = fullName; this.email = email; this.setAge(birthday); } setAge(birthday) { const today = new Date(); const age = getAge(today, birthday); this.age = age; } getAge(today, birthday) { // .. } } \"]},\"164\":{\"h\":\"19.10 圆括号里不要加空格。 eslint:\",\"t\":[\"// bad function bar( foo ) { return foo; } // good function bar(foo) { return foo; } // bad if ( foo ) { console.log(foo); } // good if (foo) { console.log(foo); } \"]},\"165\":{\"h\":\"19.11 方括号里不要加空格。看示例。 eslint:\",\"t\":[\"// bad const foo = [ 1, 2, 3 ]; console.log(foo[ 0 ]); // good， 逗号分隔符还是要空格的 const foo = [1, 2, 3]; console.log(foo[0]); \"]},\"166\":{\"h\":\"19.12 花括号里加空格。 eslint:\",\"t\":[\"// bad const foo = {clark: 'kent'}; // good const foo = { clark: 'kent' }; \"]},\"167\":{\"h\":\"19.13 避免一行代码超过100个字符（包含空格）。\",\"t\":[\"注意： 对于上面——strings--line-length，长字符串不受此规则限制，不应分解。 eslint: max-len\",\"Why? 这样确保可读性和可维护性\",\"// bad const foo = jsonData && jsonData.foo && jsonData.foo.bar && jsonData.foo.bar.baz && jsonData.foo.bar.baz.quux && jsonData.foo.bar.baz.quux.xyzzy; // bad $.ajax({ method: 'POST', url: 'https://airbnb.com/', data: { name: 'John' } }).done(() => console.log('Congratulations!')).fail(() => console.log('You have failed this city.')); // good const foo = jsonData && jsonData.foo && jsonData.foo.bar && jsonData.foo.bar.baz && jsonData.foo.bar.baz.quux && jsonData.foo.bar.baz.quux.xyzzy; // good $.ajax({ method: 'POST', url: 'https://airbnb.com/', data: { name: 'John' }, }) .done(() => console.log('Congratulations!')) .fail(() => console.log('You have failed this city.')); \"]},\"168\":{\"h\":\"19.14 作为语句的花括号内也要加空格 —— { 后和 } 前都需要空格。 eslint:\",\"t\":[\"// bad function foo() {return true;} if (foo) { bar = 0;} // good function foo() { return true; } if (foo) { bar = 0; } \"]},\"169\":{\"h\":\"19.15 前不要空格， 后需要空格。 eslint:\",\"t\":[\"// bad var foo = 1,bar = 2; var arr = [1 , 2]; // good var foo = 1, bar = 2; var arr = [1, 2]; \"]},\"170\":{\"h\":\"19.16 计算属性内要空格。参考上述花括号和中括号的规则。 eslint:\",\"t\":[\"// bad obj[foo ] obj[ 'foo'] var x = {[ b ]: a} obj[foo[ bar ]] // good obj[foo] obj['foo'] var x = { [b]: a } obj[foo[bar]] \"]},\"171\":{\"h\":\"19.17 调用函数时，函数名和小括号之间不要空格。 eslint:\",\"t\":[\"// bad func (); func (); // good func(); \"]},\"172\":{\"h\":\"19.18 在对象的字面量属性中， 之间要有空格。 eslint:\",\"t\":[\"// bad var obj = { \\\"foo\\\" : 42 }; var obj2 = { \\\"foo\\\":42 }; // good var obj = { \\\"foo\\\": 42 }; \"]},\"173\":{\"h\":\"19.19 行末不要空格。 eslint:\"},\"174\":{\"h\":\"19.20 避免出现多个空行。 在文件末尾只允许空一行。 eslint:\",\"t\":[\"// bad var x = 1; var y = 2; // good var x = 1; var y = 2; \"]},\"175\":{\"h\":\"Commas\"},\"176\":{\"h\":\"20.1 不要前置逗号。 eslint:\",\"t\":[\"// bad const story = [ once , upon , aTime ]; // good const story = [ once, upon, aTime, ]; // bad const hero = { firstName: 'Ada' , lastName: 'Lovelace' , birthYear: 1815 , superPower: 'computers' }; // good const hero = { firstName: 'Ada', lastName: 'Lovelace', birthYear: 1815, superPower: 'computers', }; \"]},\"177\":{\"h\":\"20.2 额外结尾逗号: 要 eslint:\",\"t\":[\"Why? 这导致git diffs更清洁。 此外，像Babel这样的转换器会删除转换代码中的额外的逗号，这意味着你不必担心旧版浏览器中的结尾逗号问题。\",\"// bad - 没有结尾逗号的 git diff const hero = { firstName: 'Florence', - lastName: 'Nightingale' + lastName: 'Nightingale', + inventorOf: ['coxcomb chart', 'modern nursing'] }; // good - 有结尾逗号的 git diff const hero = { firstName: 'Florence', lastName: 'Nightingale', + inventorOf: ['coxcomb chart', 'modern nursing'], }; \",\"// bad const hero = { firstName: 'Dana', lastName: 'Scully' }; const heroes = [ 'Batman', 'Superman' ]; // good const hero = { firstName: 'Dana', lastName: 'Scully', }; const heroes = [ 'Batman', 'Superman', ]; // bad function createHero( firstName, lastName, inventorOf ) { // does nothing } // good function createHero( firstName, lastName, inventorOf, ) { // does nothing } // good (note that a comma must not appear after a \\\"rest\\\" element) function createHero( firstName, lastName, inventorOf, ...heroArgs ) { // does nothing } // bad createHero( firstName, lastName, inventorOf ); // good createHero( firstName, lastName, inventorOf, ); // good (note that a comma must not appear after a \\\"rest\\\" element) createHero( firstName, lastName, inventorOf, ...heroArgs ) \"]},\"178\":{\"h\":\"Semicolons\"},\"179\":{\"h\":\"21.1 Yup. eslint:\",\"t\":[\"Why? 当 JavaScript 遇到没有分号结尾的一行，它会执行自动插入分号 Automatic Semicolon Insertion这一规则来决定行末是否加分号。如果JavaScript在你的断行里错误的插入了分号，就会出现一些古怪的行为。当新的功能加到JavaScript里后， 这些规则会变得更复杂难懂。显示的结束语句，并通过配置代码检查去捕获没有带分号的地方可以帮助你防止这种错误。\",\"// bad (function () { const name = 'Skywalker' return name })() // good (function () { const name = 'Skywalker'; return name; }()); // good, 行首加分号，避免文件被连接到一起时立即执行函数被当做变量来执行。 ;(() => { const name = 'Skywalker'; return name; }()); \"]},\"180\":{\"h\":\"Type Casting & Coercion\"},\"181\":{\"h\":\"22.1 在语句开始执行强制类型转换。\"},\"182\":{\"h\":\"22.2 Strings: eslint:\",\"t\":[\"// => this.reviewScore = 9; // bad const totalScore = new String(this.reviewScore); // typeof totalScore is \\\"object\\\" not \\\"string\\\" // bad const totalScore = this.reviewScore + ''; // invokes this.reviewScore.valueOf() // bad const totalScore = this.reviewScore.toString(); // 不保证返回string // good const totalScore = String(this.reviewScore); \"]},\"183\":{\"h\":\"22.3 Numbers: 用 做类型转换， 转换string常需要带上基数。 eslint:\",\"t\":[\"const inputValue = '4'; // bad const val = new Number(inputValue); // bad const val = +inputValue; // bad const val = inputValue >> 0; // bad const val = parseInt(inputValue); // good const val = Number(inputValue); // good const val = parseInt(inputValue, 10); \"]},\"184\":{\"h\":\"22.4 请在注释中解释为什么要用移位运算和你在做什么。无论你做什么狂野的事，比如由于 是你的性能瓶颈导致你一定要用移位运算。 请说明这个是因为性能原因,\",\"t\":[\"// good /** * parseInt是代码运行慢的原因 * 用Bitshifting将字符串转成数字使代码运行效率大幅增长 */ const val = inputValue >> 0; \"]},\"185\":{\"h\":\"22.5 注意: 用移位运算要小心. 数字使用64-位表示的，但移位运算常常返回的是32为整形source)。移位运算对大于32位的整数会导致意外行为。Discussion. 最大的32位整数是 2,147,483,647:\",\"t\":[\"2147483647 >> 0 //=> 2147483647 2147483648 >> 0 //=> -2147483648 2147483649 >> 0 //=> -2147483647 \"]},\"186\":{\"h\":\"22.6 布尔:\",\"t\":[\"const age = 0; // bad const hasAge = new Boolean(age); // good const hasAge = Boolean(age); // best const hasAge = !!age; \"]},\"187\":{\"h\":\"Naming Conventions\"},\"188\":{\"h\":\"23.1 避免用一个字母命名，让你的命名可描述。 eslint:\",\"t\":[\"// bad function q() { // ... } // good function query() { // ... } \"]},\"189\":{\"h\":\"23.2 用小驼峰式命名你的对象、函数、实例。 eslint:\",\"t\":[\"// bad const OBJEcttsssss = {}; const this_is_my_object = {}; function c() {} // good const thisIsMyObject = {}; function thisIsMyFunction() {} \"]},\"190\":{\"h\":\"23.3 用大驼峰式命名类。 eslint:\",\"t\":[\"// bad function user(options) { this.name = options.name; } const bad = new user({ name: 'nope', }); // good class User { constructor(options) { this.name = options.name; } } const good = new User({ name: 'yup', }); \"]},\"191\":{\"h\":\"23.4 不要用前置或后置下划线。 eslint:\",\"t\":[\"Why? JavaScript 没有私有属性或私有方法的概念。尽管前置下划线通常的概念上意味着“private”，事实上，这些属性是完全公有的，因此这部分也是你的API的内容。这一概念可能会导致开发者误以为更改这个不会导致崩溃或者不需要测试。 如果你想要什么东西变成“private”，那就不要让它在这里出现。\",\"// bad this.__firstName__ = 'Panda'; this.firstName_ = 'Panda'; this._firstName = 'Panda'; // good this.firstName = 'Panda'; \"]},\"192\":{\"h\":\"23.5 不要保存引用this， 用箭头函数或函数绑定——Function#bind.\",\"t\":[\"// bad function foo() { const self = this; return function () { console.log(self); }; } // bad function foo() { const that = this; return function () { console.log(that); }; } // good function foo() { return () => { console.log(this); }; } \"]},\"193\":{\"h\":\"23.6 export default导出模块A，则这个文件名也叫A.*， import 时候的参数也叫A。 大小写完全一致。\",\"t\":[\"// file 1 contents class CheckBox { // ... } export default CheckBox; // file 2 contents export default function fortyTwo() { return 42; } // file 3 contents export default function insideDirectory() {} // in some other file // bad import CheckBox from './checkBox'; // PascalCase import/export, camelCase filename import FortyTwo from './FortyTwo'; // PascalCase import/filename, camelCase export import InsideDirectory from './InsideDirectory'; // PascalCase import/filename, camelCase export // bad import CheckBox from './check_box'; // PascalCase import/export, snake_case filename import forty_two from './forty_two'; // snake_case import/filename, camelCase export import inside_directory from './inside_directory'; // snake_case import, camelCase export import index from './inside_directory/index'; // requiring the index file explicitly import insideDirectory from './insideDirectory/index'; // requiring the index file explicitly // good import CheckBox from './CheckBox'; // PascalCase export/import/filename import fortyTwo from './fortyTwo'; // camelCase export/import/filename import insideDirectory from './insideDirectory'; // camelCase export/import/directory name/implicit \\\"index\\\" // ^ supports both insideDirectory.js and insideDirectory/index.js \"]},\"194\":{\"h\":\"23.7 当你export-default一个函数时，函数名用小驼峰，文件名需要和函数名一致。\",\"t\":[\"function makeStyleGuide() { // ... } export default makeStyleGuide; \"]},\"195\":{\"h\":\"23.8 当你export一个结构体/类/单例/函数库/对象 时用大驼峰。\",\"t\":[\"const AirbnbStyleGuide = { es6: { } }; export default AirbnbStyleGuide; \"]},\"196\":{\"h\":\"23.9 简称和缩写应该全部大写或全部小写。\",\"t\":[\"Why? 名字都是给人读的，不是为了适应电脑的算法的。\",\"// bad import SmsContainer from './containers/SmsContainer'; // bad const HttpRequests = [ // ... ]; // good import SMSContainer from './containers/SMSContainer'; // good const HTTPRequests = [ // ... ]; // also good const httpRequests = [ // ... ]; // best import TextMessageContainer from './containers/TextMessageContainer'; // best const requests = [ // ... ]; \"]},\"197\":{\"h\":\"23.10 你可以用全大写字母设置静态变量，他需要满足三个条件。\",\"t\":[\"导出变量\",\"是 const 定义的， 保证不能被改变\",\"这个变量是可信的，他的子属性都是不能被改变的\",\"Why? 这是一个附加工具，帮助开发者去辨识一个变量是不是不可变的。\",\"对于所有的 const 变量呢？ —— 这个是不必要的。大写变量不应该在同一个文件里定义并使用， 它只能用来作为导出变量。 赞同！\",\"那导出的对象呢？ —— 大写变量处在export的最高级(e.g. EXPORTED_OBJECT.key) 并且他包含的所有子属性都是不可变的。\",\"// bad const PRIVATE_VARIABLE = 'should not be unnecessarily uppercased within a file'; // bad export const THING_TO_BE_CHANGED = 'should obviously not be uppercased'; // bad export let REASSIGNABLE_VARIABLE = 'do not use let with uppercase variables'; // --- // 允许但不够语义化 export const apiKey = 'SOMEKEY'; // 在大多数情况下更好 export const API_KEY = 'SOMEKEY'; // --- // bad - 不必要的大写键，没有增加任何语义 export const MAPPING = { KEY: 'value' }; // good export const MAPPING = { key: 'value' }; \"]},\"198\":{\"h\":\"Accessors\"},\"199\":{\"h\":\"24.1 不需要使用属性的访问器函数。\"},\"200\":{\"h\":\"24.2 不要使用JavaScript的 ，因为他们会产生副作用，并且难以测试、维护和理解。相反的，你可以用 和 去创造你自己的accessor函数\",\"t\":[\"// bad class Dragon { get age() { // ... } set age(value) { // ... } } // good class Dragon { getAge() { // ... } setAge(value) { // ... } } \"]},\"201\":{\"h\":\"24.3 如果属性/方法是 ， 用 或\",\"t\":[\"// bad if (!dragon.age()) { return false; } // good if (!dragon.hasAge()) { return false; } \"]},\"202\":{\"h\":\"24.4 用 和 函数是可以的，但是要一起用\",\"t\":[\"class Jedi { constructor(options = {}) { const lightsaber = options.lightsaber || 'blue'; this.set('lightsaber', lightsaber); } set(key, val) { this[key] = val; } get(key) { return this[key]; } } \"]},\"203\":{\"h\":\"Events\"},\"204\":{\"h\":\"25.1 通过哈希而不是原始值向事件装载数据时(不论是DOM事件还是像Backbone事件的很多属性)。 这使得后续的贡献者（程序员）向这个事件装载更多的数据时不用去找或者更新每个处理器。例如：\",\"t\":[\"// bad $(this).trigger('listingUpdated', listing.id); // ... $(this).on('listingUpdated', (e, listingID) => { // do something with listingID }); \",\"prefer:\",\"// good $(this).trigger('listingUpdated', { listingID: listing.id }); // ... $(this).on('listingUpdated', (e, data) => { // do something with data.listingID }); \"]},\"205\":{\"h\":\"jQuery对象\"},\"206\":{\"h\":\"26.1 jQuery对象用$变量表示。\",\"t\":[\"// bad const sidebar = $('.sidebar'); // good const $sidebar = $('.sidebar'); // good const $sidebarBtn = $('.sidebar-btn'); \"]},\"207\":{\"h\":\"26.2 暂存jQuery查找\",\"t\":[\"// bad function setSidebar() { $('.sidebar').hide(); // ... $('.sidebar').css({ 'background-color': 'pink' }); } // good function setSidebar() { const $sidebar = $('.sidebar'); $sidebar.hide(); // ... $sidebar.css({ 'background-color': 'pink' }); } \"]},\"208\":{\"h\":\"26.3 DOM查找用层叠式$('.sidebar ul') 或 父节点 > 子节点 $('.sidebar > ul'). jsPerf\"},\"209\":{\"h\":\"26.4 用jQuery对象查询作用域的find方法查询\",\"t\":[\"// bad $('ul', '.sidebar').hide(); // bad $('.sidebar').find('ul').hide(); // good $('.sidebar ul').hide(); // good $('.sidebar > ul').hide(); // good $sidebar.find('ul').hide(); \"]},\"210\":{\"h\":\"ES5 兼容性\"},\"211\":{\"h\":\"27.1 参考Kangax的ES5兼容性列表.\"},\"212\":{\"h\":\"ECMAScript 6+ (ES 2015+) Styles\"},\"213\":{\"h\":\"28.1 这是收集到的各种ES6特性的链接\",\"t\":[\"箭头函数——Arrow Functions\",\"类——Classes\",\"对象缩写——Object Shorthand\",\"对象简写——Object Concise\",\"对象计算属性——Object Computed Properties\",\"模板字符串——Template Strings\",\"解构赋值——Destructuring\",\"默认参数——Default Parameters\",\"Rest\",\"Array Spreads\",\"Let and Const\",\"幂操作符——Exponentiation Operator\",\"迭代器和生成器——Iterators and Generators\",\"模块——Modules\"]},\"214\":{\"h\":\"28.2 不要用TC39 proposals， TC39还没有到 stage 3。\",\"t\":[\"Why? 它还不是最终版, 他可能还有很多变化，或者被撤销。 我们想要用的是 JavaScript， 提议还不是JavaScript。\"]},\"215\":{\"h\":\"Standard Library\",\"t\":[\"标准库中包含一些功能受损但是由于历史原因遗留的工具类\"]},\"216\":{\"h\":\"29.1 用 Number.isNaN 代替全局的 isNaN. eslint:\",\"t\":[\"Why? 全局 isNaN 强制把非数字转成数字， 然后对于任何强转后为 NaN 的变量都返回 true 如果你想用这个功能，就显式的用它。\",\"// bad isNaN('1.2'); // false isNaN('1.2.3'); // true // good Number.isNaN('1.2.3'); // false Number.isNaN(Number('1.2.3')); // true \"]},\"217\":{\"h\":\"29.2 用 Number.isFinite 代替 isFinite. eslint:\",\"t\":[\"Why? 理由同上，会把一个非数字变量强转成数字，然后做判断。\",\"// bad isFinite('2e3'); // true // good Number.isFinite('2e3'); // false Number.isFinite(parseInt('2e3', 10)); // true \"]},\"218\":{\"h\":\"Testing\"},\"219\":{\"h\":\"30.1 Yup.\",\"t\":[\"function foo() { return true; } \"]},\"220\":{\"h\":\"30.2 No, but seriously:\",\"t\":[\"无论用那个测试框架，你都需要写测试。\",\"尽量去写很多小而美的纯函数，减少突变的发生\",\"小心 stub 和 mock —— 这会让你的测试变得脆弱。\",\"在 Airbnb 首选 mocha。 tape 偶尔被用来测试一些小的，独立的模块。\",\"100%测试覆盖率是我们努力的目标，即便实际上很少达到。\",\"每当你修了一个bug， 都要写一个回归测试。 一个bug修复了，没有回归测试，很可能以后会再次出问题。\"]},\"221\":{\"h\":\"JS模块化详解\",\"t\":[\"前端模块化详解(完整版)原文\"]},\"222\":{\"h\":\"一、模块化的理解\"},\"223\":{\"h\":\"1.什么是模块?\",\"t\":[\"将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起\",\"块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信\"]},\"224\":{\"h\":\"2.模块化的进化过程\",\"t\":[\"全局function模式 : 将不同的功能封装成不同的全局函数\",\"编码: 将不同的功能封装成不同的全局函数\",\"问题: 污染全局命名空间, 容易引起命名冲突或数据不安全，而且模块成员之间看不出直接关系\",\"function m1(){ //... } function m2(){ //... } \",\"namespace模式 : 简单对象封装\",\"作用: 减少了全局变量，解决命名冲突\",\"问题: 数据不安全(外部可以直接修改模块内部的数据)\",\"let myModule = { data: 'www.baidu.com', foo() { console.log(`foo() ${this.data}`) }, bar() { console.log(`bar() ${this.data}`) } } myModule.data = 'other data' //能直接修改模块内部的数据 myModule.foo() // foo() other data \",\"这样的写法会暴露所有模块成员，内部状态可以被外部改写。\",\"IIFE模式：匿名函数自调用(闭包)\",\"作用: 数据是私有的, 外部只能通过暴露的方法操作\",\"编码: 将数据和行为封装到一个函数内部, 通过给window添加属性来向外暴露接口\",\"问题: 如果当前这个模块依赖另一个模块怎么办?\",\"// index.html文件 <script type=\\\"text/javascript\\\" src=\\\"module.js\\\"></script> <script type=\\\"text/javascript\\\"> myModule.foo() myModule.bar() console.log(myModule.data) //undefined 不能访问模块内部数据 myModule.data = 'xxxx' //不是修改的模块内部的data myModule.foo() //没有改变 </script> \",\"// module.js文件 (function(window) { let data = 'www.baidu.com' //操作数据的函数 function foo() { //用于暴露有函数 console.log(`foo() ${data}`) } function bar() { //用于暴露有函数 console.log(`bar() ${data}`) otherFun() //内部调用 } function otherFun() { //内部私有的函数 console.log('otherFun()') } //暴露行为 window.myModule = { foo, bar } //ES6写法 })(window) \",\"IIFE模式增强 : 引入依赖\",\"这就是现代模块实现的基石\",\"// module.js文件 (function(window, $) { let data = 'www.baidu.com' //操作数据的函数 function foo() { //用于暴露有函数 console.log(`foo() ${data}`) $('body').css('background', 'red') } function bar() { //用于暴露有函数 console.log(`bar() ${data}`) otherFun() //内部调用 } function otherFun() { //内部私有的函数 console.log('otherFun()') } //暴露行为 window.myModule = { foo, bar } })(window, jQuery) \",\"// index.html文件 <!-- 引入的js必须有一定顺序 --> <script type=\\\"text/javascript\\\" src=\\\"jquery-1.10.1.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module.js\\\"></script> <script type=\\\"text/javascript\\\"> myModule.foo() </script> \",\"上例子通过jquery方法将页面的背景颜色改成红色，所以必须先引入jQuery库，就把这个库当作参数传入。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。\"]},\"225\":{\"h\":\"3. 模块化的好处\",\"t\":[\"避免命名冲突(减少命名空间污染)\",\"更好的分离, 按需加载\",\"更高复用性\",\"高可维护性\"]},\"226\":{\"h\":\"4. 引入多个 后出现出现问题\",\"t\":[\"请求过多\",\"首先我们要依赖多个模块，那样就会发送多个请求，导致请求过多\",\"依赖模糊\",\"我们不知道他们的具体依赖关系是什么，也就是说很容易因为不了解他们之间的依赖关系导致加载先后顺序出错。\",\"难以维护\",\"以上两种原因就导致了很难维护，很可能出现牵一发而动全身的情况导致项目出现严重的问题。 模块化固然有多个好处，然而一个页面需要引入多个js文件，就会出现以上这些问题。而这些问题可以通过模块化规范来解决，下面介绍开发中最流行的commonjs, AMD, ES6, CMD规范。\"]},\"227\":{\"h\":\"二、模块化规范\"},\"228\":{\"h\":\"1. CommonJS\"},\"229\":{\"h\":\"(1) 概述\",\"t\":[\"Node 应用由模块组成，采用 CommonJS 模块规范。每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。在服务器端，模块的加载是运行时同步加载的；在浏览器端，模块需要提前编译打包处理。\"]},\"230\":{\"h\":\"(2) 特点\",\"t\":[\"所有代码都运行在模块作用域，不会污染全局作用域。\",\"模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。\",\"模块加载的顺序，按照其在代码中出现的顺序。\"]},\"231\":{\"h\":\"(3) 基本语法\",\"t\":[\"暴露模块：module.exports = value或exports.xxx = value\",\"引入模块：require(xxx),如果是第三方模块，xxx为模块名；如果是自定义模块，xxx为模块文件路径\",\"此处我们有个疑问：CommonJS暴露的模块到底是什么? CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。\",\"// example.js var x = 5; var addX = function (value) { return value + x; }; module.exports.x = x; module.exports.addX = addX; \",\"上面代码通过module.exports输出变量x和函数addX。\",\"var example = require('./example.js');//如果参数字符串以“./”开头，则表示加载的是一个位于相对路径 console.log(example.x); // 5 console.log(example.addX(1)); // 6 \",\"require命令用于加载模块文件。require命令的基本功能是，读入并执行一个JavaScript文件，然后返回该模块的exports对象。如果没有发现指定模块，会报错。\"]},\"232\":{\"h\":\"(4) 模块的加载机制\",\"t\":[\"CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。这点与ES6模块化有重大差异（下文会介绍），请看下面这个例子：\",\"// lib.js var counter = 3; function incCounter() { counter++; } module.exports = { counter: counter, incCounter: incCounter, }; \",\"上面代码输出内部变量counter和改写这个变量的内部方法incCounter。\",\"// main.js var counter = require('./lib').counter; var incCounter = require('./lib').incCounter; console.log(counter); // 3 incCounter(); console.log(counter); // 3 \",\"上面代码说明，counter输出以后，lib.js模块内部的变化就影响不到counter了。这是因为counter是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。\"]},\"233\":{\"h\":\"(5) 服务器端实现\"},\"234\":{\"h\":\"① 下载安装node.js\"},\"235\":{\"h\":\"② 创建项目结构\",\"t\":[\"注意：用npm init 自动生成package.json时，package name(包名)不能有中文和大写\",\"|-modules |-module1.js |-module2.js |-module3.js |-app.js |-package.json { \\\"name\\\": \\\"commonJS-node\\\", \\\"version\\\": \\\"1.0.0\\\" } \"]},\"236\":{\"h\":\"③ 下载第三方模块\",\"t\":[\"npm install uniq --save // 用于数组去重 \"]},\"237\":{\"h\":\"④ 定义模块代码\",\"t\":[\"//module1.js module.exports = { msg: 'module1', foo() { console.log(this.msg) } } \",\"//module2.js module.exports = function() { console.log('module2') } \",\"//module3.js exports.foo = function() { console.log('foo() module3') } exports.arr = [1, 2, 3, 3, 2] \",\"// app.js文件 // 引入第三方库，应该放置在最前面 let uniq = require('uniq') let module1 = require('./modules/module1') let module2 = require('./modules/module2') let module3 = require('./modules/module3') module1.foo() //module1 module2() //module2 module3.foo() //foo() module3 console.log(uniq(module3.arr)) //[ 1, 2, 3 ] \"]},\"238\":{\"h\":\"⑤ 通过node运行app.js\",\"t\":[\"命令行输入node app.js，运行JS文件\"]},\"239\":{\"h\":\"(6)浏览器端实现(借助Browserify)\"},\"240\":{\"h\":\"① 创建项目结构\",\"t\":[\"|-js |-dist //打包生成文件的目录 |-src //源码所在的目录 |-module1.js |-module2.js |-module3.js |-app.js //应用主源文件 |-index.html //运行于浏览器上 |-package.json { \\\"name\\\": \\\"browserify-test\\\", \\\"version\\\": \\\"1.0.0\\\" } \"]},\"241\":{\"h\":\"② 下载browserify\",\"t\":[\"# 全局 npm install browserify -g # 局部 npm install browserify --save-dev \"]},\"242\":{\"h\":\"③ 定义模块代码(同服务器端)\",\"t\":[\"注意：index.html文件要运行在浏览器上，需要借助browserify将app.js文件打包编译，如果直接在index.html引入app.js就会报错！\"]},\"243\":{\"h\":\"④ 打包处理js\",\"t\":[\"根目录下运行browserify js/src/app.js -o js/dist/bundle.js\"]},\"244\":{\"h\":\"⑤ 页面使用引入\",\"t\":[\"在index.html文件中引入<script type=\\\"text/javascript\\\" src=\\\"js/dist/bundle.js\\\"></script>\"]},\"245\":{\"h\":\"2.AMD\",\"t\":[\"CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。此外AMD规范比CommonJS规范在浏览器端实现要来着早。\"]},\"246\":{\"h\":\"(1)AMD规范基本语法\",\"t\":[\"定义暴露模块:\",\"//定义没有依赖的模块 define(function(){ return 模块 }) \",\"//定义有依赖的模块 define(['module1', 'module2'], function(m1, m2){ return 模块 }) \",\"引入使用模块:\",\"require(['module1', 'module2'], function(m1, m2){ 使用m1/m2 }) \"]},\"247\":{\"h\":\"(2) 使用require.js\",\"t\":[\"RequireJS是一个工具库，主要用于客户端的模块管理。它的模块管理遵守AMD规范，RequireJS的基本思想是，通过define方法，将代码定义为模块；通过require方法，实现代码的模块加载。 接下来介绍AMD规范在浏览器实现的步骤：\"]},\"248\":{\"h\":\"① 下载require.js, 并引入\",\"t\":[\"官网: http://www.requirejs.cn/\",\"github : https://github.com/requirejs/requirejs\",\"然后将require.js导入项目: js/libs/require.js\"]},\"249\":{\"h\":\"② 创建项目结构\",\"t\":[\"|-js |-libs |-require.js |-modules |-alerter.js |-dataService.js |-main.js |-index.html \"]},\"250\":{\"h\":\"③ 定义require.js的模块代码\",\"t\":[\"// dataService.js文件 // 定义没有依赖的模块 define(function() { let msg = 'www.baidu.com' function getMsg() { return msg.toUpperCase() } return { getMsg } // 暴露模块 }) \",\"//alerter.js文件 // 定义有依赖的模块 define(['dataService'], function(dataService) { let name = 'Tom' function showMsg() { alert(dataService.getMsg() + ', ' + name) } // 暴露模块 return { showMsg } }) \",\"// main.js文件 (function() { require.config({ baseUrl: 'js/', //基本路径 出发点在根目录下 paths: { //映射: 模块标识名: 路径 alerter: './modules/alerter', //此处不能写成alerter.js,会报错 dataService: './modules/dataService' } }) require(['alerter'], function(alerter) { alerter.showMsg() }) })() \",\"// index.html文件 <!DOCTYPE html> <html> <head> <title>Modular Demo</title> </head> <body> <!-- 引入require.js并指定js主文件的入口 --> <script data-main=\\\"js/main\\\" src=\\\"js/libs/require.js\\\"></script> </body> </html> \"]},\"251\":{\"h\":\"④ 页面引入require.js模块:\",\"t\":[\"在index.html引入 <script data-main=\\\"js/main\\\" src=\\\"js/libs/require.js\\\"></script>\",\"此外在项目中如何引入第三方库？只需在上面代码的基础稍作修改：\",\"// alerter.js文件 define(['dataService', 'jquery'], function(dataService, $) { let name = 'Tom' function showMsg() { alert(dataService.getMsg() + ', ' + name) } $('body').css('background', 'green') // 暴露模块 return { showMsg } }) \",\"// main.js文件 (function() { require.config({ baseUrl: 'js/', //基本路径 出发点在根目录下 paths: { //自定义模块 alerter: './modules/alerter', //此处不能写成alerter.js,会报错 dataService: './modules/dataService', // 第三方库模块 jquery: './libs/jquery-1.10.1' //注意：写成jQuery会报错 } }) require(['alerter'], function(alerter) { alerter.showMsg() }) })() \",\"上例是在alerter.js文件中引入jQuery第三方库，main.js文件也要有相应的路径配置。\",\"小结：通过两者的比较，可以得出AMD模块定义的方法非常清晰，不会污染全局环境，能够清楚地显示依赖关系。AMD模式可以用于浏览器环境，并且允许非同步加载模块，也可以根据需要动态加载模块。\"]},\"252\":{\"h\":\"3.CMD\",\"t\":[\"CMD规范专门用于浏览器端，模块的加载是异步的，模块使用时才会加载执行。CMD规范整合了CommonJS和AMD规范的特点。在 Sea.js 中，所有 JavaScript 模块都遵循 CMD模块定义规范。\"]},\"253\":{\"h\":\"(1)CMD规范基本语法\",\"t\":[\"定义暴露模块：\",\"//定义没有依赖的模块 define(function(require, exports, module){ exports.xxx = value module.exports = value }) \",\"//定义有依赖的模块 define(function(require, exports, module){ //引入依赖模块(同步) var module2 = require('./module2') //引入依赖模块(异步) require.async('./module3', function (m3) { }) //暴露模块 exports.xxx = value }) \",\"引入使用模块：\",\"define(function (require) { var m1 = require('./module1') var m4 = require('./module4') m1.show() m4.show() }) \"]},\"254\":{\"h\":\"(2) sea.js简单使用教程\"},\"255\":{\"h\":\"① 下载sea.js, 并引入\",\"t\":[\"官网: seajs.org/\",\"github : github.com/seajs/seajs\",\"然后将sea.js导入项目: js/libs/sea.js\"]},\"256\":{\"h\":\"② 创建项目结构\",\"t\":[\"|-js |-libs |-sea.js |-modules |-module1.js |-module2.js |-module3.js |-module4.js |-main.js |-index.html \"]},\"257\":{\"h\":\"③ 定义sea.js的模块代码\",\"t\":[\"// module1.js文件 define(function (require, exports, module) { //内部变量数据 var data = 'atguigu.com' //内部函数 function show() { console.log('module1 show() ' + data) } //向外暴露 exports.show = show }) \",\"// module2.js文件 define(function (require, exports, module) { module.exports = { msg: 'I Will Back' } }) \",\"// module3.js文件 define(function(require, exports, module) { const API_KEY = 'abc123' exports.API_KEY = API_KEY }) \",\"// module4.js文件 define(function (require, exports, module) { //引入依赖模块(同步) var module2 = require('./module2') function show() { console.log('module4 show() ' + module2.msg) } exports.show = show //引入依赖模块(异步) require.async('./module3', function (m3) { console.log('异步引入依赖模块3 ' + m3.API_KEY) }) }) \",\"// main.js文件 define(function (require) { var m1 = require('./module1') var m4 = require('./module4') m1.show() m4.show() }) \"]},\"258\":{\"h\":\"④ 在index.html中引入\",\"t\":[\"<script type=\\\"text/javascript\\\" src=\\\"js/libs/sea.js\\\"></script> <script type=\\\"text/javascript\\\"> seajs.use('./js/modules/main') </script> \"]},\"259\":{\"h\":\"4. ES6模块化\",\"t\":[\"ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。\"]},\"260\":{\"h\":\"(1)ES6模块化语法\",\"t\":[\"export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。\",\"/** 定义模块 math.js **/ var basicNum = 0; var add = function (a, b) { return a + b; }; export { basicNum, add }; \",\"/** 引用模块 **/ import { basicNum, add } from './math'; function test(ele) { ele.textContent = add(99 + basicNum); } \",\"如上例所示，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。\",\"// export-default.js export default function () { console.log('foo'); } \",\"// import-default.js import customName from './export-default'; customName(); // 'foo' \",\"模块默认输出, 其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。\"]},\"261\":{\"h\":\"(2) ES6 模块与 CommonJS 模块的差异\",\"t\":[\"它们有两个重大差异：\"]},\"262\":{\"h\":\"① CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。\"},\"263\":{\"h\":\"② CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。\",\"t\":[\"第二个差异是因为 CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\",\"下面重点解释第一个差异，我们还是举上面那个CommonJS模块的加载机制例子:\",\"// lib.js export let counter = 3; export function incCounter() { counter++; } \",\"// main.js import { counter, incCounter } from './lib'; console.log(counter); // 3 incCounter(); console.log(counter); // 4 \",\"ES6 模块的运行机制与 CommonJS 不一样。ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。\"]},\"264\":{\"h\":\"(3) ES6-Babel-Browserify使用教程\",\"t\":[\"简单来说就一句话：使用Babel将ES6编译为ES5代码，使用Browserify编译打包js。\"]},\"265\":{\"h\":\"① 定义package.json文件\",\"t\":[\"{ \\\"name\\\" : \\\"es6-babel-browserify\\\", \\\"version\\\" : \\\"1.0.0\\\" } \"]},\"266\":{\"h\":\"② 安装babel-cli, babel-preset-es2015和browserify\",\"t\":[\"npm install babel-cli browserify -g\",\"npm install babel-preset-es2015 --save-dev\",\"preset 预设(将es6转换成es5的所有插件打包)\"]},\"267\":{\"h\":\"③ 定义.babelrc文件\",\"t\":[\"{ \\\"presets\\\": [\\\"es2015\\\"] } \"]},\"268\":{\"h\":\"④ 定义模块代码\",\"t\":[\"//module1.js文件 // 分别暴露 export function foo() { console.log('foo() module1') } export function bar() { console.log('bar() module1') } \",\"//module2.js文件 // 统一暴露 function fun1() { console.log('fun1() module2') } function fun2() { console.log('fun2() module2') } export { fun1, fun2 } \",\"//module3.js文件 // 默认暴露 可以暴露任意数据类项，暴露什么数据，接收到就是什么数据 export default () => { console.log('默认暴露') } \",\"// app.js文件 import { foo, bar } from './module1' import { fun1, fun2 } from './module2' import module3 from './module3' foo() bar() fun1() fun2() module3() \"]},\"269\":{\"h\":\"⑤ 编译并在index.html中引入\",\"t\":[\"使用Babel将ES6编译为ES5代码(但包含CommonJS语法): babel js/src -d js/lib\",\"使用Browserify编译js: browserify js/lib/app.js -o js/lib/bundle.js\",\"然后在index.html文件中引入\",\"<script type=\\\"text/javascript\\\" src=\\\"js/lib/bundle.js\\\"></script> \",\"此外第三方库(以jQuery为例)如何引入呢？首先安装依赖npm install jquery --save-dev然后在app.js文件中引入\",\"//app.js文件 import { foo, bar } from './module1' import { fun1, fun2 } from './module2' import module3 from './module3' import $ from 'jquery' foo() bar() fun1() fun2() module3() $('body').css('background', 'green') \"]},\"270\":{\"h\":\"三、总结\",\"t\":[\"CommonJS规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。\",\"AMD规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。\",\"CMD规范与AMD规范很相似，都用于浏览器编程，依赖就近，延迟执行，可以很容易在Node.js中运行。不过，依赖SPM 打包，模块的加载逻辑偏重\",\"ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。\"]},\"271\":{\"h\":\"this指向\"},\"272\":{\"h\":\"1. 定义\",\"t\":[\"this 就是一个对象，this 是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。\"]},\"273\":{\"h\":\"2. this 绑定规则\",\"t\":[\"this绑定主要分为四种：\",\"默认绑定\",\"隐式绑定\",\"显式绑定\",\"new绑定\",\"只要搞清楚这四种绑定规则，我们在一般的项目中以及能够判断出 this 指向哪儿了！\"]},\"274\":{\"h\":\"2.1 默认绑定\",\"t\":[\"我们比较常见的一种函数调用类型就是独立函数的调用，形如foo()等。这个时候的 this 绑定就是采用的默认绑定规则。\",\"代码如下：\",\"var name = '小猪课堂'; function foo(){ console.log(this) // Window{} console.log(this.name) // 小猪课堂 } foo(); // 小猪课堂 \",\"上段代码非常简单，我们在全局作用域中定义了一个变量name，然后我们在函数 foo 中使用this.name，输出的结果就是全局变量name，这说明我们 this 指向了全局作用域，也就是说 this 绑定到了 window 对象上。\",\"函数的这种调用方式就被称为默认绑定，默认绑定规则下的 this 指向全局对象。\",\"我们可以给默认绑定给个定义：\",\"当函数不带用任何修饰进行调用时，此时 this 的绑定就是默认绑定规则，this 指向全局对象。\",\"注意\",\"let变量声明不会绑定在window上面，只有var声明的才会，这是需要注意的。除此之外，严格模式下上段代码的 this 是 undefined，比如下面这段代码：\",\"var name = '小猪课堂'; function foo(){ 'use strict' console.log(this.name) } foo(); // Uncaught TypeError: Cannot read properties of undefined (reading 'name') \",\"从上段代码可以看出，默认绑定规则下，this 绑定到了全局对象，当然这与函数调用位置有关。但是严格模式下，this 的绑定与函数调用位置无关。\"]},\"275\":{\"h\":\"2.2 隐式绑定\",\"t\":[\"前面的默认绑定规则很好理解，因为我们的函数执行上下文就是全局作用域，this 自然而然绑定到了全局对象上。\",\"独立函数的调用我们可以直接看出执行上下文在哪里，但如果不是独立函数调用，比如下面代码。\",\"代码如下：\",\"function foo() { console.log(this.name) // 小猪课堂 } let obj = { name: '小猪课堂', foo: foo } obj.foo(); \",\"上段代码我们在 obj 对象中引用了函数 foo，然后我们使用 obj.foo（函数别名）的方式调用了该函数，此时不是独立函数调用，我们不能使用默认绑定规则。\",\"此时 this 的绑定规则称为隐式绑定规则，因为我们不能直接看出函数的调用位置，它的实际调用位置在 obj 对象里面，调用 foo 时，它的执行上下文对象为 obj 对象，所以 this 将会被绑定到 obj 对象上，所以我们函数中的 this.name 其实就是obj.name。这就是我们的隐式绑定规则。\",\"注意：\",\"如果我们调用函数时有多个引用调用，比如obj1.obj2.foo()。这个时候函数 foo 中的 this 指向哪儿呢？其实不管引用链多长，this 的绑定都由最顶层调用位置确定，即obj1.obj2.foo()的 this 还是绑定带 obj2。\",\"隐式绑定中 this 丢失\",\"在隐式绑定规则中，我们认为谁调用了函数，this 就绑定谁，比如 obj.foo 中 this 就绑定到 obj，但是有一些情况比较特殊，即使采用的隐式绑定规则，但是 this 并没有按照我们的想法去绑定，这就是所谓的隐式绑定 this 丢失，常见于回调函数中。\",\"代码如下：\",\"function foo() { console.log(this.name) // 小猪课堂 } function doFoo(fn) { fn(); // 函数调用位置 } let obj = { name: '张三', foo: foo } let name = '小猪课堂'; doFoo(obj.foo); // 小猪课堂 \",\"上段代码中我们很容易会以为 foo 绑定的 this 是 obj 对象，因为我们使用了 obj.foo 的方式，这种方式就是遵循隐式绑定规则。但是事实上 this 却绑定到了全局对象上去，这是因为我们在 doFoo 函数中调用 fn 时，这里才是函数的实际调用位置，此时是独立函数调用，所以 this 指向了全局对象。\",\"实际项目中我们容易遇到这种问题的场景可能就是定时器了，比如下面的代码：\",\"setTimeout(obj.foo, 100); \",\"这种写法就很容易造成 this 丢失。\"]},\"276\":{\"h\":\"2.3 显式绑定\",\"t\":[\"前面我们已经说了默认绑定和隐式绑定，其中隐式绑定我们通常是以 obj.foo 这种形式来调用函数的，目的就是为了让 foo 的 this 绑定到 obj 对象上。\",\"这个时候，如果我们不想通过 obj.foo 的形式调用函数，我们想要很明确的将函数的 this 绑定在某个对象上。那么可以使用 call、apply 等方法，这就是所谓的显式绑定规则。\",\"代码如下：\",\" function foo() { console.log(this.name) // 小猪课堂 } let obj = { name: '小猪课堂', } foo.call(obj); \",\"上段代码我们利用 call 方法直接将 foo 函数内部的 this 指向了 obj 对象，这就是显式绑定。\",\"虽然显式绑定让我们很清楚的知道了函数中的 this 绑定到了哪个对象上，但是它还是无法结局我们 this 绑定丢失的问题，就比如下面这种写法：\",\"function foo() { console.log(this.name) // 小猪课堂 } function doFoo(fn) { fn(); // 函数调用位置 } let obj = { name: '张三', foo: foo } let name = '小猪课堂'; doFoo.call(obj, obj.foo); // 小猪课堂 \",\"上段代码我们虽然使用 call 来更改 this 绑定，但是最终结果却是没有用的。\",\"虽然显式绑定本身不能解决 this 绑定丢失的问题，但是我们可以通过变通的方式来解决这个问题，也被称作硬绑定。\",\"硬绑定：\",\"function foo() { console.log(this.name) // 小猪课堂 } function doFoo(fn) { fn(); // 函数调用位置 } let obj = { name: '张三', } let bar = function () { foo.call(obj) } let name = '小猪课堂'; doFoo(bar); // 张三 setTimeout(bar, 100); // 张三 \",\"其实思路也比较简单，出现 this 绑定丢失原因无非就是我们传入的回调函数在被执行时，this 绑定规则变为了默认绑定，那么为了解决这个问题，我们不妨在封装一个函数，将 foo 函数的 this 显式绑定到 obj 对象上去即可。\",\"这里提一点，下面写法是错误的：\",\"doFoo(foo.call(obj)); \",\"因为回调函数是在 doFoo 里面执行的，上面的写法相当于 foo 函数立即执行了。\",\"补充：\",\"其实我们的 bind 函数就是一个硬绑定，大家想一想，bind 函数是不是创建一个新的函数，然后将 this 指定，是不是就和我们下面这段代码的效果一样。\",\"let bar = function () { foo.call(obj) } // bind 形式 let bar = foo.bind(obj) \"]},\"277\":{\"h\":\"2.4 new绑定\",\"t\":[\"new 关键词相信大家都知道或者使用过吧，这就是我们将要将的第 4 种 this 绑定，叫做 new 绑定。\",\"想要知道 new 绑定规则，我们就很有必要知道一个当我们 new 一个对象的时候做了什么，或者说 new 关键词会做哪些操作。我们这里简单总结一下，具体的 new 的过程还需要大家自行下来好好学学。\",\"使用 new 来调用函数时，会执行下面操作：\",\"创建一个全新的对象\",\"这个新对象会被执行原型连接\",\"这个新对象会绑定到函数调用的 this\",\"如果函数没有返回其它对象，那么 new 表达式种的函数调用会自动返回这个新对象\",\"我们可以看到 new 的操作中就有 this 的绑定，我们在来看看代码。\",\"代码如下：\",\"function foo(name) { this.name = name; } let bar = new foo('小猪课堂'); console.log(bar.name); // 小猪课堂 \",\"上段代码我们使用 new 关键词调用了 foo 函数，大家注意这不是默认调用规则，这是 new 绑定规则。\"]},\"278\":{\"h\":\"3. 优先级\"},\"279\":{\"h\":\"基于pm2 + Verdaccio 搭建私有npm库\"},\"280\":{\"h\":\"一、安装Verdaccio\"},\"281\":{\"h\":\"：\",\"t\":[\"npm i -g verdaccio \"]},\"282\":{\"h\":\"2. 启动Verdaccio\",\"t\":[\"在终端中输入 verdaccio 命令启动 Verdaccio：\",\"verdaccio \",\"接着 Verdaccio 会在终端中输出提示，输出它的配置文件位置、启动的服务地址等信息，如下：\",\"# 的配置文件位置 info --- config file - /home/uname/.config/verdaccio/config.yaml info --- the \\\"crypt\\\" algorithm is deprecated consider switch to \\\"bcrypt\\\" in the configuration file. Read the documentation for additional details info --- using htpasswd file: /home/uname/.config/verdaccio/htpasswd info --- plugin successfully loaded: verdaccio-htpasswd info --- plugin successfully loaded: verdaccio-audit # 启动的服务地址 warn --- http address - http://localhost:4873/ - verdaccio/5.25.0 \"]},\"283\":{\"h\":\"3. 修改配置\",\"t\":[\"要配置发布包、查看包、删除包相关的权限，可修改packages下的属性:\",\"packages: # 作用域包 '@*/*': # 允许所有人访问 access: $authenticated # 注册用户可访问 publish: $authenticated # 注册用户可访问 unpublish: $authenticated proxy: npmjs '**': # 默认情况下所有用户 (包括未授权用户) 都可以查看和发布任意包 # 你可以指定 用户名/分组名 (取决于你使用什么授权插件，默认的授权插件是内置的 htpasswd) # 访问权限有三个关键词: \\\"$all\\\", \\\"$anonymous\\\", \\\"$authenticated\\\" # $all 表示不限制，任何人可访问； # $anonymous 表示未注册用户可访问； # $authenticated 表示只有注册用户可访问 access: $authenticated # 允许所有注册用户发布/撤销已发布的软件包 # (注意：默认情况下任何人都可以注册) publish: $authenticated unpublish: $authenticated # 如果私有包服务不可用在本地，则会代理请求到'npmjs' proxy: npmjs \",\"禁止任何人都可以通过 npm adduser 命令注册用户, 在auth=>htpasswd添加max_users：\",\"auth: htpasswd: file: ./htpasswd # 最大注册用户数，默认为 \\\"+inf\\\". # 可用通过设置为-1禁止注册 # max_users: 1000 max_users: -1 \",\"完整配置文件如下：\",\"# 存放软件所有软件包的目录 storage: ../storage # 存放所有插件的目录 plugins: ../plugins web: # 网站Title title: Verdaccio # 禁用Gravatar头像 # gravatar: false # 排序方式 asc|desc # sort_packages: asc # 是否启用暗黑模式 # darkMode: true # logo地址 # logo: http://somedomain/somelogo.png # favicon地址 # favicon: http://somedomain/favicon.ico | /path/favicon.ico # i18n翻译配置 # i18n: # 可用列表见：https://github.com/verdaccio/ui/tree/master/i18n/translations # web: en-US auth: htpasswd: file: ./htpasswd # 最大注册用户数，默认为 \\\"+inf\\\". # 可用通过设置为-1禁止注册 # max_users: 1000 max_users: -1 # 上游npm库，这里可用设置为淘宝 uplinks: npmjs: url: https://registry.npmjs.org/ packages: # 作用域包 '@*/*': # 允许所有人访问 access: $authenticated # 注册用户可访问 publish: $authenticated # 注册用户可访问 unpublish: $authenticated proxy: npmjs '**': # 默认情况下所有用户 (包括未授权用户) 都可以查看和发布任意包 # 你可以指定 用户名/分组名 (取决于你使用什么授权插件，默认的授权插件是内置的 htpasswd) # 访问权限有三个关键词: \\\"$all\\\", \\\"$anonymous\\\", \\\"$authenticated\\\" # $all 表示不限制，任何人可访问； # $anonymous 表示未注册用户可访问； # $authenticated 表示只有注册用户可访问 access: $authenticated # 允许所有注册用户发布/撤销已发布的软件包 # (注意：默认情况下任何人都可以注册) publish: $authenticated unpublish: $authenticated # 如果私有包服务不可用在本地，则会代理请求到'npmjs' proxy: npmjs # 您可以指定传入连接的HTTP /1.1服务器保持活动超时（以秒为单位）。 # 值为0会使http服务器的行为类似于8.0.0之前的Node.js版本，后者没有保持活动超时。 # 解决方法：通过给定的配置可以解决以下问题 server: keepAliveTimeout: 60 # 中间件 middlewares: audit: enabled: true # 日志设置 logs: { type: stdout, format: pretty, level: http } # 开放远程访问，允许所有IP listen: - 0.0.0.0:4873 \"]},\"284\":{\"h\":\"二、部署\",\"t\":[\"verdaccio提供了docker和全局包2种方式进行安装。\"]},\"285\":{\"h\":\"1. docker部署\",\"t\":[\"# 拉取verdaccio docker镜像 $ docker pull verdaccio/verdaccio:nightly-master # 查看docker镜像 $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE verdaccio/verdaccio nightly-master 32713721fda5 16 hours ago 580MB # 拷贝下面配置文件到本地~/docker/verdaccio目录 $ cp config.yaml ~/docker/verdaccio # 给~/docker/verdaccio添加读写权限, 不然注册时会报错 Error: internal server error : -/user/org.couchdb.user: xxx chmod 666 ~/docker/verdaccio # 启动docker容器 # -d: 在后台开启docker进程 # --name: 给容器指定一个名称 # --p: 将本机的4873端口映射到docker的4873端口 # --restart=always: 自动重启容器 # -v: 将本地~/docker/verdaccio目录挂载到docker的/verdaccio/conf目录 $ docker run --restart=always -d -v ~/docker/verdaccio:/verdaccio/conf --name verdaccio -p 4873:4873 verdaccio/verdaccio # 查看docker容器 $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 6aac1ea8707a verdaccio/verdaccio \\\"uid_entrypoint /bin…\\\" 2 minutes ago Up 2 minutes 0.0.0.0:4873->4873/tcp, :::4873->4873/tcp verdaccio \",\"这样我们就完成了verdaccio在docker上的部署，其中我们将~/docker/verdaccio这个文件夹挂载到docker的/verdaccio/conf文件夹，verdaccio在启动时会自动寻找/verdaccio/conf/config.yaml文件作为配置。\",\"注意\",\"在虚拟器中运行docker, 如果本地和外部都不能访问verdaccio网页，重启一下docker服务；\"]},\"286\":{\"h\":\"2. pm2部署\",\"t\":[\"pm2的部署相对于docker需要安装node。但是相对的部署起来会更快捷，可以根据自己需要选择。\",\"# 全局安装verdaccio和pm2 npm i -g verdaccio pm2 # 通过pm2启动verdaccio pm2 start verdaccio \",\"注意\",\"要在配置文件里中添加listen: 0.0.0.0:4873 才能开放远程访问，允许所有IP访问\",\"pm2命令：\",\"PM2是一个用于Node.js应用程序的生产过程管理器，具有内置的负载均衡器。 启动并守护任何应用程序： $ pm2 start app.js 停止应用程序：$ pm2 stop app.js 负载平衡4个api.js实例： $ pm2 start api.js -i 4 在生产环境中进行监控： $ pm2 monitor 使pm2在服务器重新启动时自动启动： $ pm2 startup 要查看PM2启动的服务的监听地址和端口: $ pm2 show <app_name> 列出所有正在运行的应用程序及其相关信息: $ pm2 list 要进一步了解，请访问： http://pm2.io/ \"]},\"287\":{\"h\":\"三、管理npm仓库源\",\"t\":[\"# 全局安装nrm $ npm install -g nrm # 添加私有库 $ nrm add verdaccio http://{地址}:4873/ # 查看现有的npm源 $ nrm ls npm ---------- https://registry.npmjs.org/ yarn --------- https://registry.yarnpkg.com/ tencent ------ https://mirrors.cloud.tencent.com/npm/ cnpm --------- https://r.cnpmjs.org/ taobao ------- https://registry.npmmirror.com/ npmMirror ---- https://skimdb.npmjs.com/registry/ * verdaccio ---- http://{地址}:4873/ # 设置npm源 $ nrm use verdaccio \"]},\"288\":{\"h\":\"四、npm包发布\"},\"289\":{\"h\":\"1. 注册\",\"t\":[\"# 注册用户，这里因为方便演示，所以没有关闭注册。Username：用户名 Password：密码 $ npm adduser npm notice Log in on http://{地址}:4873/ Username: yourusername Password: Email: (this IS public) xxxxxx@qq.com Logged in as yourusername on http://{地址}:4873/. \"]},\"290\":{\"h\":\"2. 登录\",\"t\":[\"# 登录用户 $ npm login npm notice Log in on http://{地址}:4873/ Username: yourusername Password: Email: (this IS public) xxxxxx@qq.com Logged in as yourusername on http://{地址}:4873/ # 查看当前登录用户 $ npm who am i yourusername \"]},\"291\":{\"h\":\"3. 发布\",\"t\":[\"# 发布当前包 $ npm publish \",\"注意\",\"运行npm publish时报错：\",\"npm ERR! code E500 npm ERR! 500 Internal Server Error - PUT http://192.168.241.128:4873/vue-test - internal server error \",\"解决方法：\",\"chown -R 10001:65533 ~/docker/verdaccio \"]},\"292\":{\"h\":\"数组方法整理\"},\"293\":{\"h\":\"join()\",\"t\":[\"把数组转换成字符串，然后给他规定个连接字符，默认的是逗号( ，)\",\"var arr = [1,2,3]; console.log(arr.join()); // 1,2,3 console.log(arr.join(\\\"-\\\")); // 1-2-3 console.log(arr); // [1, 2, 3]（原数组不变） \"]},\"294\":{\"h\":\"push()\",\"t\":[\"把里面的内容添加到数组末尾，并返回修改后的长度\",\"var arr = [\\\"Lily\\\",\\\"lucy\\\",\\\"Tom\\\"]; var count = arr.push(\\\"Jack\\\",\\\"Sean\\\"); console.log(count); // 5 console.log(arr); // [\\\"Lily\\\",\\\"lucy\\\",\\\"Tom\\\",\\\"Jack\\\",\\\"Sean\\\"] \"]},\"295\":{\"h\":\"pop()\",\"t\":[\"移除数组最后一项，返回移除的那个值，减少数组的length\",\"var item = arr.pop(); console.log(item); // Sean console.log(arr); // [\\\"Lily\\\", \\\"lucy\\\", \\\"Tom\\\", \\\"Jack\\\"] \"]},\"296\":{\"h\":\"shift()\",\"t\":[\"删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined\",\"var arr = [\\\"Lily\\\",\\\"lucy\\\",\\\"Tom\\\"]; var count = arr.unshift(\\\"Jack\\\",\\\"Sean\\\"); console.log(count); // 5 console.log(arr); //[\\\"Jack\\\", \\\"Sean\\\", \\\"Lily\\\", \\\"lucy\\\", \\\"Tom\\\"] \"]},\"297\":{\"h\":\"unshift()\",\"t\":[\"将参数添加到原数组开头，并返回数组的长度\",\"var item = arr.shift(); console.log(item); // Jack console.log(arr); // [\\\"Sean\\\", \\\"Lily\\\", \\\"lucy\\\", \\\"Tom\\\"] \"]},\"298\":{\"h\":\"sort()\",\"t\":[\"将数组里的项从小到大排序\",\"var arr1 = [\\\"a\\\", \\\"d\\\", \\\"c\\\", \\\"b\\\"]; console.log(arr1.sort()); // [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"] \",\"sort()方法比较的是字符串，没有按照数值的大小对数字进行排序，要实现这一点，就必须使用一个排序函数\",\"function sortNumber(a, b){ return a - b } arr = [13, 24, 51, 3]; console.log(arr.sort()); // [13, 24, 3, 51] console.log(arr.sort(sortNumber)); // [3, 13, 24, 51](数组被改变) \"]},\"299\":{\"h\":\"reverse()\",\"t\":[\"反转数组项的顺序\",\"var arr = [13, 24, 51, 3]; console.log(arr.reverse()); //[3, 51, 24, 13] console.log(arr); //[3, 51, 24, 13](原数组改变) \"]},\"300\":{\"h\":\"concat()\",\"t\":[\"将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本\",\"var arr = [1,3,5,7]; var arrCopy = arr.concat(9,[11,13]); console.log(arrCopy); //[1, 3, 5, 7, 9, 11, 13] console.log(arr); // [1, 3, 5, 7](原数组未被修改) \"]},\"301\":{\"h\":\"slice()\",\"t\":[\"返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项\",\"var arr = [1,3,5,7,9,11]; var arrCopy = arr.slice(1); var arrCopy2 = arr.slice(1,4); var arrCopy3 = arr.slice(1,-2); var arrCopy4 = arr.slice(-4,-1); console.log(arr); //[1, 3, 5, 7, 9, 11](原数组没变) console.log(arrCopy); //[3, 5, 7, 9, 11] console.log(arrCopy2); //[3, 5, 7] console.log(arrCopy3); //[3, 5, 7] console.log(arrCopy4); //[5, 7, 9] \"]},\"302\":{\"h\":\"splice()\",\"t\":[\"删除、插入和替换\",\"删除：指定 2 个参数：要删除的第一项的位置和要删除的项数 arr.splice(1, 3)\",\"插入: 可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项 arr.splice( 2,0,4,6 )\",\"替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等 arr.splice( 2,0,4,6 )\",\"var arr = [1,3,5,7,9,11]; var arrRemoved = arr.splice(0,2); console.log(arr); //[5, 7, 9, 11] console.log(arrRemoved); //[1, 3] var arrRemoved2 = arr.splice(2,0,4,6); console.log(arr); // [5, 7, 4, 6, 9, 11] console.log(arrRemoved2); // [] var arrRemoved3 = arr.splice(1,1,2,4); console.log(arr); // [5, 2, 4, 4, 6, 9, 11] console.log(arrRemoved3); //[7] \"]},\"303\":{\"h\":\"indexOf()\",\"t\":[\"接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找\",\"var arr = [1,3,5,7,7,5,3,1]; console.log(arr.indexOf(5)); //2 \"]},\"304\":{\"h\":\"lastIndexOf()\",\"t\":[\"接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找\",\"var arr = [1,3,5,7,7,5,3,1]; console.log(arr.lastIndexOf(5)); //5 \"]},\"305\":{\"h\":\"forEach()\",\"t\":[\"对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；第对应的数组索引，数组本身\",\"var arr = [1, 2, 3, 4, 5]; arr.forEach(function(x, index, a){ console.log(x + '|' + index + '|' + (a === arr)); }); // 输出为： // 1|0|true // 2|1|true // 3|2|true // 4|3|true // 5|4|true \"]},\"306\":{\"h\":\"map()\",\"t\":[\"指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\",\"var arr = [1, 2, 3, 4, 5]; var arr2 = arr.map(function(item){ return item*item; }); console.log(arr2); //[1, 4, 9, 16, 25] \"]},\"307\":{\"h\":\"filter()\",\"t\":[\"“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组\",\"var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; var arr2 = arr.filter(function(x, index) { return index % 3 === 0 || x >= 8; }); console.log(arr2); //[1, 4, 7, 8, 9, 10] \"]},\"308\":{\"h\":\"every()\",\"t\":[\"“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组\",\"var arr = [1, 2, 3, 4, 5]; var arr2 = arr.every(function(x) { return x < 10; }); console.log(arr2); //true var arr3 = arr.every(function(x) { return x < 3; }); console.log(arr3); // false \"]},\"309\":{\"h\":\"some()\",\"t\":[\"判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true\",\"var arr = [1, 2, 3, 4, 5]; var arr2 = arr.some(function(x) { return x < 3; }); console.log(arr2); //true var arr3 = arr.some(function(x) { return x < 1; }); console.log(arr3); // false \"]},\"310\":{\"h\":\"谷歌开发入门示例\",\"t\":[\"扩展由不同但有凝聚力的组件组成。组件可以包括后台脚本(background scripts)、内容脚本(content scripts)、选项页面(options page)、UI 元素(UI elements)和各种逻辑文件。扩展组件是使用 Web 开发技术创建的：HTML、CSS 和 JavaScript。扩展的组件将取决于其功能，并且可能不需要每个选项。\",\"本教程将构建一个扩展，允许用户更改当前聚焦页面的背景颜色。它将使用许多扩展平台的组件来介绍它们之间的关系。\",\"首先，创建一个新目录来保存扩展的文件。\"]},\"311\":{\"h\":\"创建 manifest\",\"t\":[\"扩展从它们的清单开始。创建一个名为 manifest.json 的文件并包含以下代码。\",\"{ \\\"name\\\": \\\"Getting Started Example\\\", \\\"description\\\": \\\"Build an Extension!\\\", \\\"version\\\": \\\"1.0\\\", \\\"manifest_version\\\": 3 } \",\"保存清单文件的目录可以在当前状态下作为开发人员模式的扩展添加。\",\"通过导航到打开扩展管理页面 chrome://extensions\",\"或者，通过单击扩展菜单按钮并选择菜单底部的管理扩展来打开此页面。\",\"或者，通过单击 Chrome 菜单打开此页面，将鼠标悬停在更多工具上，然后选择扩展程序\",\"通过单击开发人员模式旁边的切换开关启用开发人员模式。\",\"通过单击开发人员模式旁边的切换开关启用开发人员模式。\",\"导入插件\"]},\"312\":{\"h\":\"在清单中注册后台脚本\",\"t\":[\"与许多其他重要组件一样，后台脚本必须在清单中注册。在清单中注册后台脚本告诉扩展要引用哪个文件，以及该文件的行为方式。\",\"{ \\\"name\\\": \\\"Getting Started Example\\\", \\\"description\\\": \\\"Build an Extension!\\\", \\\"version\\\": \\\"1.0\\\", \\\"manifest_version\\\": 3, // 注册后台脚本 \\\"background\\\": { \\\"service_worker\\\": \\\"background.js\\\" } } \",\"Chrome 现在知道该扩展程序包含一个 Service Worker。当您重新加载扩展程序时，Chrome 会扫描指定文件以获取其他说明，例如它需要侦听的重要事件。\"]},\"313\":{\"h\":\"创建文件目录层级\",\"t\":[\"该扩展程序要创建的文件目录层级如下：\",\" ├─ manifest.json ├─ background.js ├─ popup.html ├─ popup.js ├─ button.css ├─ options.html ├─ options.js └─ images ├─ icon-128.png ├─ icon-48.png └─ icon-16.png \"]},\"314\":{\"h\":\"创建后台脚本\",\"t\":[\"一旦安装，此扩展将需要来自持久变量的信息。首先在后台脚本中包含runtime.onInstalled的监听事件。在 onInstalled 侦听器中，扩展将使用storage API 设置一个值。这将允许多个扩展组件访问该值并更新它。在扩展的目录中创建一个名为 background.js 的文件并添加以下代码。\",\"// background.js let color = \\\"#3aa757\\\"; chrome.runtime.onInstalled.addListener(() => { chrome.storage.sync.set({ color }); console.log(\\\"Default background color set to %cgreen\\\", `color: ${color}`); }); \"]},\"315\":{\"h\":\"添加存储权限\",\"t\":[\"大多数 API，包括storage API，必须在清单 manifest.json 中的 permissions 字段下注册，扩展程序才能使用它们。\",\"{ \\\"name\\\": \\\"Getting Started Example\\\", \\\"description\\\": \\\"Build an Extension!\\\", \\\"version\\\": \\\"1.0\\\", \\\"manifest_version\\\": 3, \\\"background\\\": { \\\"service_worker\\\": \\\"background.js\\\" }, // 开启权限 \\\"permissions\\\": [\\\"storage\\\"] } \"]},\"316\":{\"h\":\"检查后台脚本\",\"t\":[\"导航回扩展管理页面，然后单击重新加载链接。一个新字段 Inspect views 可用，带有蓝色链接 service worker。\",\"service worker\",\"点击链接可开启控制台查看后台脚本的控制台日志，“默认背景颜色设置为绿色”。\"]},\"317\":{\"h\":\"引入用户界面\",\"t\":[\"扩展可以有多种形式的user interface；这将使用一个popup。创建一个名为 popup.html 的文件并将其添加到扩展的目录中。此扩展程序使用按钮来更改背景颜色。\",\"<!-- popup.html --> <!DOCTYPE html> <html> <head> <link rel=\\\"stylesheet\\\" href=\\\"button.css\\\" /> </head> <body> <button id=\\\"changeColor\\\"></button> </body> </html> \",\"与后台脚本一样，此文件必须在清单manifest.json中声明，以便 Chrome 在扩展程序的弹出窗口中显示它。为此，请向清单添加一个action对象并将 popup.html 设置为操作的 default_popup。\",\"{ \\\"name\\\": \\\"Getting Started Example\\\", \\\"description\\\": \\\"Build an Extension!\\\", \\\"version\\\": \\\"1.0\\\", \\\"manifest_version\\\": 3, \\\"background\\\": { \\\"service_worker\\\": \\\"background.js\\\" }, \\\"permissions\\\": [\\\"storage\\\"], // 注册页面 \\\"action\\\": { \\\"default_popup\\\": \\\"popup.html\\\" } } \",\"这个弹出窗口的 HTML 引用了一个名为 button.css 的外部 CSS 文件。将另一个文件添加到扩展的目录，适当命名，并添加以下代码。\",\"// button.css button { height: 30px; width: 30px; outline: none; margin: 10px; border: none; border-radius: 2px; } button.current { box-shadow: 0 0 0 2px white, 0 0 0 4px black; } \",\"工具栏图标的名称也包含在 default_icons 字段中的 action 下。在此处下载图像文件夹，解压缩，并将其放置在扩展程序的目录中。更新清单manifest.json，以便扩展程序知道如何使用图像。\",\"{ \\\"name\\\": \\\"Getting Started Example\\\", \\\"description\\\": \\\"Build an Extension!\\\", \\\"version\\\": \\\"1.0\\\", \\\"manifest_version\\\": 3, \\\"background\\\": { \\\"service_worker\\\": \\\"background.js\\\" }, \\\"permissions\\\": [\\\"storage\\\"], \\\"action\\\": { \\\"default_popup\\\": \\\"popup.html\\\", // 工具栏图标 \\\"default_icon\\\": { \\\"16\\\": \\\"/images/get_started16.png\\\", \\\"32\\\": \\\"/images/get_started32.png\\\", \\\"48\\\": \\\"/images/get_started48.png\\\", \\\"128\\\": \\\"/images/get_started128.png\\\" } } } \",\"扩展程序还会在扩展程序管理页面、权限警告和图标上显示图像。这些图像在清单manifest.json中的 icons 下指定。\",\"{ \\\"name\\\": \\\"Getting Started Example\\\", \\\"description\\\": \\\"Build an Extension!\\\", \\\"version\\\": \\\"1.0\\\", \\\"manifest_version\\\": 3, \\\"background\\\": { \\\"service_worker\\\": \\\"background.js\\\" }, \\\"permissions\\\": [\\\"storage\\\"], \\\"action\\\": { \\\"default_popup\\\": \\\"popup.html\\\", \\\"default_icon\\\": { \\\"16\\\": \\\"/images/get_started16.png\\\", \\\"32\\\": \\\"/images/get_started32.png\\\", \\\"48\\\": \\\"/images/get_started48.png\\\", \\\"128\\\": \\\"/images/get_started128.png\\\" } }, \\\"icons\\\": { \\\"16\\\": \\\"/images/get_started16.png\\\", \\\"32\\\": \\\"/images/get_started32.png\\\", \\\"48\\\": \\\"/images/get_started48.png\\\", \\\"128\\\": \\\"/images/get_started128.png\\\" } } \",\"默认情况下，扩展出现在扩展菜单（拼图）中。固定扩展程序将在工具栏中显示图标。\",\"service worker\",\"如果在此阶段重新加载扩展程序，它将包含提供的图标而不是默认占位符，单击该操作将打开一个弹出窗口，其中显示一个显示默认颜色的按钮。\",\"service worker\",\"弹出 UI 的最后一步是为按钮添加颜色。使用以下代码创建一个名为 popup.js 的文件并将其添加到扩展的目录中。\",\"// Initialize button with user's preferred color let changeColor = document.getElementById(\\\"changeColor\\\"); chrome.storage.sync.get(\\\"color\\\", ({ color }) => { changeColor.style.backgroundColor = color; }); \",\"此代码从 popup.html 中获取按钮并从存储中请求颜色值。然后将颜色应用为按钮的背景。在 popup.html中为 popup.js包含一个脚本标记。\",\"<!DOCTYPE html> <html> <head> <link rel=\\\"stylesheet\\\" href=\\\"button.css\\\" /> </head> <body> <button id=\\\"changeColor\\\"></button> <script src=\\\"popup.js\\\"></script> </body> </html> \",\"重新加载扩展程序以查看绿色按钮。\"]},\"318\":{\"h\":\"层逻辑\",\"t\":[\"该扩展现在有一个自定义图标和一个弹出窗口，它根据保存到扩展存储中的值为弹出按钮着色。接下来，它需要用于进一步用户交互的逻辑。通过将以下内容添加到文件末尾来更新 popup.js。\",\"// 单击按钮时，将 setPageBackgroundColor 注入当前页面 changeColor.addEventListener(\\\"click\\\", async () => { let [tab] = await chrome.tabs.query({ active: true, currentWindow: true }); chrome.scripting.executeScript({ target: { tabId: tab.id }, function: setPageBackgroundColor, }); }); // 此函数的主体将作为内容脚本执行 // 当前页面 function setPageBackgroundColor() { chrome.storage.sync.get(\\\"color\\\", ({ color }) => { document.body.style.backgroundColor = color; }); } \",\"更新后的代码向按钮添加了一个单击事件侦听器，这会触发以编程方式注入的内容脚本。这将使页面的背景颜色与按钮的颜色相同。这会将页面的背景颜色变为与按钮相同的颜色。使用编程注入允许用户调用内容脚本，而不是自动将不需要的代码插入网页。\",\"清单manifest.json将需要 activeTab 权限以允许扩展临时访问当前页面，以及 scripting 权限以使用脚本 API 的 executeScript 方法。\",\"{ \\\"name\\\": \\\"Getting Started Example\\\", ... \\\"permissions\\\": [\\\"storage\\\", \\\"activeTab\\\", \\\"scripting\\\"], ... } \",\"该扩展现在功能齐全！重新加载扩展程序，刷新此页面，打开弹出窗口并单击按钮将其变为绿色！但是，某些用户可能希望将背景更改为不同的颜色。\",\"注意\",\"扩展程序无法在 Chrome 内部页面上注入内容脚本，例如“chrome://extensions”。请务必在真实网页上试用该扩展程序，例如http://www.yilijishu.info/。\"]},\"319\":{\"h\":\"给用户 options\",\"t\":[\"该扩展程序目前仅允许用户将背景更改为绿色。包含选项页面可以让用户更好地控制扩展程序的功能，进一步自定义他们的浏览体验。\",\"首先在名为 options.html 的目录中创建一个文件并包含以下代码。\",\"<!-- options.html --> <!DOCTYPE html> <html> <head> <link rel=\\\"stylesheet\\\" href=\\\"button.css\\\" /> </head> <body> <div id=\\\"buttonDiv\\\"></div> <div> <p>Choose a different background color!</p> </div> </body> <script src=\\\"options.js\\\"></script> </html> \",\"然后在清单manifest.json中注册选项页面，\",\"{ \\\"name\\\": \\\"Getting Started Example\\\", ... \\\"options_page\\\": \\\"options.html\\\" } \",\"重新加载扩展并右键单击工具栏中的扩展图标，然后选择选项。或者，单击详细信息并向下滚动详细信息页面并选择扩展选项。\",\"options\",\"最后一步是添加选项逻辑。使用以下代码在扩展的目录中创建一个名为 options.js 的文件。\",\"let page = document.getElementById(\\\"buttonDiv\\\"); let selectedClassName = \\\"current\\\"; const presetButtonColors = [\\\"#3aa757\\\", \\\"#e8453c\\\", \\\"#f9bb2d\\\", \\\"#4688f1\\\"]; // 通过标记所选按钮并保存对按钮单击做出反应 // 选择 function handleButtonClick(event) { // 从先前选择的颜色中删除样式 let current = event.target.parentElement.querySelector( `.${selectedClassName}` ); if (current && current !== event.target) { current.classList.remove(selectedClassName); } // 将按钮标记为选中 let color = event.target.dataset.color; event.target.classList.add(selectedClassName); chrome.storage.sync.set({ color }); } // 为每种提供的颜色向页面添加一个按钮 function constructOptions(buttonColors) { chrome.storage.sync.get(\\\"color\\\", (data) => { let currentColor = data.color; // 对于我们提供的每种颜色...... for (let buttonColor of buttonColors) { // ...创建一个具有该颜色的按钮... let button = document.createElement(\\\"button\\\"); button.dataset.color = buttonColor; button.style.backgroundColor = buttonColor; // …标记当前选择的颜色… if (buttonColor === currentColor) { button.classList.add(selectedClassName); } // ..并为单击该按钮时注册一个侦听器 button.addEventListener(\\\"click\\\", handleButtonClick); page.appendChild(button); } }); } // Initialize the page by constructing the color options constructOptions(presetButtonColors); \",\"提供四种颜色选项，然后在带有 onclick 事件侦听器的选项页面上生成按钮。当用户单击按钮时，它会更新扩展程序存储中的颜色值。由于所有扩展的文件都从该存储中提取颜色信息，因此不需要更新其他值。\"]},\"320\":{\"h\":\"配置文件说明\",\"t\":[\"{ // 清单文件的版本，这个必须写，而且必须是2或3(依浏览器版本而定) \\\"manifest_version\\\": 2, // 插件的名称 \\\"name\\\": \\\"hello-world-plugin\\\", // 插件的版本 \\\"version\\\": \\\"1.0.0\\\", // 插件描述 \\\"description\\\": \\\"简单的Chrome扩展demo\\\", // 图标，一般偷懒全部用一个尺寸的也没问题 \\\"icons\\\": { \\\"16\\\": \\\"img/icon.png\\\", \\\"48\\\": \\\"img/icon.png\\\", \\\"128\\\": \\\"img/icon.png\\\" }, // 会一直常驻的后台JS或后台页面 \\\"background\\\": { // 2种指定方式，如果指定JS，那么会自动生成一个背景页 \\\"page\\\": \\\"background.html\\\" //\\\"scripts\\\": [\\\"js/background.js\\\"] }, // 浏览器右上角图标设置，browser_action、page_action、app必须三选一 \\\"browser_action\\\": { \\\"default_icon\\\": \\\"img/icon.png\\\", // 图标悬停时的标题，可选 \\\"default_title\\\": \\\"hello-world-plugin\\\", \\\"default_popup\\\": \\\"popup.html\\\" }, // 当某些特定页面打开才显示的图标 /*\\\"page_action\\\": { \\\"default_icon\\\": \\\"img/icon.png\\\", \\\"default_title\\\": \\\"我是pageAction\\\", \\\"default_popup\\\": \\\"popup.html\\\" },*/ // 需要直接注入页面的JS \\\"content_scripts\\\": [ { //\\\"matches\\\": [\\\"http://*/*\\\", \\\"https://*/*\\\"], // \\\"<all_urls>\\\" 表示匹配所有地址 \\\"matches\\\": [\\\"<all_urls>\\\"], // 多个JS按顺序注入 \\\"js\\\": [\\\"js/jquery-1.8.3.js\\\", \\\"js/content-script.js\\\"], // JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式 \\\"css\\\": [\\\"css/custom.css\\\"], // 代码注入的时间，可选值： \\\"document_start\\\", \\\"document_end\\\", or \\\"document_idle\\\"，最后一个表示页面空闲时，默认document_idle \\\"run_at\\\": \\\"document_start\\\" }, // 这里仅仅是为了演示content-script可以配置多个规则 { \\\"matches\\\": [\\\"*://*/*.png\\\", \\\"*://*/*.jpg\\\", \\\"*://*/*.gif\\\", \\\"*://*/*.bmp\\\"], \\\"js\\\": [\\\"js/show-image-content-size.js\\\"] } ], // 权限申请 \\\"permissions\\\": [ \\\"contextMenus\\\", // 右键菜单 \\\"tabs\\\", // 标签 \\\"notifications\\\", // 通知 \\\"webRequest\\\", // web请求 \\\"webRequestBlocking\\\", \\\"storage\\\", // 插件本地存储 \\\"http://*/*\\\", // 可以通过executeScript或者insertCSS访问的网站 \\\"https://*/*\\\" // 可以通过executeScript或者insertCSS访问的网站 ], // 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的 \\\"web_accessible_resources\\\": [\\\"js/inject.js\\\"], // 插件主页，这个很重要，不要浪费了这个免费广告位 \\\"homepage_url\\\": \\\"https://www.baidu.com\\\", // 覆盖浏览器默认页面 \\\"chrome_url_overrides\\\": { // 覆盖浏览器默认的新标签页 \\\"newtab\\\": \\\"newtab.html\\\" }, // Chrome40以前的插件配置页写法 \\\"options_page\\\": \\\"options.html\\\", // Chrome40以后的插件配置页写法，如果2个都写，新版Chrome只认后面这一个 \\\"options_ui\\\": { \\\"page\\\": \\\"options.html\\\", // 添加一些默认的样式，推荐使用 \\\"chrome_style\\\": true }, // 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字 \\\"omnibox\\\": { \\\"keyword\\\": \\\"go\\\" }, // 默认语言 \\\"default_locale\\\": \\\"zh_CN\\\", // devtools页面入口，注意只能指向一个HTML文件，不能是JS文件 \\\"devtools_page\\\": \\\"devtools.html\\\" } \"]},\"321\":{\"h\":\"前言\",\"t\":[\"JavaScript 设计模式核心原理与应用实践笔记。\"]},\"322\":{\"h\":\"设计原则\",\"t\":[\"设计原则是设计模式的指导理论，它可以帮助我们规避不良的软件设计。SOLID 指代的五个基本原则分别是：\",\"单一功能原则（Single Responsibility Principle）\",\"开放封闭原则（Opened Closed Principle）\",\"里式替换原则（Liskov Substitution Principle）\",\"接口隔离原则（Interface Segregation Principle）\",\"依赖反转原则（Dependency Inversion Principle）\"]},\"323\":{\"h\":\"单一功能原则\",\"t\":[\"定义：该原则是面向对象设计的基本原则之一，由Robert C. Martin在其著作《敏捷软件开发：原则、模式和实践》中提出。\",\"核心思想：一个类或模块应该有且只有一个职责，即一个类应该只负责一项任务或功能。\",\"原因：通过限制类的职责范围，可以降低类的复杂性，提高代码的可读性和可维护性。\",\"好处\",\"降低耦合：当类的职责单一时，类与类之间的依赖关系更简单，修改一个类时对其他类的影响减小。\",\"增强可测试性：单一职责的类更容易编写单元测试，因为它们的行为更专注，边界更清晰。\",\"提高可扩展性：如果需要添加新功能，可以创建新的类而不是修改已有的类，避免破坏原有的代码结构。\",\"减少变更风险：当需求变化时，只需要改动相关联的单一职责类，降低了出错的可能性。\",\"应用：在实际编程中，这意味着应避免在类中混合不同的业务逻辑，如将数据访问、业务规则和用户界面逻辑放在同一个类中。\",\"重构技巧：识别职责并进行分离，创建专门的类或模块来处理每个职责，确保每个组件都有明确的边界。\",\"遵循单一职责原则有助于创建更加灵活、可复用和易于理解的代码库。\"]},\"324\":{\"h\":\"开放封闭原则\",\"t\":[\"定义：开放封闭原则是面向对象设计的另一基本原则，同样出自Robert C. Martin的著作。它指出软件实体（类、模块、函数等）应该对扩展开放，对修改封闭。\",\"核心思想：对扩展开放：软件设计应允许通过增加新代码来应对变化，以提供新的行为或功能，而不需要修改现有的、经过验证的代码。 对修改封闭：一旦软件组件被测试并发布，就不应该再因为新增功能而对其进行修改，以防止引入错误或破坏现有功能。\",\"目的：\",\"提高灵活性：使得系统能够容易地适应需求变化，增加新的功能而不影响已有代码的稳定性。\",\"减少风险：修改现有代码可能引入错误，遵守OCP可以最小化这种风险。\",\"促进复用：设计为可扩展的组件更易于在不同上下文中复用。\",\"实现策略：\",\"抽象与接口：使用抽象类或接口定义一个稳定的合同，具体实现可以根据需求变化而变化，不改变接口定义。\",\"继承与多态：通过继承实现具体功能的多样化，同时利用多态确保新功能可以在不修改原有代码的情况下插入系统。\",\"依赖倒置：高层模块不应依赖于低层模块，两者都应依赖于抽象；抽象不应该依赖于细节，细节应该依赖于抽象。这有助于实现OCP。\",\"案例：假设有一个支付系统，最初只支持信用卡支付。遵循OCP，可以设计一个PaymentMethod接口，初始实现为CreditCardPayment类。当需要添加支付宝支付功能时，只需创建一个新的AlipayPayment类实现PaymentMethod接口，无需修改原有的信用卡支付代码。\",\"开放封闭原则鼓励设计者在面对需求变化时，优先考虑通过扩展而非修改现有代码来满足新需求，从而提升软件的长期可维护性和灵活性。\"]},\"325\":{\"h\":\"里式替换原则\",\"t\":[\"定义：由芭芭拉·利斯科夫（Barbara Liskov）提出，是面向对象设计的五大原则之一。LSP表明，在面向对象设计中，子类型（subtype）必须能够替换其基类型（supertype）而不影响程序的正确性。\",\"核心思想：\",\"子类型兼容：子类应当能够替换其父类并在不改变程序正确性的前提下工作。换句话说，使用基类的地方，可以无缝地使用子类实例而无需了解这种替换。\",\"行为一致性：子类不仅需要保持父类的行为约定，还不能减少父类已经承诺的职责，即子类不能去掉父类已经实现的方法或者改变这些方法的预期行为。\",\"目的与好处：\",\"增强代码健壮性：确保子类不会破坏父类在系统中的使用，增强了系统的稳定性和可靠性。\",\"提高可维护性：允许在不修改现有客户端代码的情况下引入新的子类，简化了维护和升级过程。\",\"促进设计灵活性：鼓励设计更为抽象的基类和符合契约的子类，便于未来的扩展和修改。\",\"应用指南：\",\"设计时考虑契约：明确父类接口所表达的契约（前置条件、后置条件和不变量），子类必须遵守这些契约。\",\"避免过度特定化：子类应谨慎添加新行为，确保新行为不会违背基类的设计意图。\",\"利用多态而非类型检查：利用抽象和多态机制，而不是显式的类型检查，来决定对象的行为。\",\"违反后果：如果子类没有正确实现LSP，可能会导致运行时错误，比如原本在父类中正常工作的代码，在使用子类时出现问题，这会降低代码的可预测性和稳定性。\",\"里式替换原则是实现面向对象设计中“开闭原则”的重要手段，它强调了在继承结构中保持行为一致性和兼容性的重要性，是确保软件模块间松耦合、高内聚的关键原则之一。\"]},\"326\":{\"h\":\"接口隔离原则\",\"t\":[\"定义：ISP原则是由罗伯特·C·马丁（Robert C. Martin）提出的，它主张客户端不应该被迫依赖它不需要的接口。换句话说，应该将庞大而臃肿的接口拆分成更小、更具体的接口，使得客户端仅依赖于它们真正需要的方法。\",\"核心思想：\",\"接口分组：将相关的操作组合成小的、针对性的接口，而不是创建一个包含所有可能方法的大接口。\",\"减少依赖：客户端只依赖那些它实际使用的方法，避免了“胖接口”导致的不必要的耦合。\",\"提高灵活性：允许接口的消费者选择合适的接口，使得系统更易于扩展和维护。\",\"目的：\",\"降低耦合：通过减少不必要的依赖，提高了模块之间的独立性。\",\"提高可重用性：更细粒度的接口可以更好地适应不同场景，增加代码的复用可能性。\",\"易于理解和维护：小接口比大接口更易于理解和测试。\",\"应用：\",\"接口拆分：分析接口的使用者，根据它们的需求将大接口拆分成小接口。\",\"避免上帝接口：避免创建一个“无所不能”的接口，它包含了各种不相关的功能。\",\"关注点分离：确保接口的职责单一，每个接口专注于特定的业务领域或功能。\",\"违反后果：如果一个类实现了大而全的接口，但只使用了其中一部分方法，那么这个类就不得不依赖于它不需要的其他方法，这增加了维护成本，也限制了未来的灵活性。\",\"接口隔离原则鼓励设计更加灵活、可扩展的系统，通过最小化接口的粒度来优化代码结构，提高软件设计的质量。\"]},\"327\":{\"h\":\"依赖反转原则\",\"t\":[\"定义：依赖反转原则是面向对象设计的基本原则之一，由Robert C. Martin提出。它指出高层次的模块不应该依赖于低层次的模块，它们都应该依赖于抽象；抽象不应该依赖于具体实现，而是具体实现应该依赖于抽象。\",\"核心思想：\",\"依赖抽象：高层次的模块（如业务逻辑）依赖于抽象接口或抽象类，而不是具体实现。\",\"控制反转：依赖关系的控制权从调用者转移到了被调用者，即不再由调用者直接创建被调用者的实例，而是通过依赖注入等方式来实现。\",\"目的：\",\"降低耦合：通过依赖抽象而不是具体实现，降低了模块间的耦合度。\",\"提高可扩展性：当需要更换或添加新实现时，无需修改原有高层模块，只需调整依赖的抽象接口实现。\",\"增强可测试性：依赖注入使得测试变得更加容易，因为可以轻松替换依赖项以进行单元测试。\",\"实现方式：\",\"使用接口或抽象类：定义接口或抽象类作为高层次模块的依赖。\",\"依赖注入：通过构造函数注入、属性注入或服务定位器等方式将依赖的实现传递给高层次模块。\",\"依赖反转容器：使用IoC（Inversion of Control）容器，如Spring框架，自动管理对象的创建和依赖关系。\",\"反模式：当高层次模块直接依赖于低层次模块的具体实现，而不是依赖于抽象，这会增加耦合，降低代码的灵活性和可维护性。\",\"应用示例：在设计一个图形用户界面时，高层次的业务逻辑层不应直接依赖于特定的数据库访问类，而应该依赖于一个数据库访问的接口。这样，当需要更换数据库或更改数据库访问方式时，只需修改低层次的实现，而无需改动业务逻辑层。\",\"依赖反转原则是实现“开闭原则”的关键，它促进了模块间的解耦，提高了代码的可复用性和可维护性。\",\"注意\",\"在JavaScript设计模式中，主要用到的是单一功能原则（Single Responsibility Principle）和依赖反转原则（Dependency Inversion Principle）。\"]},\"328\":{\"h\":\"设计模式\",\"t\":[\"其实就是指二十年前 GOF 提出的最经典的23种设计模式。二十年前，四位程序员前辈（Erich Gamma, Richard Helm, Ralph Johnson & John Vlissides）通过编写《设计模式：可复用面向对象软件的基础》这本书，阐述了设计模式领域的开创性成果。在这本书中，将23种设计模式按照“创建型”、“行为型”和“结构型”进行划分，其中带 * 号的是接下来要学习的，也是开发中最常用的：\"]},\"329\":{\"c\":[\"笔记\"]},\"330\":{\"h\":\"状态模式\"},\"331\":{\"h\":\"定义\",\"t\":[\"状态模式（State Pattern）是一种行为设计模式，它让对象能够在内部状态改变时改变它的行为，对象看起来似乎修改了它的类。这种模式通过将状态相关的操作封装到各自独立的状态类中，使得对象在不同状态下的行为可以被封装和管理，避免了复杂的条件分支语句。当对象状态改变时，对象会委托给对应状态的对象来处理行为，从而简化了代码结构和维护性。\"]},\"332\":{\"h\":\"疑问\",\"t\":[\"状态模式可以理解为就是策略模式 + 有一个共同的状态属性吗？\",\"策略模式：关注的是算法族，可以在运行时选择不同的算法，而这些算法通常不包含上下文的状态。比如，你可以选择不同的排序算法（快速排序、冒泡排序等）。\",\"状态模式：关注的是对象的行为随着内部状态的改变而改变。每个状态都是一个策略，但它们与特定上下文（如咖啡机）的状态紧密相关。状态模式中的对象在内部状态改变时会改变其行为。\",\"所以，状态模式不仅仅是策略模式加上一个状态属性，它更强调状态变化对对象行为的影响。\"]},\"333\":{\"h\":\"示例\",\"t\":[\"场景设定：咖啡机，有四种不同的咖啡模式，每种模式对应一种状态。\",\"class CoffeeMaker { constructor() { /** 这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑 **/ // 初始化状态，没有切换任何咖啡模式 this.state = 'init'; // 初始化牛奶的存储量 this.leftMilk = '500ml'; } stateToProcessor = { that: this, american() { // 尝试在行为函数里拿到咖啡机实例的信息并输出 console.log('咖啡机现在的牛奶存储量是:', this.that.leftMilk) console.log('我只吐黑咖啡'); }, latte() { this.american() console.log('加点奶'); }, vanillaLatte() { this.latte(); console.log('再加香草糖浆'); }, mocha() { this.latte(); console.log('再加巧克力'); } } // 关注咖啡机状态切换函数 changeState(state) { this.state = state; if (!this.stateToProcessor[state]) { return; } this.stateToProcessor[state](); } } const mk = new CoffeeMaker(); mk.changeState('latte'); \",\"使用抽象类的实现方式代理模式\",\"class CoffeeState { create() {} } class AmericanState extends CoffeeState { create() { console.log('咖啡机现在的牛奶存储量是:', this.leftMilk) console.log('我只吐黑咖啡'); } } class LatteState extends CoffeeState { constructor(leftMilk) { super(); this.leftMilk = leftMilk; } create() { console.log('咖啡机现在的牛奶存储量是:', this.leftMilk) console.log('加点奶'); } } class VanillaLatteState extends CoffeeState { constructor(leftMilk) { super(); this.leftMilk = leftMilk; } create() { console.log('咖啡机现在的牛奶存储量是:', this.leftMilk) console.log('加点奶'); console.log('再加香草糖浆'); } } class MochaState extends CoffeeState { constructor(leftMilk) { super(); this.leftMilk = leftMilk; } create() { console.log('咖啡机现在的牛奶存储量是:', this.leftMilk) console.log('加点奶'); console.log('再加香草糖浆'); console.log('再加巧克力'); } } class CoffeeMaker { constructor() { // 必须要有一个共同的状态，否则不是状态模式 this.currentState = null; } setState(state) { this.currentState = state; } make() { this.currentState.create(); } } const mk = new CoffeeMaker(); mk.setState(new MochaState('500ml')); mk.make(); \"]},\"334\":{\"c\":[\"笔记\"]},\"335\":{\"h\":\"观察者模式\"},\"336\":{\"h\":\"定义\",\"t\":[\"观察者模式（Observer Pattern）是一种行为设计模式，它定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。这种模式也被称为发布-订阅（Publish-Subscribe）模式。\"]},\"337\":{\"h\":\"示例\",\"t\":[\"// 定义发布者类 class Publisher { constructor(name) { this.name = name this.observers = [] console.log('Publisher created') } // 增加订阅者 subscribe(observer) { console.log('Publisher.add invoked') this.observers.push(observer) } // 移除订阅者 remove(observer) { console.log('Publisher.remove invoked') this.observers.forEach((item, i) => { if (item === observer) { this.observers.splice(i, 1) } }) } // 通知所有订阅者 notify() { console.log('Publisher.notify invoked') this.observers.forEach((observer) => { observer.update(this) }) } } class Observer { constructor(name) { this.name = name } update(publisher) { console.log(`${this.name} 收到 ${publisher.name} 的消息`) } } const publisher = new Publisher('Publisher'); const observer1 = new Observer('Observer1'); const observer2 = new Observer('Observer2'); publisher.subscribe(observer1); publisher.subscribe(observer2); publisher.notify(); \"]},\"338\":{\"h\":\"发布--订阅模式\",\"t\":[\"Event Bus来实现组件间的通讯就是一个典型的发布-订阅模式。\",\"Event Bus/Event Emitter 作为全局事件总线，它起到的是一个沟通桥梁的作用。我们可以把它理解为一个事件中心，我们所有事件的订阅/发布都不能由订阅方和发布方“私下沟通”，必须要委托这个事件中心帮我们实现。\",\"class EventEmitter { constructor() { // handlers是一个map，用于存储事件与回调之间的对应关系 this.handlers = {} } // on方法用于安装事件监听器，它接受目标事件名和回调函数作为参数 on (eventName, cb) { // 先检查一下目标事件名有没有对应的监听函数队列 if (!this.handlers[eventName]) { // 如果没有，那么首先初始化一个监听函数队列 this.handlers[eventName] = [] } // 把回调函数推入目标事件的监听函数队列里去 this.handlers[eventName].push(cb) } // emit方法用于触发目标事件，它接受事件名和监听函数入参作为参数 emit (eventName, ...args) { // 检查目标事件是否有监听函数队列 if (this.handlers[eventName]) { // 这里需要对 this.handlers[eventName] 做一次浅拷贝，主要目的是为了避免通过 once 安装的监听器在移除的过程中出现顺序问题 const handlers = this.handlers[eventName].slice() // 如果有，则逐个调用队列里的回调函数 handlers.forEach((callback) => { callback(...args) }) } } // 移除某个事件回调队列里的指定回调函数 off (eventName, cb) { const callbacks = this.handlers[eventName] const index = callbacks.indexOf(cb) if (index !== -1) { callbacks.splice(index, 1) } } // 为事件注册单次监听器 once (eventName, cb) { // 对回调函数进行包装，使其执行完毕自动被移除 const wrapper = (...args) => { cb(...args) this.off(eventName, wrapper) } this.on(eventName, wrapper) } } \",\"推荐阅读FaceBook推出的通用EventEmiiter库的源码\"]},\"339\":{\"h\":\"观察者模式与发布-订阅模式的区别\",\"t\":[\"观察者模式和发布-订阅模式之间的区别，在于是否存在第三方、发布者能否直接感知订阅者\"]},\"340\":{\"c\":[\"笔记\"]},\"341\":{\"h\":\"迭代器模式\"},\"342\":{\"h\":\"定义\",\"t\":[\"迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。\"]},\"343\":{\"c\":[\"笔记\"]},\"344\":{\"h\":\"简单工厂模式\"},\"345\":{\"h\":\"定义\",\"t\":[\"工厂模式的简单之处，在于它的概念相对好理解：将创建对象的过程单独封装，这样的操作就是工厂模式。同时它的应用场景也非常容易识别：有构造函数的地方，我们就应该想到简单工厂；在写了大量构造函数、调用了大量的 new、自觉非常不爽的情况下，我们就应该思考是不是可以掏出工厂模式重构我们的代码了。\"]},\"346\":{\"h\":\"示例\",\"t\":[\"使用函数封闭\",\"function Worker(name){ this.name = name; } function Factory(type) { switch (type) { case 'worker': return new Worker('worker'); break; default: return new Worker('worker'); break; } } \",\"使用对象属性来实现\",\"const Person = {}; Person.createTeacher = function (name){ this.name = name; } Person.createStudent = function (name) { this.name = name; } Person.factory = function (type, name) { return new Person[type](name); } const teacher = Person.factory('createTeacher', '张三'); \",\"使用原型来实现, 调用公共的方法\",\"const Animal = function(type, food){} // 创建公共方法 Animal.prototype.eat = function (){ console.log(`${this.name} eat ${this.food}`); } // 创建Dog构造函数 Animal.Dog = function (food){ this.name = 'dog'; this.food = food; } // 创建Cat构造函数 Animal.Cat = function (food) { this.name = 'cat'; this.food = food; } Animal.factory = function (type, food) { if(typeof Animal[type] !== 'function'){ return new Error('type is not exist'); } // 将创建类型的构造函数指向Animal if(typeof Animal[type].prototype.eat !== 'function'){ Animal[type].prototype = new Animal(); } return new Animal[type](food); } const dog = Animal.factory('Dog', 'bone'); dog.eat(); \",\"另一种方法：\",\"const Animal = function (type, food) { // 没有用new 创建实例 if(!(this instanceof Animal)){ return new Animal(type, food); } // 将创建类型的构造函数指向Animal Animal[type].prototype = this; // 创建类型实例 return new this.constructor[type](food); } Animal.prototype.eat = function (){ console.log(`${this.name} eat ${this.food}`); } Animal.Dog = function (food){ this.name = 'dog'; this.food = food } Animal.Cat = function (food){ this.name = 'cat'; this.food = food } const animal = Animal('Dog','beef'); animal.eat(); \",\"使用原型来实现, 但实现各自的方法\",\"const Car = function (type, content) { // 判断是否是有用new 创建实例， 如果有返回当前实例，没有用new 创建实例 return (this instanceof Car)? new this[type](content): new Car(type, content); } // 创建BMW构造函数 Car.prototype.BMW = function () { this.content = '宝马'; } // 创建BYD构造函数 Car.prototype.BYD = function () { this.content = '比亚迪'; } // BMW公共方法 Car.prototype.BMW.prototype.drive = function() { console.log(`I have ${this.content} doors!`); } const bmw = Car('BMW') bmw.drive(); \"]},\"347\":{\"c\":[\"笔记\"]},\"348\":{\"h\":\"抽象工厂模式\"},\"349\":{\"h\":\"定义\",\"t\":[\"抽象工厂模式(Abstract Factory)就是通过类的抽象使得业务适用于一个产品类簇的创建，而不负责某一类产品的实例。\"]},\"350\":{\"h\":\"示例\",\"t\":[\"情景：不同品牌的手机，在不同工厂中生产\",\"es5实现抽象\",\"/** * 使用es5实现抽象工厂模式 * * 什么是抽象工厂模式，就是一个对象可以被其他对象继承，但自身不能被实例化 */ function AbstractClass() { this.name = \\\"AbstractClass\\\"; if (new.target === AbstractClass) { throw new Error(\\\"不能实例化抽象类\\\"); } } // 静态方法，抽象类里没必要定义静态方法 AbstractClass.test = function () { console.log(\\\"test\\\"); }; AbstractClass.prototype.commonMethod = function () { throw new Error(\\\"抽象类不能调用抽象方法\\\"); }; function ConcreteClass() { // 首先通过AbstractClass.call(this)来改变this的指向，使得ConcreteClass实例可以继承AbstractClass的属性和方法 AbstractClass.call(this); this.name = \\\"ConcreteClass\\\"; this.age = 12; } /** * 继承抽象类原型指向抽象类原型， new Object(), {}，Object.create区别 * {}, Object.create(null)不会继承创建对象的属性，减少对象的遍历 * * 通过Object.create(AbstractClass.prototype)来继承AbstractClass的原型属性和方法，并将ConcreteClass的原型指向AbstractClass的原型 */ ConcreteClass.prototype = Object.create(AbstractClass.prototype); ConcreteClass.prototype.constructor = ConcreteClass; ConcreteClass.prototype.commonMethod = function () { console.log(\\\"commonMethod\\\", this.name, this.age); }; const concreteClass = new ConcreteClass(); /** * 报错：TypeError: ConcreteClass.test is not a function的错误 * ConcreteClass并没有继承AbstractClass的test静态方法。静态方法是属于类本身（构造函数）的，而不是原型链的一部分，因此不能通过子类实例访问。要解决这个问题，你可以直接在ConcreteClass中定义一个同名的静态方法，或者在需要调用AbstractClass.test的地方使用AbstractClass.test() */ ConcreteClass.test(); \",\"es6 class 实现抽象\",\"// 定义抽象工厂接口 class AbstractFactory { createButton() { throw new Error(\\\"Method must be implemented.\\\"); } createTextBox() { throw new Error(\\\"Method must be implemented.\\\"); } } // 具体工厂1：针对Chrome浏览器 class ChromeFactory extends AbstractFactory { createButton() { return new ChromeButton(); } createTextBox() { return new ChromeTextBox(); } } // 具体工厂2：针对Firefox浏览器 class FirefoxFactory extends AbstractFactory { createButton() { return new FirefoxButton(); } createTextBox() { return new FirefoxTextBox(); } } // 抽象产品：按钮 class AbstractButton { constructor() { this.type = \\\"abstract button\\\"; } } // 具体产品：Chrome按钮 class ChromeButton extends AbstractButton { constructor() { super(); this.type = \\\"Chrome button\\\"; } } // 具体产品：Firefox按钮 class FirefoxButton extends AbstractButton { constructor() { super(); this.type = \\\"Firefox button\\\"; } } // 抽象产品：文本框 class AbstractTextBox { constructor() { this.type = \\\"abstract text box\\\"; } } // 具体产品：Chrome文本框 class ChromeTextBox extends AbstractTextBox { constructor() { super(); this.type = \\\"Chrome text box\\\"; } } // 具体产品：Firefox文本框 class FirefoxTextBox extends AbstractTextBox { constructor() { super(); this.type = \\\"Firefox text box\\\"; } } // 使用抽象工厂模式 function createUIElements(browser) { if (browser === \\\"Chrome\\\") { const factory = new ChromeFactory(); return { button: factory.createButton(), textBox: factory.createTextBox(), }; } else if (browser === \\\"Firefox\\\") { const factory = new FirefoxFactory(); return { button: factory.createButton(), textBox: factory.createTextBox(), }; } else { throw new Error(\\\"Unsupported browser.\\\"); } } // 示例使用 const chromeElements = createUIElements(\\\"Chrome\\\"); console.log(chromeElements.button.type); // 输出：\\\"Chrome button\\\" console.log(chromeElements.textBox.type); // 输出：\\\"Chrome text box\\\" const firefoxElements = createUIElements(\\\"Firefox\\\"); console.log(firefoxElements.button.type); // 输出：\\\"Firefox button\\\" console.log(firefoxElements.textBox.type); // 输出：\\\"Firefox text box\\\" \"]},\"351\":{\"c\":[\"笔记\"]},\"352\":{\"h\":\"单例模式\"},\"353\":{\"h\":\"定义\",\"t\":[\"保证一个类仅有一个实例，并提供一个访问它的全局访问点，这样的模式就叫做单例模式。\"]},\"354\":{\"h\":\"示例\",\"t\":[\"使用对象字面量实现单例模式\",\"// 创建一个函数，该函数返回一个对象字面量 function singleton() { // 如果已经创建了实例，就直接返回 if (singleton.instance) { return singleton.instance; } // 创建对象字面量 const instance = { property: 'some value', method: function() { console.log('Hello, World!'); } }; // 将实例存储为静态属性 singleton.instance = instance; // 返回实例 return instance; } // 第一次调用时，会创建单例 const firstInstance = singleton(); console.log(firstInstance.property); // 输出: \\\"some value\\\" firstInstance.method(); // 输出: \\\"Hello, World!\\\" // 再次调用时，将返回相同的实例 const secondInstance = singleton(); console.log(secondInstance === firstInstance); // 输出: true \",\"使用静态属性实现单例模式\",\"function Singleton() { if(typeof Singleton.instance !== 'object'){ Singleton.instance = this; } return Singleton.instance; } const singleton1 = new Singleton(); const singleton2 = new Singleton(); console.log(singleton1 === singleton2); // true \",\"使用闭包实现单例模式\",\"function Singleton() { let instance = this; Singleton = function (){ return instance; } } const singleton1 = new Singleton(); const singleton2 = new Singleton(); console.log(singleton1 === singleton2); \",\"使用模块模式实现单例模式\",\"const Singleton = (function() { let instance; function createInstance() { const object = { property: 'some value', method: function() { console.log('Hello, World!'); } }; return object; } return { getInstance: function() { if (!instance) { instance = createInstance(); } return instance; } }; })(); // 获取单例 const firstInstance = Singleton.getInstance(); console.log(firstInstance.property); // 输出: \\\"some value\\\" firstInstance.method(); // 输出: \\\"Hello, World!\\\" // 再次获取单例 const secondInstance = Singleton.getInstance(); console.log(secondInstance === firstInstance); // 输出: true \",\"使用类实现单例模式\",\"class Singleton { show() { console.log('我是一个单例对象') } static getInstance() { // 判断是否已经new过1个实例 if (!SingleDog.instance) { // 若这个唯一的实例不存在，那么先创建它 SingleDog.instance = new SingleDog() } // 如果这个唯一的实例已经存在，则直接返回 return SingleDog.instance } } const s1 = Singleton.getInstance() const s2 = Singleton.getInstance() // true s1 === s2 \"]},\"355\":{\"c\":[\"笔记\"]},\"356\":{\"h\":\"原型模式\"},\"357\":{\"h\":\"定义\",\"t\":[\"在原型模式下，当我们想要创建一个对象时，会先找到一个对象作为原型，然后通过克隆原型的方式来创建出一个与原型一样（共享一套数据/方法）的对象。在 JavaScript 里，Object.create方法就是原型模式的天然实现——准确地说，只要我们还在借助Prototype来实现对象的创建和原型的继承，那么我们就是在应用原型模式。\"]},\"358\":{\"h\":\"示例\",\"t\":[\"// 定义一个原型对象 function Shape() { this.type = \\\"Shape\\\"; } // 实现克隆方法，这里使用了内置的Object.create() Shape.prototype.clone = function() { return Object.create(this); }; // 子类原型对象 function Circle() { this.type = \\\"Circle\\\"; this.radius = 10; } // 将Circle继承自Shape Circle.prototype = Object.create(Shape.prototype); Circle.prototype.constructor = Circle; // 在子类中添加方法 Circle.prototype.calculateArea = function() { return Math.PI * this.radius * this.radius; }; // 创建一个实例 var circle = new Circle(); // 克隆实例 var clonedCircle = circle.clone(); // 修改克隆后的实例 clonedCircle.radius = 20; console.log(clonedCircle.calculateArea()); // 输出: 1256.6370614359172 // 原始实例不受影响 console.log(circle.calculateArea()); // 输出: 314.1592653589793 \",\"原型模式在JavaScript里的使用简直是无处不在，其它很多模式有很多也是基于prototype的，这里大家要注意的依然是浅拷贝和深拷贝的问题，免得出现引用问题。\"]},\"359\":{\"h\":\"深拷贝\",\"t\":[\"// 深拷贝 function deepClone(obj, hash = new WeakMap()) { // 基础类型直接返回 if (obj == null || typeof obj !== \\\"object\\\") { return obj; } // 处理正则类型 if (obj instanceof RegExp) { return new RegExp(obj) }; // 处理日期类型 if (obj instanceof Date) { return new Date(obj) }; // 处理Map类型 if (obj instanceof Map) { let newMap = new Map(); for (let [key, value] of obj) { newMap.set(key, deepClone(value)); } return newMap; } // 处理Set类型 if (obj instanceof Set) { let newSet = new Set(); for (let [key, value] of obj.entries()) { newSet.add(deepClone(value)); } return newSet; } // 处理循环引用 if (hash.has(obj)) { return hash.get(obj) }; // 拷贝对象 let cloneObj = new obj.constructor(); hash.set(obj, cloneObj); for (let key in obj) { if (obj.hasOwnProperty(key)) { cloneObj[key] = deepClone(obj[key], hash); } } return cloneObj; } let data = { name: \\\"zhangsan\\\", age: 18, address: { city: \\\"beijing\\\", street: \\\"chaoyang\\\", }, date: new Date(), reg: /\\\\d+/, fn: function () { console.log(\\\"fn\\\"); }, symbol: Symbol(\\\"symbol\\\"), map: new Map([[1, 2]]), set: new Set([1, 2, 3, { name: \\\"zhangsan\\\" }]), array: [1, 2, 3], obj: { name: \\\"zhangsan\\\", age: 18, }, }; data.data = data; const copy = deepClone(data); console.log(copy); \"]},\"360\":{\"c\":[\"笔记\"]},\"361\":{\"h\":\"装饰器模式\"},\"362\":{\"h\":\"定义\",\"t\":[\"装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。\"]},\"363\":{\"h\":\"示例\",\"t\":[\"es6 示例\",\"es7可以使用装饰器语法糖实现\",\"// 定义打开按钮 class OpenButton { // 点击后展示弹窗（旧逻辑） onClick() { const modal = new Modal() modal.style.display = 'block' } } // 定义按钮对应的装饰器 class Decorator { // 将按钮实例传入 constructor(open_button) { this.open_button = open_button } onClick() { this.open_button.onClick() // “包装”了一层新逻辑 this.changeButtonStatus() } changeButtonStatus() { this.changeButtonText() this.disableButton() } disableButton() { const btn = document.getElementById('open') btn.setAttribute(\\\"disabled\\\", true) } changeButtonText() { const btn = document.getElementById('open') btn.innerText = '快去登录' } } const openButton = new OpenButton() const decorator = new Decorator(openButton) document.getElementById('open').addEventListener('click', function() { // openButton.onClick() // 此处可以分别尝试两个实例的onClick方法，验证装饰器是否生效 decorator.onClick() }) \"]},\"364\":{\"c\":[\"笔记\"]},\"365\":{\"h\":\"适配器模式\"},\"366\":{\"h\":\"定义\",\"t\":[\"适配器模式是一种结构型设计模式，它的核心思想是将一个接口转换成客户期望的另一个接口，使得原本不兼容的接口可以协同工作。下面通过一个简单的JavaScript示例来说明适配器模式的应用。\"]},\"367\":{\"h\":\"示例\",\"t\":[\"场景设定\",\"假设我们有两个音乐播放器类：AndroidPlayer 和 IosPlayer，它们提供了获取音乐的方法，但接口不同。现在我们需要一个统一的方式去控制这两个不同平台的播放器播放音乐。\",\"es5\",\"// 原有的Android播放器类 function AndroidPlayer() {} AndroidPlayer.prototype.playMusic = function(songName) { console.log(`Playing ${songName} on Android Player`); } // 原有的iOS播放器类 function IosPlayer() {} IosPlayer.prototype.playSong = function(songName) { console.log(`Playing ${songName} on iOS Player`); } function MusicPlayerAdapter(player) { this.player = player; } MusicPlayerAdapter.prototype.play = function(songName) { if (this.player instanceof AndroidPlayer) { this.player.playMusic(songName); } if (this.player instanceof IosPlayer) { this.player.playSong(songName); } } // 使用适配器 const androidPlayer = new AndroidPlayer(); const iosPlayer = new IosPlayer(); const androidAdapter = new MusicPlayerAdapter(androidPlayer); const iosAdapter = new MusicPlayerAdapter(iosPlayer); androidAdapter.play('Song A'); // 输出: Playing Song A on Android Player iosAdapter.play('Song B'); // 输出: Playing Song B on iOS Player \",\"es6\",\"// 原有的Android播放器类 class AndroidPlayer { playMusic(songName) { console.log(`Playing ${songName} on Android Player`); } } // 原有的iOS播放器类 class IosPlayer { playSong(songName) { console.log(`Playing ${songName} on iOS Player`); } } // 适配器类，用于适配两种不同的播放器接口 class MusicPlayerAdapter { constructor(player) { this.player = player; } play(songName) { if (this.player instanceof AndroidPlayer) { this.player.playMusic(songName); } else if (this.player instanceof IosPlayer) { this.player.playSong(songName); } } } // 使用适配器 const androidPlayer = new AndroidPlayer(); const iosPlayer = new IosPlayer(); const androidAdapter = new MusicPlayerAdapter(androidPlayer); const iosAdapter = new MusicPlayerAdapter(iosPlayer); androidAdapter.play('Song A'); // 输出: Playing Song A on Android Player iosAdapter.play('Song B'); // 输出: Playing Song B on iOS Player \"]},\"368\":{\"c\":[\"笔记\"]},\"369\":{\"h\":\"代理器模式\"},\"370\":{\"h\":\"代理模式\",\"t\":[\"代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能，这是它跟装饰器模式最大的不同。\",\"简单点说就是通过\\\"中间方\\\"去调用的原始类的方式。\"]},\"371\":{\"h\":\"示例\",\"t\":[\"es6\",\"// 目标对象 class RealSubject { constructor(name) { this.name = name; } getName() { return this.name; } setName(name) { this.name = name; } } // 代理对象 class SubjectProxy { constructor(realSubject) { this._realSubject = realSubject; } // 代理获取属性 get name() { console.log('Getting the name through the proxy...'); return this._realSubject.name; } // 代理设置属性 set name(value) { console.log('Setting the name through the proxy...'); this._realSubject.name = value; } // 添加额外功能，例如检查权限 checkPermission(permission) { if (permission !== 'allowed') { throw new Error('Unauthorized access!'); } } } // 创建目标对象 const realSubject = new RealSubject('John Doe'); // 创建代理对象 const proxy = new SubjectProxy(realSubject); // 通过代理访问和修改属性 proxy.checkPermission('allowed'); console.log(proxy.name); // 输出：Getting the name through the proxy... proxy.name = 'Jane Doe'; // 输出：Setting the name through the proxy... // 如果没有权限，尝试访问会被阻止 try { proxy.checkPermission('denied'); console.log(proxy.name); } catch (error) { console.error(error.message); } \"]},\"372\":{\"c\":[\"笔记\"]},\"373\":{\"h\":\"策略模式\"},\"374\":{\"h\":\"定义\",\"t\":[\"策略模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。\",\"策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。\",\"简而言之，就是策略模式准备了一组算法，并将每个算法进行封装，使它们之间可用相互替换。\",\"策略模式除了用来封装算法，也可以用来封装一系列的\\\"业务规则\\\"，只要这些业务规则指向的目标一致，并且可以被替换使用，我们就可以用策略模式来封装它们。\"]},\"375\":{\"h\":\"示例\",\"t\":[\"// 策略类 // 所有跟计算奖金有关的逻辑不再放在环境类Context中，而是分布在各个策略对象中。 let strategies = { // 每个策略对象负责的算法被各自封装在对象内部 \\\"RegularCard\\\": function( deposit ){ return deposit * 0.1; }, \\\"GoldCard\\\": function( deposit ){ return deposit * 0.2; }, \\\"PlatinumCard\\\": function( deposit ){ return deposit * 0.3; } }; // 奖金类(对应环境类`calculateBonusContext) // 环境类Context并没有计算奖金的能力，而是把这个职责委托给了某个策略对象 let calculateBonus = (vipLevel,deposit) => { return strategies[vipLevel](deposit); } // 替换Context中当前保存的策略对象，便能执行不同的算法来得到我们想要的结果 console.log('GoldCard', 2000) // 输出：400 console.log('RegularCard', 1000) // 输出：100 \"]},\"376\":{\"c\":[\"笔记\"]},\"377\":{\"h\":\"简介\"},\"378\":{\"h\":\"React是什么\",\"t\":[\"用于构建 Web 和原生交互界面的库\",\"注意\",\"React推荐函数式编程\",\"为什么 React 现在要推行函数式组件，用 class 不好吗？\"]},\"379\":{\"h\":\"使用React\"},\"380\":{\"h\":\"通过src引用React\",\"t\":[\"详情\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\" /> <title>Hello World</title> <script src=\\\"https://unpkg.com/react@18/umd/react.development.js\\\"></script> <script src=\\\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\\\"></script> <!-- Don't use this in production: --> <script src=\\\"https://unpkg.com/@babel/standalone/babel.min.js\\\"></script> </head> <body> <div id=\\\"root\\\"></div> <script type=\\\"text/babel\\\"> function MyApp() { return <h1>Hello, world!</h1>; } const container = document.getElementById('root'); const root = ReactDOM.createRoot(container); // 挂载组件到root标签下 root.render(<MyApp />); </script> <!-- Note: this page is a great way to try React but it's not suitable for production. It slowly compiles JSX with Babel in the browser and uses a large development build of React. Read this page for starting a new React project with JSX: https://react.dev/learn/start-a-new-react-project Read this page for adding React with JSX to an existing project: https://react.dev/learn/add-react-to-an-existing-project --> </body> </html> \"]},\"381\":{\"h\":\"通过框架创建 React 项目\"},\"382\":{\"h\":\"生产级的 React 框架\"},\"383\":{\"h\":\"Next.js\",\"t\":[\"Next.js 是一个全栈式的 React 框架。它用途广泛，可以让你创建任意规模的 React 应用——可以是静态博客，也可以是复杂的动态应用。要创建一个新的 Next.js 项目，请在你的终端运行：\",\"npx create-next-app@latest \"]},\"384\":{\"h\":\"Remix\",\"t\":[\"Remix 是一个具有嵌套路由的全栈式 React 框架。它可以把你的应用分成嵌套部分，该嵌套部分可以并行加载数据并响应用户操作进行刷新。要创建一个新的 Remix 项目，请运行：\",\"npx create-remix \"]},\"385\":{\"h\":\"Gatsby\",\"t\":[\"Gatsby 是一个快速的支持 CMS 的网站的 React 框架。其丰富的插件生态系统和 GraphQL 数据层简化了将内容、API 和服务整合到一个网站的过程。要创建一个新的 Gatsby 项目，请运行：\",\"npx create-gatsby \"]},\"386\":{\"h\":\"Expo（用于原生应用）\",\"t\":[\"Expo 是一个 React 框架，可以让你创建具有真正原生 UI 的应用，包括 Android、iOS，以及 Web 应用。它为 React Native 提供了 SDK，使原生部分更容易使用。要创建一个新的 Expo 项目，请运行：\",\"npx create-expo-app \"]},\"387\":{\"h\":\"React 常用脚手架\"},\"388\":{\"h\":\"(官方脚手架)\",\"t\":[\"# 安装 npx create-react-app # 创建项目 npx create-react-app my-app \"]},\"389\":{\"h\":\"(蚂蚁金服脚手架)\",\"t\":[\"# 安装 npx create-umi@latest # 从 @umijs/electron-template 创建一个 electron 模板 npx create umi --template electron \"]},\"390\":{\"h\":\"(阿里巴巴脚手架)\",\"t\":[\"# 安装 npx create-ice@latest # 创建项目 npm init ice <projectName> \"]},\"391\":{\"h\":\"icejs 与 Next.js、UmiJS 之类的框架有什么区别？\",\"t\":[\"icejs、Next.js、UmiJS 以及基于 React 的 Nuxt.js 都是同一个层面的解决方案，而这些方案基本都有受 Next.js 启发。各个框架除了功能实现上有些许差异外，更多是不同团队有不同的最佳实践以及设计原则，开发者可以结合自身的功能诉求以及最佳实践做选择。\"]},\"392\":{\"h\":\"描述UI\"},\"393\":{\"h\":\"JSX\",\"t\":[\"JSX 是 JavaScript 语法扩展，可以让你在 JavaScript 文件中书写类似 HTML 的标签。虽然还有其它方式可以编写组件，但大部分 React 开发者更喜欢 JSX 的简洁性，并且在大部分代码库中使用它。\"]},\"394\":{\"h\":\"JSX 规则\"},\"395\":{\"h\":\"1. 只能返回一个根元素\",\"t\":[\"如果想要在一个组件中包含多个元素，需要用一个父标签把它们包裹起来。如果你不想在标签中增加一个额外的 <div>，可以用 <> 和 </> 元素来代替。\",\"<> <p></p> </> \",\"这个空标签被称作 Fragment。React Fragment 允许你将子元素分组，而不会在 HTML 结构中添加额外节点。\",\"提示\"]},\"396\":{\"h\":\"为什么多个 JSX 标签需要被一个父元素包裹？\",\"t\":[\"JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。这就是为什么多个 JSX 标签必须要用一个父元素或者 Fragment 来包裹。\"]},\"397\":{\"h\":\"2. 标签必须闭合\"},\"398\":{\"h\":\"3. 使用驼峰式命名法给 大部分属性命名！\",\"t\":[\"JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在你自己的组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，变量名称不能包含 - 符号或者像 class 这样的保留字。\",\"这就是为什么在 React 中，大部分 HTML 和 SVG 属性都用驼峰式命名法表示。例如，需要用 strokeWidth 代替 stroke-width。由于 class 是一个保留字，所以在 React 中需要用 className 来代替。这也是 DOM 属性中的命名。\",\"你可以 在 React DOM 元素中找到所有对应的属性。\",\"注意\",\"由于历史原因，aria-* 和 data-* 属性是以带 - 符号的 HTML 格式书写的。\"]},\"399\":{\"h\":\"4. 在 JSX 中通过大括号使用 JavaScript\",\"t\":[\"你可能想要在标签中添加一些 JavaScript 逻辑或者引用动态的属性。这种情况下，你可以在 JSX 的大括号内来编写 JavaScript。\",\"export default function Avatar() { const avatar = 'https://i.imgur.com/7vQD0fPs.jpg'; const description = 'Gregorio Y. Zara'; return ( <img className=\\\"avatar\\\" src={avatar} alt={description} /> ); } \",\"在 JSX 中，只能在以下两种场景中使用大括号：\",\"用作 JSX 标签内的文本：<h1>{name}'s To Do List</h1> 是有效的，但是 <{tag}>Gregorio Y. Zara's To Do List</{tag}> 无效。\",\"用作紧跟在 = 符号后的 属性：src={avatar} 会读取 avatar 变量，但是 src=\\\"{avatar}\\\" 只会传一个字符串 {avatar}。\"]},\"400\":{\"h\":\"5. 使用 “双大括号”：JSX 中的 CSS 和 对象\",\"t\":[\"除了字符串、数字和其它 JavaScript 表达式，你甚至可以在 JSX 中传递对象。对象也用大括号表示，例如 { name: \\\"Hedy Lamarr\\\", inventions: 5 }。因此，为了能在 JSX 中传递，你必须用另一对额外的大括号包裹对象：person={ { name: \\\"Hedy Lamarr\\\", inventions: 5 } }。\",\"你可能在 JSX 的内联 CSS 样式中就已经见过这种写法了。React 不要求你使用内联样式（使用 CSS 类就能满足大部分情况）。但是当你需要内联样式的时候，你可以给 style 属性传递一个对象：\",\"export default function TodoList() { return ( <ul style={{ backgroundColor: 'black', color: 'pink' }}> <li>Improve the videophone</li> <li>Prepare aeronautics lectures</li> <li>Work on the alcohol-fuelled engine</li> </ul> ); } \",\"注意\",\"内联 style 属性 使用驼峰命名法编写。例如，HTML <ul style=\\\"background-color: black\\\"> 在你的组件里应该写成 <ul style={ { backgroundColor: 'black' } }>。\"]},\"401\":{\"h\":\"Props\",\"t\":[\"React 组件使用 props 来互相通信。每个父组件都可以提供 props 给它的子组件，从而将一些信息传递给它。Props 可能会让你想起 HTML 属性，但你可以通过它们传递任何 JavaScript 值，包括对象、数组和函数。\"]},\"402\":{\"h\":\"1. Props的传递和读取\",\"t\":[\"Props的传递方式和标签属性一样，<img> 标签的 props 是预定义的（ReactDOM 符合 HTML 标准）。但是你可以将任何 props 传递给 你自己的 组件\",\"// 读取 function Avatar(props){ let person = props.person; // ... } // Props的传递 export default function Profile() { return ( <Avatar person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }} size={100} /> ); } \"]},\"403\":{\"h\":\"2. 给 prop 指定一个默认值\",\"t\":[\"// 默认值 function Avatar({ person = { name: 'Lin Lanying' } }){ // ... } // Props的传递 export default function Profile() { return ( <Avatar person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }} size={100} /> ); } \",\"默认值仅在缺少 person prop 或 person={undefined} 时生效。 但是如果你传递了 person={null} 或 person={0}，默认值将 不 被使用。\"]},\"404\":{\"h\":\"3. 使用 JSX 展开语法传递 props\",\"t\":[\"// 默认值 function Avatar(props){ // ... } // JSX 展开语法传递 props export default function Profile(data) { return ( <Avatar {...data}/> ); } \"]},\"405\":{\"h\":\"4. 将 JSX 作为子组件传递\",\"t\":[\"当您将内容嵌套在 JSX 标签中时，父组件将在名为 children 的 prop 中接收到该内容。例如，下面的 Card 组件将接收一个被设为 <Avatar /> 的 children prop 并将其包裹在 div 中渲染：\",\"// 通过children读取传递的组件 function Card({ children }) { return ( <div className=\\\"card\\\"> {children} </div> ); } function Avatar(props){ // .... } export default function Profile() { return ( <Card> <Avatar size={100} person={{ name: 'Katsuko Saruhashi', imageId: 'YfeOqp2' }} /> </Card> ); } \"]},\"406\":{\"h\":\"5. Props是不可变的\",\"t\":[\"Props 是只读的时间快照：每次渲染都会收到新版本的 props，你不能改变 props，当你需要交互性时，你可以设置 state。\"]},\"407\":{\"h\":\"条件渲染\"},\"408\":{\"h\":\"1. 条件返回 JSX\",\"t\":[\"你可以用 if/else 语句 去判断：\",\"if (isPacked) { return <li className=\\\"item\\\">{name} ✔</li>; } return <li className=\\\"item\\\">{name}</li>; \",\"或三目运算符（? :）去判断：\",\"return <li className=\\\"item\\\">{isPacked ? name + ' ✔' : name}</li>; \",\"与运算符（&&）：\",\"return <li className=\\\"item\\\">{name} {isPacked && '✔'}</li>; \",\"在 JSX 里，React 会将 false 视为一个“空值”，就像 null 或者 undefined，这样 React 就不会在这里进行任何渲染。\",\"注意\",\"切勿将数字放在 && 左侧.\",\"JavaScript 会自动将左侧的值转换成布尔类型以判断条件成立与否。然而，如果左侧是 0，整个表达式将变成左侧的值（0），React 此时则会渲染 0 而不是不进行渲染。\",\"例如，一个常见的错误是 messageCount && <p>New messages</p>。其原本是想当 messageCount 为 0 的时候不进行渲染，但实际上却渲染了 0。\",\"为了更正，可以将左侧的值改成布尔类型：messageCount > 0 && <p>New messages</p>。\"]},\"409\":{\"h\":\"2. 选择性地返回 null\",\"t\":[\"在一些情况下，你不想有任何东西进行渲染。比如，你不想显示已经打包好的物品。但一个组件必须返回一些东西。这种情况下，你可以直接返回 null。\",\"if (isPacked) { return null; } return <li className=\\\"item\\\">{name}</li>; \",\"提示\",\"在 JSX 里，返回false, null, undefined在React中不会渲染。\"]},\"410\":{\"h\":\"3. 渲染列表\",\"t\":[\"从数组中渲染数据：\",\"const people = [ '凯瑟琳·约翰逊: 数学家', '马里奥·莫利纳: 化学家', '穆罕默德·阿卜杜勒·萨拉姆: 物理学家', '珀西·莱温·朱利亚: 化学家', '苏布拉马尼扬·钱德拉塞卡: 天体物理学家', ]; export default function List() { const listItems = people.map((person, index) => <li key={index}>{person}</li> ); return <ul>{listItems}</ul>; } // 或者 export default function List() { return <ul> { people.map((person, index) => <li key={index}>{person}</li> ) } </ul>; } \",\"注意\",\"数组生成的JSX元素必须用 key 保持列表项的顺序，否则会报错\",\"Fragment 语法的简写形式 <> </> 无法接受 key 值，所以你只能要么把生成的节点用一个 <div> 标签包裹起来，要么使用长一点但更明确的 <Fragment> 写法：\",\"import { Fragment } from 'react'; // ... const listItems = people.map(person => <Fragment key={person.id}> <h1>{person.name}</h1> <p>{person.bio}</p> </Fragment> ); \",\"组件不会把 key 当作 props 的一部分。Key 的存在只对 React 本身起到提示作用。如果你的组件需要一个 ID，那么请把它作为一个单独的 prop 传给组件： <Profile key={id} userId={id} />。\"]},\"411\":{\"h\":\"保持组件纯粹\",\"t\":[\"一个组件必须是纯粹的，就意味着： \",\"只负责自己的任务。 它不会更改在该函数调用前就已存在的对象或变量。\",\"输入相同，则输出相同。 给定相同的输入，组件应该总是返回相同的 JSX。\",\"渲染随时可能发生，因此组件不应依赖于彼此的渲染顺序。\",\"你不应该改变任何用于组件渲染的输入。这包括 props、state 和 context。通过 “设置” state 来更新界面，而不要改变预先存在的对象。\",\"努力在你返回的 JSX 中表达你的组件逻辑。当你需要“改变事物”时，你通常希望在事件处理程序中进行。作为最后的手段，你可以使用 useEffect。\",\"编写纯函数需要一些练习，但它充分释放了 React 范式的能力。\"]},\"412\":{\"h\":\"将 UI 视为树\",\"t\":[\"树是表示实体之间关系的常见方式，它们经常用于建模 UI。\",\"渲染树表示单次渲染中 React 组件之间的嵌套关系。\",\"使用条件渲染，渲染树可能会在不同的渲染过程中发生变化。使用不同的属性值，组件可能会渲染不同的子组件。\",\"渲染树有助于识别顶级组件和叶子组件。顶级组件会影响其下所有组件的渲染性能，而叶子组件通常会频繁重新渲染。识别它们有助于理解和调试渲染性能问题。\",\"依赖树表示 React 应用程序中的模块依赖关系。\",\"构建工具使用依赖树来捆绑必要的代码以部署应用程序。\",\"依赖树有助于调试大型捆绑包带来的渲染速度过慢的问题，以及发现哪些捆绑代码可以被优化。\"]},\"413\":{\"h\":\"添加交互\"},\"414\":{\"h\":\"响应事件\",\"t\":[\"使用 React 可以在 JSX 中添加 事件处理函数。其中事件处理函数为自定义函数，它将在响应交互（如点击、悬停、表单输入框获得焦点等）时触发。\"]},\"415\":{\"h\":\"1. 添加事件处理函数\",\"t\":[\"事件处理函数有如下特点:\",\"通常在你的组件内部定义。\",\"名称以 handle 开头，后跟事件名称。\",\"export default function Button() { function handleClick() { alert('你点击了我！'); } return ( <button onClick={handleClick}> 点我 </button> ); } \",\"注意\",\"传递给事件处理函数的函数应直接传递，而非调用。例如：\",\"传递一个函数（正确）\",\"调用一个函数（错误）\",\"<button onClick={ handleClick }>\",\"<button onClick={ handleClick() }>\",\"区别很微妙。在第一个示例中，handleClick 函数作为 onClick 事件处理函数传递。这会让 React 记住它，并且只在用户点击按钮时调用你的函数。\",\"在第二个示例中，handleClick() 中最后的 () 会在 渲染 过程中 立即 触发函数，即使没有任何点击。这是因为在 JSX { 和 } 之间的 JavaScript 会立即执行。\",\"如果你想要定义内联事件处理函数，请将其包装在匿名函数中，如下所示：\",\"<button onClick={ () => alert('你点击了我！') }> \"]},\"416\":{\"h\":\"2. 在事件处理函数中读取 props\",\"t\":[\"onClick事件处理函数也可作为 props 传递：\",\"function Button({ onClick, children }) { return ( <button onClick={onClick}> {children} </button> ); } function PlayButton({ movieName }) { function handlePlayClick() { alert(`正在播放 ${movieName}！`); } return ( <Button onClick={handlePlayClick}> 播放 \\\"{movieName}\\\" </Button> ); } function UploadButton() { return ( <Button onClick={() => alert('正在上传！')}> 上传图片 </Button> ); } export default function Toolbar() { return ( <div> <PlayButton movieName=\\\"魔女宅急便\\\" /> <UploadButton /> </div> ); } \"]},\"417\":{\"h\":\"3. 事件传播\",\"t\":[\"事件处理函数还将捕获任何来自子组件的事件。通常，我们会说事件会沿着树向上“冒泡”或“传播”：它从事件发生的地方开始，然后沿着树向上传播。\",\"提示\",\"在 React 中所有事件都会传播，除了 onScroll，它仅适用于你附加到的 JSX 标签。\"]},\"418\":{\"h\":\"4. 阻止传播\",\"t\":[\"事件处理函数接收一个 事件对象 作为唯一的参数。按照惯例，它通常被称为 e ，代表 “event”（事件）。你可以使用此对象来读取有关事件的信息。\",\"这个事件对象还允许你阻止传播。如果你想阻止一个事件到达父组件，你需要像下面 Button 组件那样调用 e.stopPropagation() ：\",\"function Button({ onClick, children }) { return ( <button onClick={e => { e.stopPropagation(); onClick(); }}> {children} </button> ); } export default function Toolbar() { return ( <div className=\\\"Toolbar\\\" onClick={() => { alert('你点击了 toolbar ！'); }}> <Button onClick={() => alert('正在播放！')}> 播放电影 </Button> <Button onClick={() => alert('正在上传！')}> 上传图片 </Button> </div> ); } \"]},\"419\":{\"h\":\"5. 捕获阶段事件\",\"t\":[\"极少数情况下，你可能需要捕获子元素上的所有事件，即便它们阻止了传播。例如，你可能想对每次点击进行埋点记录，传播逻辑暂且不论。那么你可以通过在事件名称末尾添加 Capture 来实现这一点：\",\"<div onClickCapture={() => { /* 这会首先执行 */ }}> <button onClick={e => e.stopPropagation()} /> <button onClick={e => e.stopPropagation()} /> </div> \",\"每个事件分三个阶段传播：\",\"它向下传播，调用所有的 onClickCapture 处理函数。\",\"它执行被点击元素的 onClick 处理函数。\",\"它向上传播，调用所有的 onClick 处理函数。\",\"捕获事件对于路由或数据分析之类的代码很有用，但你可能不会在应用程序代码中使用它们。\"]},\"420\":{\"h\":\"6. 阻止默认行为\",\"t\":[\"你可以调用事件对象中的 e.preventDefault() 来阻止默认行为发生：\",\"export default function Signup() { return ( <form onSubmit={e => { e.preventDefault(); alert('提交表单！'); }}> <input /> <button>发送</button> </form> ); } \"]},\"421\":{\"h\":\"State：组件的记忆\",\"t\":[\"组件通常需要根据交互更改屏幕上显示的内容。输入表单应该更新输入字段，单击轮播图上的“下一个”应该更改显示的图片，单击“购买”应该将商品放入购物车。组件需要“记住”某些东西：当前输入值、当前图片、购物车。在 React 中，这种组件特有的记忆被称为 state。\"]},\"422\":{\"h\":\"1. 使用 useState Hook 添加 state 变量\",\"t\":[\"useState Hook 提供了这两个功能：\",\"State 变量 用于保存渲染间的数据。\",\"State setter 函数 更新变量并触发 React 再次渲染组件。\",\"import { useState } from 'react'; // index: State 变量 // setIndex: State setter 函数 const [index, setIndex] = useState(0); \",\"注意\",\"Hooks ——以 use 开头的函数——只能在组件或自定义 Hook 的最顶层调用。 你不能在条件语句、循环语句或其他嵌套函数内调用 Hook。Hook 是函数，但将它们视为关于组件需求的无条件声明会很有帮助。在组件顶部 “use” React 特性，类似于在文件顶部“导入”模块。\"]},\"423\":{\"h\":\"2. State 是隔离且私有的\",\"t\":[\"State 是屏幕上组件实例内部的状态。换句话说，如果你渲染同一个组件两次，每个副本都会有完全隔离的 state！改变其中一个不会影响另一个。\"]},\"424\":{\"h\":\"3. 设置 state 会触发渲染\"},\"425\":{\"h\":\"4. 设置 state 只会为下一次渲染变更 state 的值, 一个 state 变量的值永远不会在一次渲染的内部发生变化\",\"t\":[\"每一次渲染的 state 值都是固定的，因此无论你调用多少次 setNumber(1)，在第一次渲染的事件处理函数内部的 number 值总是 0 ：\",\"import { useState } from 'react'; export default function Counter() { const [number, setNumber] = useState(0); return ( <> <h1>{number}</h1> <button onClick={() => { setNumber(number + 1); // number = 0 setNumber(number + 1); // number = 0 setNumber(number + 1); // number = 0 }}>+3</button> </> ) } \"]},\"426\":{\"h\":\"5. 在下次渲染前多次更新同一个 state (解决上面问题)\",\"t\":[\"这是一个不常见的用例，但是如果你想在下次渲染之前多次更新同一个 state，你可以像 setNumber(n => n + 1) 这样传入一个根据队列中的前一个 state 计算下一个 state 的 函数，而不是像 setNumber(number + 1) 这样传入 下一个 state 值。这是一种告诉 React “用 state 值做某事”而不是仅仅替换它的方法。\",\"import { useState } from 'react'; export default function Counter() { const [number, setNumber] = useState(0); return ( <> <h1>{number}</h1> <button onClick={() => { setNumber(n => n + 1); // number = 1 setNumber(n => n + 1); // number = 2 setNumber(n => n + 1); // number = 3 }}>+3</button> </> ) } \"]},\"427\":{\"h\":\"6. 更新 state 中的对象\",\"t\":[\"state 中可以保存任意类型的 JavaScript 值，包括对象。但是，你不应该直接修改存放在 React state 中的对象。相反，当你想要更新一个对象时，你需要创建一个新的对象（或者将其拷贝一份），然后将 state 更新为此对象。\",\"将 React 中所有的 state 都视为不可直接修改的。\",\"当你在 state 中存放对象时，直接修改对象并不会触发重渲染，并会改变前一次渲染“快照”中 state 的值。\",\"不要直接修改一个对象，而要为它创建一个 新 版本，并通过把 state 设置成这个新版本来触发重新渲染。\",\"你可以使用这样的 {...obj, something: 'newValue'} 对象展开语法来创建对象的拷贝。\",\"对象的展开语法是浅层的：它的复制深度只有一层。\",\"想要更新嵌套对象，你需要从你更新的位置开始自底向上为每一层都创建新的拷贝。\",\"想要减少重复的拷贝代码，可以使用 Immer。\"]},\"428\":{\"h\":\"7. 更新 state 中的数组\",\"t\":[\"数组是另外一种可以存储在 state 中的 JavaScript 对象，它虽然是可变的，但是却应该被视为不可变。同对象一样，当你想要更新存储于 state 中的数组时，你需要创建一个新的数组（或者创建一份已有数组的拷贝值），并使用新数组设置 state。\",\"下面是常见数组操作的参考表。当你操作 React state 中的数组时，你需要避免使用左列的方法，而首选右列的方法：\",\"避免使用 (会改变原始数组)\",\"推荐使用 (会返回一个新数组）\",\"添加元素\",\"push，unshift\",\"concat，[...arr]\",\"删除元素\",\"pop，shift，splice\",\"filter，slice\",\"替换元素\",\"splice，arr[i] = ... 赋值\",\"map\",\"排序\",\"reverse，sort\",\"先将数组复制一份\"]},\"429\":{\"h\":\"React生命周期\",\"t\":[\"React 生命周期分为三个阶段：\",\"创建阶段（初始化阶段）：这是组件第一次在 DOM 树中进行渲染的过程。在这个阶段，组件完成了初始化和加载。\",\"更新阶段（存在阶段）：在这个阶段，组件被重新渲染。在这个过程中，组件可以处理用户交互、接收事件更新界面，以及因父组件的重新渲染而发生的变化。\",\"卸载阶段（销毁阶段）：这是组件从 DOM 中删除的过程。在这个阶段，组件会执行一些清理工作。\",\"React生命周期\"]},\"430\":{\"h\":\"状态管理\"},\"431\":{\"h\":\"构建 state 的原则\",\"t\":[\"合并关联的 state。如果你总是同时更新两个或更多的 state 变量，请考虑将它们合并为一个单独的 state 变量。\",\"避免互相矛盾的 state。当 state 结构中存在多个相互矛盾或“不一致”的 state 时，你就可能为此会留下隐患。应尽量避免这种情况。\",\"避免冗余的 state。如果你能在渲染期间从组件的 props 或其现有的 state 变量中计算出一些信息，则不应将这些信息放入该组件的 state 中。\",\"避免重复的 state。当同一数据在多个 state 变量之间或在多个嵌套对象中重复时，这会很难保持它们同步。应尽可能减少重复。\",\"避免深度嵌套的 state。深度分层的 state 更新起来不是很方便。如果可能的话，最好以扁平化方式构建 state。\"]},\"432\":{\"h\":\"在组件间共享状态\"},\"433\":{\"h\":\"1. 状态提升\",\"t\":[\"有时候，你希望两个组件的状态始终同步更改。要实现这一点，可以将相关 state 从这两个组件上移除，并把 state 放到它们的公共父级，再通过 props 将 state 传递给这两个组件。这被称为“状态提升”，这是编写 React 代码时常做的事。\"]},\"434\":{\"h\":\"2. 每个状态都对应唯一的数据源\",\"t\":[\"对于每个独特的状态，都应该存在且只存在于一个指定的组件中作为 state。这一原则也被称为拥有 “可信单一数据源”。\"]},\"435\":{\"h\":\"对 state 进行保留和重置\"},\"436\":{\"h\":\"1. state 进行保留和重置的原则\",\"t\":[\"相同位置的相同组件会使得 state 被保留下来\",\"相同位置的不同组件会使 state 重置\",\"注意\",\"记住对React来说重要的是组件在UI树中的位置, 而不是在 JSX 中的位置！\"]},\"437\":{\"h\":\"2. 在相同位置重置 state\",\"t\":[\"将组件渲染在不同的位置\",\"使用 key 赋予每个组件一个明确的身份\"]},\"438\":{\"h\":\"reducer\",\"t\":[\"对于拥有许多状态更新逻辑的组件来说，过于分散的事件处理程序可能会令人不知所措。对于这种情况，你可以将组件的所有状态更新逻辑整合到一个外部函数中，这个函数叫作 reducer。\",\"reducer就是一个它接受目前的结果和当前的值，然后返回下一个结果的外部函数。\"]},\"439\":{\"h\":\"1. 在组件中使用 reducer\",\"t\":[\"在组件中使用 reducer, 必须使用 useReducer将reducer导入到组件中。 使用useReducer你必须给它传递一个初始状态，它会返回一个有状态的值和一个设置该状态的函数（在这个例子中就是 dispatch 函数）。\",\"useReducer 钩子接受 2 个参数：\",\"一个 reducer 函数\",\"一个初始的 state\",\"它返回如下内容：\",\"一个有状态的值\",\"一个 dispatch 函数（用来 “派发” 用户操作给 reducer）\"]},\"440\":{\"h\":\"2. 对比 useState 和 useReducer\",\"t\":[\"代码体积： 通常，在使用 useState 时，一开始只需要编写少量代码。而 useReducer 必须提前编写 reducer 函数和需要调度的 actions。但是，当多个事件处理程序以相似的方式修改 state 时，useReducer 可以减少代码量。\",\"可读性： 当状态更新逻辑足够简单时，useState 的可读性还行。但是，一旦逻辑变得复杂起来，它们会使组件变得臃肿且难以阅读。在这种情况下，useReducer 允许你将状态更新逻辑与事件处理程序分离开来。\",\"可调试性： 当使用 useState 出现问题时, 你很难发现具体原因以及为什么。 而使用 useReducer 时， 你可以在 reducer 函数中通过打印日志的方式来观察每个状态的更新，以及为什么要更新（来自哪个 action）。 如果所有 action 都没问题，你就知道问题出在了 reducer 本身的逻辑中。 然而，与使用 useState 相比，你必须单步执行更多的代码。\",\"可测试性： reducer 是一个不依赖于组件的纯函数。这就意味着你可以单独对它进行测试。一般来说，我们最好是在真实环境中测试组件，但对于复杂的状态更新逻辑，针对特定的初始状态和 action，断言 reducer 返回的特定状态会很有帮助。\",\"个人偏好： 并不是所有人都喜欢用 reducer，没关系，这是个人偏好问题。你可以随时在 useState 和 useReducer 之间切换，它们能做的事情是一样的！\"]},\"441\":{\"h\":\"3. 编写一个好的 reducers\",\"t\":[\"编写 reducers 时最好牢记以下两点：\",\"reducers 必须是纯粹的。 这一点和 状态更新函数 是相似的，reducers 在是在渲染时运行的！（actions 会排队直到下一次渲染)。 这就意味着 reducers 必须纯净，即当输入相同时，输出也是相同的。它们不应该包含异步请求、定时器或者任何副作用（对组件外部有影响的操作）。它们应该以不可变值的方式去更新 对象 和 数组。\",\"每个 action 都描述了一个单一的用户交互，即使它会引发数据的多个变化。 举个例子，如果用户在一个由 reducer 管理的表单（包含五个表单项）中点击了 重置按钮，那么 dispatch 一个 reset_form 的 action 比 dispatch 五个单独的 set_field 的 action 更加合理。如果你在一个 reducer 中打印了所有的 action 日志，那么这个日志应该是很清晰的，它能让你以某种步骤复现已发生的交互或响应。这对代码调试很有帮助！\"]},\"442\":{\"h\":\"使用 Context 深层传递参数\",\"t\":[\"通常来说，你会通过 props 将信息从父组件传递到子组件。但是，如果你必须通过许多中间组件向下传递 props，或是在你应用中的许多组件需要相同的信息，传递 props 会变的十分冗长和不便。Context 允许父组件向其下层无论多深的任何组件提供信息，而无需通过 props 显式传递。\",\"创建 Context 通过以下三个步骤来实现它：\",\"使用 createContext 创建 一个 context。\",\"// Context.js import { createContext } from 'react'; export const LevelContext = createContext(1); \",\"在需要数据的组件内 使用 useContext 获取刚刚创建的 context。\",\"import { LevelContext } from './Context.js'; import { useContext } from 'react'; const level = useContext(LevelContext); \",\"在指定数据的组件中使用 <Context创建名称.Provider value={值}> 提供 这个 context。\",\"import { LevelContext } from './Context.js'; <LevelContext.Provider value={level + 1}> {children} </LevelContext.Provider> \",\"Context 的使用场景：\",\"主题： 如果你的应用允许用户更改其外观（例如暗夜模式），你可以在应用顶层放一个 context provider，并在需要调整其外观的组件中使用该 context。\",\"当前账户： 许多组件可能需要知道当前登录的用户信息。将它放到 context 中可以方便地在树中的任何位置读取它。某些应用还允许你同时操作多个账户（例如，以不同用户的身份发表评论）。在这些情况下，将 UI 的一部分包裹到具有不同账户数据的 provider 中会很方便。\",\"路由： 大多数路由解决方案在其内部使用 context 来保存当前路由。这就是每个链接“知道”它是否处于活动状态的方式。如果你创建自己的路由库，你可能也会这么做。\",\"状态管理： 随着你的应用的增长，最终在靠近应用顶部的位置可能会有很多 state。许多遥远的下层组件可能想要修改它们。通常 将 reducer 与 context 搭配使用来管理复杂的状态并将其传递给深层的组件来避免过多的麻烦。\"]},\"443\":{\"h\":\"使用 Reducer 和 Context 拓展你的应用\"},\"444\":{\"h\":\"脱围机制\"},\"445\":{\"h\":\"使用 ref 引用值\",\"t\":[\"当你希望组件“记住”某些信息，但又不想让这些信息 触发新的渲染 时，你可以使用 ref：\",\"const ref = useRef(0); \",\"与 state 一样，ref 在重新渲染之间由 React 保留。但是，设置 state 会重新渲染组件，而更改 ref 不会！你可以通过 ref.current 属性访问该 ref 的当前值。\"]},\"446\":{\"h\":\"使用 ref 操作 DOM\",\"t\":[\"由于 React 会自动更新 DOM 以匹配渲染输出，因此组件通常不需要操作 DOM。但是，有时可能需要访问由 React 管理的 DOM 元素——例如聚焦节点、滚动到此节点，以及测量它的尺寸和位置。React 没有内置的方法来执行此类操作，所以需要一个指向 DOM 节点的 ref 来实现。例如，点击按钮将使用 ref 聚焦输入框：\"]},\"447\":{\"h\":\"使用 ref 回调管理 ref 列表\",\"t\":[\"将函数传递给 ref 属性。这称为 ref 回调。当需要设置 ref 时，React 将传入 DOM 节点来调用你的 ref 回调，并在需要清除它时传入 null 。这使你可以维护自己的数组或 Map，并通过其索引或某种类型的 ID 访问任何 ref。\"]},\"448\":{\"h\":\"访问另一个组件的 DOM 节点\",\"t\":[\"React 不允许组件访问其他组件的 DOM 节点。甚至自己的子组件也不行！这是故意的。Refs 是一种脱围机制，应该谨慎使用。手动操作 另一个 组件的 DOM 节点会使你的代码更加脆弱。\",\"相反，想要 暴露其 DOM 节点的组件必须选择该行为。一个组件可以指定将它的 ref “转发”给一个子组件。下面是 MyInput 如何使用 forwardRef API：\",\"import { forwardRef } from 'react'; const MyInput = forwardRef((props, ref) => { return <input {...props} ref={ref} />; }); \"]},\"449\":{\"h\":\"使用 useImperativeHandle 命令句柄限制暴露的API\",\"t\":[\" import { useRef } from 'react'; const realInputRef = useRef(null); useImperativeHandle(ref, () => ({ // 只暴露 focus，没有别的 focus() { realInputRef.current.focus(); }, })); return <input {...props} ref={realInputRef} />; \"]},\"450\":{\"h\":\"React 何时添加 refs\",\"t\":[\"在 React 中，每次更新都分为 两个阶段：\",\"在 渲染 阶段， React 调用你的组件来确定屏幕上应该显示什么。\",\"在 提交 阶段， React 把变更应用于 DOM。\",\"通常，你 不希望 在渲染期间访问 refs。这也适用于保存 DOM 节点的 refs。在第一次渲染期间，DOM 节点尚未创建，因此 ref.current 将为 null。在渲染更新的过程中，DOM 节点还没有更新。所以读取它们还为时过早。\",\"React 在提交阶段设置 ref.current。在更新 DOM 之前，React 将受影响的 ref.current 值设置为 null。更新 DOM 后，React 立即将它们设置到相应的 DOM 节点。\",\"通常，你将从事件处理器访问 refs。 如果你想使用 ref 执行某些操作，但没有特定的事件可以执行此操作，你可能需要一个 effect。我们将在下一页讨论 effect。\"]},\"451\":{\"h\":\"用 flushSync 同步更新 state\",\"t\":[\"flushSync 强制 React 同步更新（“刷新”）DOM。\"]},\"452\":{\"h\":\"使用 Effect 实现同步\",\"t\":[\"Effect 在 React 中是专有定义——由渲染引起的副作用。\",\"注意\",\"在开发环境中，React 将立即运行并额外清理一次 Effect。(为了检测Effect函数没有副作用，在多次挂载不会产生bug)\",\"在 React 中，JSX 的渲染必须是纯粹操作，不应该包含任何像修改 DOM 的副作用。\"]},\"453\":{\"h\":\"1. 如何编写 Effect\",\"t\":[\"编写 Effect 需要遵循以下三个规则：\",\"声明 Effect。默认情况下，Effect 会在每次渲染后都会执行。\",\"指定 Effect 依赖。大多数 Effect 应该按需执行，而不是在每次渲染后都执行。例如，淡入动画应该只在组件出现时触发。连接和断开服务器的操作只应在组件出现和消失时，或者切换聊天室时执行。文章将介绍如何通过指定依赖来控制如何按需执行。\",\"必要时添加清理（cleanup）函数。有时 Effect 需要指定如何停止、撤销，或者清除它的效果。例如，“连接”操作需要“断连”，“订阅”需要“退订”，“获取”既需要“取消”也需要“忽略”。你将学习如何使用 清理函数 来做到这一切。\",\"// 声明Effect import { useEffect } from 'react'; function MyComponent() { useEffect(() => { // 每次渲染后都会执行此处的代码 }); return <div />; } \"]},\"454\":{\"h\":\"2. 指定 Effect 依赖\",\"t\":[\"// 声明Effect import { useEffect } from 'react'; function MyComponent() { useEffect(() => { // 每次渲染后都会执行此处的代码 }, []); // 将 依赖数组 传入 useEffect 的第二个参数，以告诉 React 跳过不必要地重新运行 Effect。 return <div />; } \",\"注意\",\"依赖数组的不同，将导致不同的行为。\",\"useEffect(() => { // 这里的代码会在每次渲染后执行 }); useEffect(() => { // 这里的代码只会在组件挂载后执行 }, []); useEffect(() => { //这里的代码只会在每次渲染后，并且 a 或 b 的值与上次渲染不一致时执行 }, [a, b]); \",\"ref 具有 稳定 的标识：React 保证 每轮渲染中调用 useRef 所产生的引用对象时，获取到的对象引用总是相同的，即获取到的对象引用永远不会改变，所以它不会导致重新运行 Effect。\",\"如果 ref 是从父组件传递的，则必须在依赖项数组中指定它。\",\"function VideoPlayer({ src, isPlaying }) { const ref = useRef(null); useEffect(() => { if (isPlaying) { ref.current.play(); } else { ref.current.pause(); } }, [isPlaying]); // 等同于 function VideoPlayer({ src, isPlaying }) { const ref = useRef(null); useEffect(() => { if (isPlaying) { ref.current.play(); } else { ref.current.pause(); } }, [isPlaying, ref]); \"]},\"455\":{\"h\":\"3. 按需添加清理（cleanup）函数\",\"t\":[\"在useEffect 里return的函数就是清理（cleanup）函数。\",\"useEffect(() => { const connection = createConnection(); connection.connect(); // 清理（cleanup）函数 return () => { connection.disconnect(); }; }, []); \"]},\"456\":{\"h\":\"4. 如何处理在开发环境中 Effect 执行两次？\",\"t\":[\"在开发环境中，React 有意重复挂载你的组件，以查找像上面示例中的错误。正确的态度是“如何修复 Effect 以便它在重复挂载后能正常工作”，而不是“如何只运行一次 Effect”。\",\"通常的解决办法是实现清理函数。清理函数应该停止或撤销 Effect 正在执行的任何操作。简单来说，用户不应该感受到 Effect 只执行一次（如在生产环境中）和执行“挂载 → 清理 → 挂载”过程（如在开发环境中）之间的差异。\",\"在生产环境中，只会显示发送了一条获取请求。如果开发环境中，第二次请求给你造成了困扰，最好的方法是使用一种可以删除重复请求、并缓存请求响应的解决方案：\",\"function TodoList() { const todos = useSomeDataLibrary(`/api/user/${userId}/todos`); // ... \"]},\"457\":{\"h\":\"5. Effect的不同渲染\",\"t\":[\"初始渲染\",\"依赖项相同时的重新渲染\",\"所有的依赖项都是相同的，React 会忽略第二次渲染时的 Effect。所以此时 Effect 不会被调用。\",\"依赖项不同时的重新渲染\",\"组件卸载\",\"仅开发环境下的行为\",\"在 严格模式 下，React 在每次挂载组件后都会重新挂载组件（但是组件的 state 与 创建的 DOM 都会被保留）。它可以帮助你找出需要添加清理函数的 Effect，以及早暴露出像条件竞争那样的问题。此外，每当你在开发环境中保存更新代码文件时，React 也会重新挂载 Effect，不过这两种行为都仅限于开发环境。\"]},\"458\":{\"h\":\"6. Effect 的生命周期\",\"t\":[\"当组件被添加到屏幕上时，它会进行组件的 挂载。\",\"当组件接收到新的 props 或 state 时，通常是作为对交互的响应，它会进行组件的 更新。\",\"当组件从屏幕上移除时，它会进行组件的 卸载。\"]},\"459\":{\"h\":\"7. 从 Effect 提取非响应式逻辑\",\"t\":[\"使用 useEffectEvent 这个特殊的 Hook 从 Effect 中提取非响应式逻辑：\",\"import { useEffect, useEffectEvent } from 'react'; function ChatRoom({ roomId, theme }) { const onConnected = useEffectEvent(() => { showNotification('Connected!', theme); }); // ... \",\"Effect Event 的局限性在于你如何使用他们：\",\"只在 Effect 内部调用他们。\",\"永远不要把他们传给其他的组件或者 Hook。\"]},\"460\":{\"h\":\"8. 移除 Effect 依赖\",\"t\":[\"依赖应始终与代码匹配。\",\"当你对依赖不满意时，你需要编辑的是代码。\",\"抑制 linter 会导致非常混乱的错误，你应该始终避免它。\",\"要移除依赖，你需要向 linter “证明”它不是必需的。\",\"如果某些代码是为了响应特定交互，请将该代码移至事件处理的地方。\",\"如果 Effect 的不同部分因不同原因需要重新运行，请将其拆分为多个 Effect。\",\"如果你想根据以前的状态更新一些状态，传递一个更新函数。\",\"如果你想读取最新值而不“反应”它，请从 Effect 中提取出一个 Effect Event。\",\"在 JavaScript 中，如果对象和函数是在不同时间创建的，则它们被认为是不同的。\",\"尽量避免对象和函数依赖。将它们移到组件外或 Effect 内。\"]},\"461\":{\"h\":\"构建React管理系统\"},\"462\":{\"h\":\"技术选择\",\"t\":[\"React\",\"Vite\",\"TypeScript\",\"MUI\"]},\"463\":{\"h\":\"一、脚手架搭建\",\"t\":[\"使用 vite 构建脚手架\",\"npm create vite \"]},\"464\":{\"h\":\"TypeScript 与 TypeScript-SWC的区别\",\"t\":[\"swc是用rust写的，所实现的功能跟babel一样，es6语法转es5，但是速度比babel更快。\"]},\"465\":{\"h\":\"创建目录\",\"t\":[\" \"]},\"466\":{\"h\":\"简介\",\"t\":[\"本笔记主要用于整理、记录学习阮一峰TypeScript教程的过程，不涉及其他。\"]},\"467\":{\"h\":\"什么是 TypeScript\",\"t\":[\"TypeScript 是添加了类型系统的 JavaScript，适用于任何规模的项目\"]},\"468\":{\"h\":\"安装 TypeScript\",\"t\":[\"TypeScript 的命令行工具安装方法如下：\",\"npm install -g typescript \",\"以上命令会在全局环境下安装 tsc 命令，安装完成之后，我们就可以在任何地方执行 tsc 命令了。\",\"编译一个 TypeScript 文件很简单：\",\"tsc hello.ts \",\"注意\",\"我们约定使用 TypeScript 编写的文件以 .ts 为后缀，用 TypeScript 编写 React 时，以 .tsx 为后缀。\"]},\"469\":{\"h\":\"数据类型\"},\"470\":{\"h\":\"介绍\",\"t\":[\"TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。\",\"TypeScript数据类型：\",\"布尔类型（boolean）\",\"数字类型（number）\",\"字符串类型（string）\",\"数组类型（array）\",\"元组类型（tuple）\",\"枚举类型（enum）\",\"任意类型（any）\",\"null 和 undefined\",\"void类型\",\"never类型\",\"Symbol (ES6 中的新类型)\",\"BigInt (ES10 中的新类型)\"]},\"471\":{\"h\":\"布尔类型（boolean）\",\"t\":[\"let isDone: boolean = false; // 编译通过 // 后面约定，未强调编译错误的代码片段，默认为编译通过 \",\"注意，使用构造函数 Boolean 创造的对象不是布尔值：\",\"let createdByNewBoolean: boolean = new Boolean(1); // Type 'Boolean' is not assignable to type 'boolean'. // 'boolean' is a primitive, but 'Boolean' is a wrapper object. Prefer using 'boolean' when possible. \",\"事实上 new Boolean() 返回的是一个 Boolean 对象：\",\"let createdByNewBoolean: Boolean = new Boolean(1); \",\"直接调用 Boolean 也可以返回一个 boolean 类型：\",\"let createdByBoolean: boolean = Boolean(1); \"]},\"472\":{\"h\":\"数字类型（number）\",\"t\":[\"使用 number 定义数值类型：\",\"let decLiteral: number = 6; let hexLiteral: number = 0xf00d; // ES6 中的二进制表示法 let binaryLiteral: number = 0b1010; // ES6 中的八进制表示法 let octalLiteral: number = 0o744; let notANumber: number = NaN; let infinityNumber: number = Infinity; \",\"编译结果：\",\"var decLiteral = 6; var hexLiteral = 0xf00d; // ES6 中的二进制表示法 var binaryLiteral = 10; // ES6 中的八进制表示法 var octalLiteral = 484; var notANumber = NaN; var infinityNumber = Infinity; \",\"其中 0b1010 和 0o744 是 ES6 中的二进制和八进制表示法，它们会被编译为十进制数字。\"]},\"473\":{\"h\":\"字符串类型（string）\",\"t\":[\"使用 string 定义字符串类型：\",\"let myName: string = 'Tom'; let myAge: number = 25; // 模板字符串 let sentence: string = `Hello, my name is ${myName}. I'll be ${myAge + 1} years old next month.`; \",\"编译结果：\",\"var myName = 'Tom'; var myAge = 25; // 模板字符串 var sentence = \\\"Hello, my name is \\\" + myName + \\\". I'll be \\\" + (myAge + 1) + \\\" years old next month.\\\"; \"]},\"474\":{\"h\":\"数组类型（array）\",\"t\":[\"TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组：\",\"let list: number[] = [1, 2, 3]; \",\"第二种方式是使用数组泛型，Array<元素类型>：\",\"let list: Array<number> = [1, 2, 3]; \"]},\"475\":{\"h\":\"元组类型（tuple）\",\"t\":[\"元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string和number类型的元组。\",\"// Declare a tuple type let x: [string, number]; // Initialize it x = ['hello', 10]; // OK // Initialize it incorrectly x = [10, 'hello']; // Error \",\"当访问一个已知索引的元素，会得到正确的类型：\",\"console.log(x[0].substr(1)); // OK console.log(x[1].substr(1)); // Error, 'number' does not have 'substr' \",\"当访问一个越界的元素，会使用联合类型替代：\",\"x[3] = 'world'; // OK, 字符串可以赋值给(string | number)类型 console.log(x[5].toString()); // OK, 'string' 和 'number' 都有 toString x[6] = true; // Error, 布尔不是(string | number)类型 \"]},\"476\":{\"h\":\"枚举类型（enum）\",\"t\":[\"enum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。\",\"枚举使用 enum 关键字来定义：\",\"enum Days {Sun, Mon, Tue, Wed, Thu, Fri, Sat}; \",\"枚举成员会被赋值为从 0 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：\",\"enum Days {Sun, Mon, Tue, Wed, Thu, Fri, Sat}; console.log(Days[\\\"Sun\\\"] === 0); // true console.log(Days[\\\"Mon\\\"] === 1); // true console.log(Days[\\\"Tue\\\"] === 2); // true console.log(Days[\\\"Sat\\\"] === 6); // true console.log(Days[0] === \\\"Sun\\\"); // true console.log(Days[1] === \\\"Mon\\\"); // true console.log(Days[2] === \\\"Tue\\\"); // true console.log(Days[6] === \\\"Sat\\\"); // true \",\"事实上，上面的例子会被编译为：\",\"var Days; (function (Days) { Days[Days[\\\"Sun\\\"] = 0] = \\\"Sun\\\"; Days[Days[\\\"Mon\\\"] = 1] = \\\"Mon\\\"; Days[Days[\\\"Tue\\\"] = 2] = \\\"Tue\\\"; Days[Days[\\\"Wed\\\"] = 3] = \\\"Wed\\\"; Days[Days[\\\"Thu\\\"] = 4] = \\\"Thu\\\"; Days[Days[\\\"Fri\\\"] = 5] = \\\"Fri\\\"; Days[Days[\\\"Sat\\\"] = 6] = \\\"Sat\\\"; })(Days || (Days = {})); \"]},\"477\":{\"h\":\"任意类型（any）\",\"t\":[\"有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量：\",\"let notSure: any = 4; notSure = \\\"maybe a string instead\\\"; notSure = false; // okay, definitely a boolean \",\"在对现有代码进行改写的时候，any类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。 你可能认为 Object有相似的作用，就像它在其它语言中那样。 但是 Object类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：\",\"let notSure: any = 4; notSure.ifItExists(); // okay, ifItExists might exist at runtime notSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check) let prettySure: Object = 4; prettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'. \"]},\"478\":{\"h\":\"null 和 undefined\",\"t\":[\"TypeScript里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。和 void 相似，它们的本身的类型用处不是很大：\",\"let u: undefined = undefined; let n: null = null; \",\"与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：\",\"// 这样不会报错 let num: number = undefined; // 这样也不会报错 let u: undefined; let num: number = u; \",\"然而，当你指定了--strictNullChecks标记，null 和 undefined 只能赋值给 void 和它们各自。 这能避免 很多常见的问题。 也许在某处你想传入一个 string 或 null 或 undefined，你可以使用联合类型 string | null | undefined。 再次说明，稍后我们会介绍联合类型。\",\"注意\",\"TypeScript官方鼓励尽可能地使用--strictNullChecks\"]},\"479\":{\"h\":\"void类型\",\"t\":[\"JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数：\",\"function alertName(): void { alert('My name is Tome'); } \",\"声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null（只在 --strictNullChecks 未指定时）：\",\"let unusable: void = undefined; \"]},\"480\":{\"h\":\"never类型\",\"t\":[\"never类型表示的是那些永不存在的值的类型。 例如， never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never类型，当它们被永不为真的类型保护所约束时。\",\"never类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是never的子类型或可以赋值给never类型（除了never本身之外）。 即使 any也不可以赋值给never。\",\"// 返回never的函数必须存在无法达到的终点 function error(message: string): never { throw new Error(message); } // 推断的返回值类型为never function fail() { return error(\\\"Something failed\\\"); } // 返回never的函数必须存在无法达到的终点 function infiniteLoop(): never { while (true) { } } \"]},\"481\":{\"h\":\"Symbol (ES6 中的新类型)\",\"t\":[\"Symbol() 函数会返回 symbol 类型的值。每个从 Symbol() 返回的 symbol 值都是唯一的。\",\"const u: symbol = Symbol(); \",\"Symbol是ES6中的新类型,必须在tsconfig.json lib 中配置 ES6, 否则会报出如下错误：\",\"Type 'SymbolConstructor' has no call signatures.\"]},\"482\":{\"h\":\"BigInt (ES10 中的新类型)\",\"t\":[\"let u: bigint = BigInt(9007199254740991); \",\"BigInt是ES10中的新类型,必须在tsconfig.json lib 中配置 es2020, 否则会报出如下错误：\",\" Cannot find name 'BigInt'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2020' or later.\"]},\"483\":{\"h\":\"类型推论\"},\"484\":{\"h\":\"基础\",\"t\":[\"TypeScript 里，在有些没有明确指出类型的地方，类型推论会帮助提供类型。\",\"以下代码虽然没有指定类型，但是会在编译的时候报错：\",\"let myFavoriteNumber = \\\"seven\\\"; myFavoriteNumber = 7; // index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'. \",\"事实上，它等价于：\",\"let myFavoriteNumber: string = \\\"seven\\\"; myFavoriteNumber = 7; // index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'. \",\"如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：\",\"let myFavoriteNumber; myFavoriteNumber = \\\"seven\\\"; myFavoriteNumber = 7; \"]},\"485\":{\"h\":\"最佳通用类型\",\"t\":[\"当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型。例如，\",\"let x = [0, 1, null]; \",\"为了推断 x 的类型，我们必须考虑所有元素的类型。 这里有两种选择： number和null。 计算通用类型算法会考虑所有的候选类型，并给出一个兼容所有候选类型的类型。\",\"由于最终的通用类型取自候选类型，有些时候候选类型共享相同的通用类型，但是却没有一个类型能做为所有候选类型的类型。例如：\",\"let zoo = [new Rhino(), new Elephant(), new Snake()]; \",\"这里，我们想让 zoo 被推断为 Animal[]类型，但是这个数组里没有对象是 Animal 类型的，因此不能推断出这个结果。 为了更正，当候选类型不能使用的时候我们需要明确的指出类型：\",\"let zoo: Animal[] = [new Rhino(), new Elephant(), new Snake()]; \",\"如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型，(Rhino | Elephant | Snake)[]。\"]},\"486\":{\"h\":\"上下文类型\",\"t\":[\"TypeScript 类型推论也可能按照相反的方向进行。 这被叫做“按上下文归类”。按上下文归类会发生在表达式的类型与所处的位置相关时。比如：\",\"window.onmousedown = function (mouseEvent) { console.log(mouseEvent.button); //<- Error }; \",\"这个例子会得到一个类型错误，TypeScript 类型检查器使用Window.onmousedown函数的类型来推断右边函数表达式的类型。 因此，就能推断出 mouseEvent参数的类型了。 如果函数表达式不是在上下文类型的位置， mouseEvent参数的类型需要指定为any，这样也不会报错了。\",\"如果上下文类型表达式包含了明确的类型信息，上下文的类型被忽略。 重写上面的例子：\",\"window.onmousedown = function (mouseEvent: any) { console.log(mouseEvent.button); //<- Now, no error is given }; \",\"这个函数表达式有明确的参数类型注解，上下文类型被忽略。 这样的话就不报错了，因为这里不会使用到上下文类型。\",\"上下文归类会在很多情况下使用到。 通常包含函数的参数，赋值表达式的右边，类型断言，对象成员和数组字面量和返回值语句。 上下文类型也会做为最佳通用类型的候选类型。比如：\",\"function createZoo(): Animal[] { return [new Rhino(), new Elephant(), new Snake()]; } \",\"这个例子里，最佳通用类型有 4 个候选者：Animal，Rhino，Elephant和Snake。 当然， Animal会被做为最佳通用类型。\"]},\"487\":{\"h\":\"联合类型\",\"t\":[\"联合类型（Union Types）表示取值可以为多种类型中的一种。\",\"简单的例子:\",\"let myFavoriteNumber: string | number; myFavoriteNumber = \\\"seven\\\"; myFavoriteNumber = 7; \",\"let myFavoriteNumber: string | number; myFavoriteNumber = true; // index.ts(2,1): error TS2322: Type 'boolean' is not assignable to type 'string | number'. // Type 'boolean' is not assignable to type 'number'. \",\"联合类型使用 | 分隔每个类型。\",\"这里的 let myFavoriteNumber: string | number 的含义是，允许 myFavoriteNumber 的类型是 string 或者 number，但是不能是其他类型。\"]},\"488\":{\"h\":\"访问联合类型的属性或方法\",\"t\":[\"当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法：\",\"function getLength(something: string | number): number { return something.length; } // index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'. // Property 'length' does not exist on type 'number'. \",\"上例中，length 不是 string 和 number 的共有属性，所以会报错。\",\"访问 string 和 number 的共有属性是没问题的：\",\"function getString(something: string | number): string { return something.toString(); } \",\"联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型：\",\"let myFavoriteNumber: string | number; myFavoriteNumber = \\\"seven\\\"; console.log(myFavoriteNumber.length); // 5 myFavoriteNumber = 7; console.log(myFavoriteNumber.length); // 编译时报错 // index.ts(5,30): error TS2339: Property 'length' does not exist on type 'number'. \",\"上例中，第二行的 myFavoriteNumber 被推断成了 string，访问它的 length 属性不会报错。\",\"而第四行的 myFavoriteNumber 被推断成了 number，访问它的 length 属性时就报错了。\"]},\"489\":{\"h\":\"数组的类型\",\"t\":[\"在 TypeScript 中，数组类型有多种定义方式，比较灵活。\"]},\"490\":{\"h\":\"「类型 + 方括号」表示法\",\"t\":[\"最简单的方法是使用「类型 + 方括号」来表示数组：\",\"let fibonacci: number[] = [1, 1, 2, 3, 5]; \",\"数组的项中不允许出现其他的类型：\",\"let fibonacci: number[] = [1, '1', 2, 3, 5]; // Type 'string' is not assignable to type 'number'. \",\"数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：\",\"let fibonacci: number[] = [1, 1, 2, 3, 5]; fibonacci.push('8'); // Argument of type '\\\"8\\\"' is not assignable to parameter of type 'number'. \",\"上例中，push 方法只允许传入 number 类型的参数，但是却传了一个 \\\"8\\\" 类型的参数，所以报错了。这里 \\\"8\\\" 是一个字符串字面量类型，会在后续章节中详细介绍。\"]},\"491\":{\"h\":\"数组泛型\",\"t\":[\"我们也可以使用数组泛型（Array Generic） Array<elemType> 来表示数组：\",\"let fibonacci: Array<number> = [1, 1, 2, 3, 5]; \",\"关于泛型，可以参考泛型一章。\"]},\"492\":{\"h\":\"用接口表示数组\",\"t\":[\"接口也可以用来描述数组：\",\"interface NumberArray { [index: number]: number; } let fibonacci: NumberArray = [1, 1, 2, 3, 5]; \",\"NumberArray 表示：只要索引的类型是数字时，那么值的类型必须是数字。\",\"虽然接口也可以用来描述数组，但是我们一般不会这么做，因为这种方式比前两种方式复杂多了。\",\"不过有一种情况例外，那就是它常用来表示类数组。\"]},\"493\":{\"h\":\"类数组\",\"t\":[\"类数组（Array-like Object）不是数组类型，比如 arguments：\",\"function sum() { let args: number[] = arguments; } // Type 'IArguments' is missing the following properties from type 'number[]': pop, push, concat, join, and 24 more. \",\"上例中，arguments 实际上是一个类数组，不能用普通的数组的方式来描述，而应该用接口：\",\"function sum() { let args: { [index: number]: number; length: number; callee: Function; } = arguments; } \",\"在这个例子中，我们除了约束当索引的类型是数字时，值的类型必须是数字之外，也约束了它还有 length 和 callee 两个属性。\",\"事实上常用的类数组都有自己的接口定义，如 IArguments, NodeList, HTMLCollection 等：\",\"function sum() { let args: IArguments = arguments; } \",\"其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：\",\"interface IArguments { [index: number]: any; length: number; callee: Function; } \",\"关于内置对象，可以参考内置对象一章。\"]},\"494\":{\"h\":\"any 在数组中的应用\",\"t\":[\"一个比较常见的做法是，用 any 表示数组中允许出现任意类型：\",\"let list: any[] = ['xcatliu', 25, { website: 'http://xcatliu.com' }]; \"]},\"495\":{\"h\":\"对象的类型——接口\",\"t\":[\"在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。\"]},\"496\":{\"h\":\"什么是接口\",\"t\":[\"在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。\",\"TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。\"]},\"497\":{\"h\":\"简单的例子\",\"t\":[\"interface Person { name: string; age: number; } let tom: Person = { name: 'Tom', age: 25 }; \",\"上面的例子中，我们定义了一个接口 Person，接着定义了一个变量 tom，它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致。\",\"接口一般首字母大写。有的编程语言中会建议接口的名称加上 I 前缀。\",\"定义的变量比接口少了一些属性是不允许的：\",\"interface Person { name: string; age: number; } let tom: Person = { name: 'Tom' }; // index.ts(6,5): error TS2322: Type '{ name: string; }' is not assignable to type 'Person'. // Property 'age' is missing in type '{ name: string; }'. \",\"可见，赋值的时候，变量的形状必须和接口的形状保持一致。\"]},\"498\":{\"h\":\"可选属性\",\"t\":[\"有时我们希望不要完全匹配一个形状，那么可以用可选属性：\",\"interface Person { name: string; age?: number; } let tom: Person = { name: 'Tom' }; \",\"interface Person { name: string; age?: number; } let tom: Person = { name: 'Tom', age: 25 }; \",\"可选属性的含义是该属性可以不存在。\",\"这时仍然不允许添加未定义的属性：\",\"interface Person { name: string; age?: number; } let tom: Person = { name: 'Tom', age: 25, gender: 'male' }; // examples/playground/index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is not assignable to type 'Person'. // Object literal may only specify known properties, and 'gender' does not exist in type 'Person'. \"]},\"499\":{\"h\":\"任意属性\",\"t\":[\"有时候我们希望一个接口允许有任意的属性，可以使用如下方式：\",\"interface Person { name: string; age?: number; [propName: string]: any; } let tom: Person = { name: 'Tom', gender: 'male' }; \",\"使用 [propName: string] 定义了任意属性取 string 类型的值。\",\"需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：\",\"interface Person { name: string; age?: number; [propName: string]: string; } let tom: Person = { name: 'Tom', age: 25, gender: 'male' }; // index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string index type 'string'. // index.ts(7,5): error TS2322: Type '{ [x: string]: string | number; name: string; age: number; gender: string; }' is not assignable to type 'Person'. // Index signatures are incompatible. // Type 'string | number' is not assignable to type 'string'. // Type 'number' is not assignable to type 'string'. \",\"上例中，任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了。\",\"另外，在报错信息中可以看出，此时 { name: 'Tom', age: 25, gender: 'male' } 的类型被推断成了 { [x: string]: string | number; name: string; age: number; gender: string; }，这是联合类型和接口的结合。\",\"一个接口中只能定义一个任意属性。如果接口中有多个类型的属性，则可以在任意属性中使用联合类型：\",\"interface Person { name: string; age?: number; [propName: string]: string | number; } let tom: Person = { name: 'Tom', age: 25, gender: 'male' }; \"]},\"500\":{\"h\":\"只读属性\",\"t\":[\"有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 readonly 定义只读属性：\",\"interface Person { readonly id: number; name: string; age?: number; [propName: string]: any; } let tom: Person = { id: 89757, name: 'Tom', gender: 'male' }; tom.id = 9527; // index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property. \",\"上例中，使用 readonly 定义的属性 id 初始化后，又被赋值了，所以报错了。\",\"注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：\",\"interface Person { readonly id: number; name: string; age?: number; [propName: string]: any; } let tom: Person = { name: 'Tom', gender: 'male' }; tom.id = 89757; // index.ts(8,5): error TS2322: Type '{ name: string; gender: string; }' is not assignable to type 'Person'. // Property 'id' is missing in type '{ name: string; gender: string; }'. // index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property. \",\"上例中，报错信息有两处，第一处是在对 tom 进行赋值的时候，没有给 id 赋值。\",\"第二处是在给 tom.id 赋值的时候，由于它是只读属性，所以报错了。\"]},\"501\":{\"h\":\"函数的类型\"},\"502\":{\"h\":\"函数声明\",\"t\":[\"在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式（Function Expression）：\",\"// 函数声明（Function Declaration） function sum(x, y) { return x + y; } // 函数表达式（Function Expression） let mySum = function (x, y) { return x + y; }; \",\"一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单：\",\"function sum(x: number, y: number): number { return x + y; } \",\"注意，输入多余的（或者少于要求的）参数，是不被允许的：\",\"function sum(x: number, y: number): number { return x + y; } sum(1, 2, 3); // index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target. \",\"function sum(x: number, y: number): number { return x + y; } sum(1); // index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target. \"]},\"503\":{\"h\":\"函数表达式\",\"t\":[\"如果要我们现在写一个对函数表达式（Function Expression）的定义，可能会写成这样：\",\"let mySum = function (x: number, y: number): number { return x + y; }; \",\"这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 mySum，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 mySum 添加类型，则应该是这样：\",\"let mySum: (x: number, y: number) => number = function (x: number, y: number): number { return x + y; }; \",\"注意不要混淆了 TypeScript 中的 => 和 ES6 中的 =>。\",\"在 TypeScript 的类型定义中，=> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。\",\"在 ES6 中，=> 叫做箭头函数，应用十分广泛，可以参考 ES6 中的箭头函数。\"]},\"504\":{\"h\":\"用接口定义函数的形状\",\"t\":[\"我们也可以使用接口的方式来定义一个函数需要符合的形状：\",\"interface SearchFunc { (source: string, subString: string): boolean; } let mySearch: SearchFunc; mySearch = function(source: string, subString: string) { return source.search(subString) !== -1; } \",\"采用函数表达式|接口定义函数的方式时，对等号左侧进行类型限制，可以保证以后对函数名赋值时保证参数个数、参数类型、返回值类型不变。\"]},\"505\":{\"h\":\"可选参数\",\"t\":[\"前面提到，输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？\",\"与接口中的可选属性类似，我们用 ? 表示可选的参数：\",\"function buildName(firstName: string, lastName?: string) { if (lastName) { return firstName + ' ' + lastName; } else { return firstName; } } let tomcat = buildName('Tom', 'Cat'); let tom = buildName('Tom'); \",\"需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了：\",\"function buildName(firstName?: string, lastName: string) { if (firstName) { return firstName + ' ' + lastName; } else { return lastName; } } let tomcat = buildName('Tom', 'Cat'); let tom = buildName(undefined, 'Tom'); // index.ts(1,40): error TS1016: A required parameter cannot follow an optional parameter. \"]},\"506\":{\"h\":\"参数默认值\",\"t\":[\"在 ES6 中，我们允许给函数的参数添加默认值，TypeScript 会将添加了默认值的参数识别为可选参数：\",\"function buildName(firstName: string, lastName: string = 'Cat') { return firstName + ' ' + lastName; } let tomcat = buildName('Tom', 'Cat'); let tom = buildName('Tom'); \",\"此时就不受「可选参数必须接在必需参数后面」的限制了：\",\"function buildName(firstName: string = 'Tom', lastName: string) { return firstName + ' ' + lastName; } let tomcat = buildName('Tom', 'Cat'); let cat = buildName(undefined, 'Cat'); \",\"关于默认参数，可以参考 ES6 中函数参数的默认值。\"]},\"507\":{\"h\":\"剩余参数\",\"t\":[\"ES6 中，可以使用 ...rest 的方式获取函数中的剩余参数（rest 参数）：\",\"function push(array, ...items) { items.forEach(function(item) { array.push(item); }); } let a: any[] = []; push(a, 1, 2, 3); \",\"事实上，items 是一个数组。所以我们可以用数组的类型来定义它：\",\"function push(array: any[], ...items: any[]) { items.forEach(function(item) { array.push(item); }); } let a = []; push(a, 1, 2, 3); \",\"注意，rest 参数只能是最后一个参数，关于 rest 参数，可以参考 ES6 中的 rest 参数。\"]},\"508\":{\"h\":\"重载\",\"t\":[\"重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。\",\"比如，我们需要实现一个函数 reverse，输入数字 123 的时候，输出反转的数字 321，输入字符串 'hello' 的时候，输出反转的字符串 'olleh'。\",\"利用联合类型，我们可以这么实现：\",\"function reverse(x: number | string): number | string | void { if (typeof x === 'number') { return Number(x.toString().split('').reverse().join('')); } else if (typeof x === 'string') { return x.split('').reverse().join(''); } } \",\"然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。\",\"这时，我们可以使用重载定义多个 reverse 的函数类型：\",\"function reverse(x: number): number; function reverse(x: string): string; function reverse(x: number | string): number | string | void { if (typeof x === 'number') { return Number(x.toString().split('').reverse().join('')); } else if (typeof x === 'string') { return x.split('').reverse().join(''); } } \",\"上例中，我们重复定义了多次函数 reverse，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。\",\"注意，TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。\"]},\"509\":{\"h\":\"类型断言\",\"t\":[\"类型断言（Type Assertion）可以用来手动指定一个值的类型。\"]},\"510\":{\"h\":\"语法\",\"t\":[\"值 as 类型 \",\"或\",\"<类型>值 \",\"在 tsx 语法（React 的 jsx 语法的 ts 版）中必须使用前者，即 值 as 类型。\",\"形如 <Foo> 的语法在 tsx 中表示的是一个 ReactNode，在 ts 中除了表示类型断言之外，也可能是表示一个泛型。\",\"故建议大家在使用类型断言时，统一使用 值 as 类型 这样的语法，本书中也会贯彻这一思想。\"]},\"511\":{\"h\":\"类型断言的用途\",\"t\":[\"类型断言的常见用途有以下几种：\"]},\"512\":{\"h\":\"将一个联合类型断言为其中一个类型\",\"t\":[\"之前提到过，当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型中共有的属性或方法：\",\"interface Cat { name: string; run(): void; } interface Fish { name: string; swim(): void; } function getName(animal: Cat | Fish) { return animal.name; } \",\"而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型特有的属性或方法，比如：\",\"interface Cat { name: string; run(): void; } interface Fish { name: string; swim(): void; } function isFish(animal: Cat | Fish) { if (typeof animal.swim === 'function') { return true; } return false; } // index.ts:11:23 - error TS2339: Property 'swim' does not exist on type 'Cat | Fish'. // Property 'swim' does not exist on type 'Cat'. \",\"上面的例子中，获取 animal.swim 的时候会报错。\",\"此时可以使用类型断言，将 animal 断言成 Fish：\",\"interface Cat { name: string; run(): void; } interface Fish { name: string; swim(): void; } function isFish(animal: Cat | Fish) { if (typeof (animal as Fish).swim === 'function') { return true; } return false; } \",\"这样就可以解决访问 animal.swim 时报错的问题了。\",\"需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误：\",\"interface Cat { name: string; run(): void; } interface Fish { name: string; swim(): void; } function swim(animal: Cat | Fish) { (animal as Fish).swim(); } const tom: Cat = { name: 'Tom', run() { console.log('run') } }; swim(tom); // Uncaught TypeError: animal.swim is not a function` \",\"上面的例子编译时不会报错，但在运行时会报错：\",\"Uncaught TypeError: animal.swim is not a function` \",\"原因是 (animal as Fish).swim() 这段代码隐藏了 animal 可能为 Cat 的情况，将 animal 直接断言为 Fish 了，而 TypeScript 编译器信任了我们的断言，故在调用 swim() 时没有编译错误。\",\"可是 swim 函数接受的参数是 Cat | Fish，一旦传入的参数是 Cat 类型的变量，由于 Cat 上没有 swim 方法，就会导致运行时错误了。\",\"总之，使用类型断言时一定要格外小心，尽量避免断言后调用方法或引用深层属性，以减少不必要的运行时错误。\"]},\"513\":{\"h\":\"将一个父类断言为更加具体的子类\",\"t\":[\"当类之间有继承关系时，类型断言也是很常见的：\",\"class ApiError extends Error { code: number = 0; } class HttpError extends Error { statusCode: number = 200; } function isApiError(error: Error) { if (typeof (error as ApiError).code === 'number') { return true; } return false; } \",\"上面的例子中，我们声明了函数 isApiError，它用来判断传入的参数是不是 ApiError 类型，为了实现这样一个函数，它的参数的类型肯定得是比较抽象的父类 Error，这样的话这个函数就能接受 Error 或它的子类作为参数了。\",\"但是由于父类 Error 中没有 code 属性，故直接获取 error.code 会报错，需要使用类型断言获取 (error as ApiError).code。\",\"大家可能会注意到，在这个例子中有一个更合适的方式来判断是不是 ApiError，那就是使用 instanceof：\",\"class ApiError extends Error { code: number = 0; } class HttpError extends Error { statusCode: number = 200; } function isApiError(error: Error) { if (error instanceof ApiError) { return true; } return false; } \",\"上面的例子中，确实使用 instanceof 更加合适，因为 ApiError 是一个 JavaScript 的类，能够通过 instanceof 来判断 error 是否是它的实例。\",\"但是有的情况下 ApiError 和 HttpError 不是一个真正的类，而只是一个 TypeScript 的接口（interface），接口是一个类型，不是一个真正的值，它在编译结果中会被删除，当然就无法使用 instanceof 来做运行时判断了：\",\"interface ApiError extends Error { code: number; } interface HttpError extends Error { statusCode: number; } function isApiError(error: Error) { if (error instanceof ApiError) { return true; } return false; } // index.ts:9:26 - error TS2693: 'ApiError' only refers to a type, but is being used as a value here. \",\"此时就只能用类型断言，通过判断是否存在 code 属性，来判断传入的参数是不是 ApiError 了：\",\"interface ApiError extends Error { code: number; } interface HttpError extends Error { statusCode: number; } function isApiError(error: Error) { if (typeof (error as ApiError).code === 'number') { return true; } return false; } \"]},\"514\":{\"h\":\"将任何一个类型断言为\",\"t\":[\"理想情况下，TypeScript 的类型系统运转良好，每个值的类型都具体而精确。\",\"当我们引用一个在此类型上不存在的属性或方法时，就会报错：\",\"const foo: number = 1; foo.length = 1; // index.ts:2:5 - error TS2339: Property 'length' does not exist on type 'number'. \",\"上面的例子中，数字类型的变量 foo 上是没有 length 属性的，故 TypeScript 给出了相应的错误提示。\",\"这种错误提示显然是非常有用的。\",\"但有的时候，我们非常确定这段代码不会出错，比如下面这个例子：\",\"window.foo = 1; // index.ts:1:8 - error TS2339: Property 'foo' does not exist on type 'Window & typeof globalThis'. \",\"上面的例子中，我们需要将 window 上添加一个属性 foo，但 TypeScript 编译时会报错，提示我们 window 上不存在 foo 属性。\",\"此时我们可以使用 as any 临时将 window 断言为 any 类型：\",\"(window as any).foo = 1; \",\"在 any 类型的变量上，访问任何属性都是允许的。\",\"需要注意的是，将一个变量断言为 any 可以说是解决 TypeScript 中类型问题的最后一个手段。\",\"它极有可能掩盖了真正的类型错误，所以如果不是非常确定，就不要使用 as any。\",\"上面的例子中，我们也可以通过[扩展 window 的类型（TODO）][]解决这个错误，不过如果只是临时的增加 foo 属性，as any 会更加方便。\",\"总之，一方面不能滥用 as any，另一方面也不要完全否定它的作用，我们需要在类型的严格性和开发的便利性之间掌握平衡（这也是 TypeScript 的设计理念之一），才能发挥出 TypeScript 最大的价值。\"]},\"515\":{\"h\":\"将 断言为一个具体的类型\",\"t\":[\"在日常的开发中，我们不可避免的需要处理 any 类型的变量，它们可能是由于第三方库未能定义好自己的类型，也有可能是历史遗留的或其他人编写的烂代码，还可能是受到 TypeScript 类型系统的限制而无法精确定义类型的场景。\",\"遇到 any 类型的变量时，我们可以选择无视它，任由它滋生更多的 any。\",\"我们也可以选择改进它，通过类型断言及时的把 any 断言为精确的类型，亡羊补牢，使我们的代码向着高可维护性的目标发展。\",\"举例来说，历史遗留的代码中有个 getCacheData，它的返回值是 any：\",\"function getCacheData(key: string): any { return (window as any).cache[key]; } \",\"那么我们在使用它时，最好能够将调用了它之后的返回值断言成一个精确的类型，这样就方便了后续的操作：\",\"function getCacheData(key: string): any { return (window as any).cache[key]; } interface Cat { name: string; run(): void; } const tom = getCacheData('tom') as Cat; tom.run(); \",\"上面的例子中，我们调用完 getCacheData 之后，立即将它断言为 Cat 类型。这样的话明确了 tom 的类型，后续对 tom 的访问时就有了代码补全，提高了代码的可维护性。\"]},\"516\":{\"h\":\"类型断言的限制\",\"t\":[\"本小节的前置知识点：[结构类型系统（TODO）][]、[类型兼容性（TODO）][]\",\"从上面的例子中，我们可以总结出：\",\"联合类型可以被断言为其中一个类型\",\"父类可以被断言为子类\",\"任何类型都可以被断言为 any\",\"any 可以被断言为任何类型\",\"那么类型断言有没有什么限制呢？是不是任何一个类型都可以被断言为任何另一个类型呢？\",\"答案是否定的——并不是任何一个类型都可以被断言为任何另一个类型。\",\"具体来说，若 A 兼容 B，那么 A 能够被断言为 B，B 也能被断言为 A。\",\"下面我们通过一个简化的例子，来理解类型断言的限制：\",\"interface Animal { name: string; } interface Cat { name: string; run(): void; } let tom: Cat = { name: 'Tom', run: () => { console.log('run') } }; let animal: Animal = tom; \",\"我们知道，TypeScript 是结构类型系统，类型之间的对比只会比较它们最终的结构，而会忽略它们定义时的关系。\",\"在上面的例子中，Cat 包含了 Animal 中的所有属性，除此之外，它还有一个额外的方法 run。TypeScript 并不关心 Cat 和 Animal 之间定义时是什么关系，而只会看它们最终的结构有什么关系——所以它与 Cat extends Animal 是等价的：\",\"interface Animal { name: string; } interface Cat extends Animal { run(): void; } \",\"那么也不难理解为什么 Cat 类型的 tom 可以赋值给 Animal 类型的 animal 了——就像面向对象编程中我们可以将子类的实例赋值给类型为父类的变量。\",\"我们把它换成 TypeScript 中更专业的说法，即：Animal 兼容 Cat。\",\"当 Animal 兼容 Cat 时，它们就可以互相进行类型断言了：\",\"interface Animal { name: string; } interface Cat { name: string; run(): void; } function testAnimal(animal: Animal) { return (animal as Cat); } function testCat(cat: Cat) { return (cat as Animal); } \",\"这样的设计其实也很容易就能理解：\",\"允许 animal as Cat 是因为「父类可以被断言为子类」，这个前面已经学习过了\",\"允许 cat as Animal 是因为既然子类拥有父类的属性和方法，那么被断言为父类，获取父类的属性、调用父类的方法，就不会有任何问题，故「子类可以被断言为父类」\",\"需要注意的是，这里我们使用了简化的父类子类的关系来表达类型的兼容性，而实际上 TypeScript 在判断类型的兼容性时，比这种情况复杂很多，详细请参考[类型的兼容性（TODO)][]章节。\",\"总之，若 A 兼容 B，那么 A 能够被断言为 B，B 也能被断言为 A。\",\"同理，若 B 兼容 A，那么 A 能够被断言为 B，B 也能被断言为 A。\",\"所以这也可以换一种说法：\",\"要使得 A 能够被断言为 B，只需要 A 兼容 B 或 B 兼容 A 即可，这也是为了在类型断言时的安全考虑，毕竟毫无根据的断言是非常危险的。\",\"综上所述：\",\"联合类型可以被断言为其中一个类型\",\"父类可以被断言为子类\",\"任何类型都可以被断言为 any\",\"any 可以被断言为任何类型\",\"要使得 A 能够被断言为 B，只需要 A 兼容 B 或 B 兼容 A 即可\",\"其实前四种情况都是最后一个的特例。\"]},\"517\":{\"h\":\"双重断言\",\"t\":[\"既然：\",\"任何类型都可以被断言为 any\",\"any 可以被断言为任何类型\",\"那么我们是不是可以使用双重断言 as any as Foo 来将任何一个类型断言为任何另一个类型呢？\",\"interface Cat { run(): void; } interface Fish { swim(): void; } function testCat(cat: Cat) { return (cat as any as Fish); } \",\"在上面的例子中，若直接使用 cat as Fish 肯定会报错，因为 Cat 和 Fish 互相都不兼容。\",\"但是若使用双重断言，则可以打破「要使得 A 能够被断言为 B，只需要 A 兼容 B 或 B 兼容 A 即可」的限制，将任何一个类型断言为任何另一个类型。\",\"若你使用了这种双重断言，那么十有八九是非常错误的，它很可能会导致运行时错误。\",\"除非迫不得已，千万别用双重断言。\"]},\"518\":{\"h\":\"类型断言 vs 类型转换\",\"t\":[\"类型断言只会影响 TypeScript 编译时的类型，类型断言语句在编译结果中会被删除：\",\"function toBoolean(something: any): boolean { return something as boolean; } toBoolean(1); // 返回值为 1 \",\"在上面的例子中，将 something 断言为 boolean 虽然可以通过编译，但是并没有什么用，代码在编译后会变成：\",\"function toBoolean(something) { return something; } toBoolean(1); // 返回值为 1 \",\"所以类型断言不是类型转换，它不会真的影响到变量的类型。\",\"若要进行类型转换，需要直接调用类型转换的方法：\",\"function toBoolean(something: any): boolean { return Boolean(something); } toBoolean(1); // 返回值为 true \"]},\"519\":{\"h\":\"类型断言 vs 类型声明\",\"t\":[\"在这个例子中：\",\"function getCacheData(key: string): any { return (window as any).cache[key]; } interface Cat { name: string; run(): void; } const tom = getCacheData('tom') as Cat; tom.run(); \",\"我们使用 as Cat 将 any类型断言为了 Cat 类型。\",\"但实际上还有其他方式可以解决这个问题：\",\"function getCacheData(key: string): any { return (window as any).cache[key]; } interface Cat { name: string; run(): void; } const tom: Cat = getCacheData('tom'); tom.run(); \",\"上面的例子中，我们通过类型声明的方式，将 tom 声明为 Cat，然后再将 any 类型的 getCacheData('tom') 赋值给 Cat 类型的 tom。\",\"这和类型断言是非常相似的，而且产生的结果也几乎是一样的——tom 在接下来的代码中都变成了 Cat 类型。\",\"它们的区别，可以通过这个例子来理解：\",\"interface Animal { name: string; } interface Cat { name: string; run(): void; } const animal: Animal = { name: 'tom' }; let tom = animal as Cat; \",\"在上面的例子中，由于 Animal 兼容 Cat，故可以将 animal 断言为 Cat 赋值给 tom。\",\"但是若直接声明 tom 为 Cat 类型：\",\"interface Animal { name: string; } interface Cat { name: string; run(): void; } const animal: Animal = { name: 'tom' }; let tom: Cat = animal; // index.ts:12:5 - error TS2741: Property 'run' is missing in type 'Animal' but required in type 'Cat'. \",\"则会报错，不允许将 animal 赋值为 Cat 类型的 tom。\",\"这很容易理解，Animal 可以看作是 Cat 的父类，当然不能将父类的实例赋值给类型为子类的变量。\",\"深入的讲，它们的核心区别就在于：\",\"animal 断言为 Cat，只需要满足 Animal 兼容 Cat 或 Cat 兼容 Animal 即可\",\"animal 赋值给 tom，需要满足 Cat 兼容 Animal 才行 但是 Cat 并不兼容 Animal。\",\"而在前一个例子中，由于 getCacheData('tom') 是 any 类型，any 兼容 Cat，Cat 也兼容 any，故\",\"const tom = getCacheData('tom') as Cat; \",\"等价于\",\"const tom: Cat = getCacheData('tom'); \",\"知道了它们的核心区别，就知道了类型声明是比类型断言更加严格的。\",\"所以为了增加代码的质量，我们最好优先使用类型声明，这也比类型断言的 as 语法更加优雅。\"]},\"520\":{\"h\":\"类型断言 vs 泛型\",\"t\":[\"本小节的前置知识点：泛型\",\"还是这个例子：\",\"function getCacheData(key: string): any { return (window as any).cache[key]; } interface Cat { name: string; run(): void; } const tom = getCacheData('tom') as Cat; tom.run(); \",\"我们还有第三种方式可以解决这个问题，那就是泛型：\",\"function getCacheData<T>(key: string): T { return (window as any).cache[key]; } interface Cat { name: string; run(): void; } const tom = getCacheData<Cat>('tom'); tom.run(); \",\"通过给 getCacheData 函数添加了一个泛型 <T>，我们可以更加规范的实现对 getCacheData 返回值的约束，这也同时去除掉了代码中的 any，是最优的一个解决方案。\"]},\"521\":{\"h\":\"声明文件\",\"t\":[\"当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。\"]},\"522\":{\"h\":\"新语法索引\",\"t\":[\"由于本章涉及大量新语法，故在本章开头列出新语法的索引，方便大家在使用这些新语法时能快速查找到对应的讲解：\",\"declare var 声明全局变量\",\"declare function 声明全局方法\",\"declare class 声明全局类\",\"declare enum 声明全局枚举类型\",\"declare namespace 声明（含有子属性的）全局对象\",\"interface 和 type 声明全局类型\",\"export 导出变量\",\"export namespace 导出（含有子属性的）对象\",\"export default ES6 默认导出\",\"export = commonjs 导出模块\",\"export as namespace UMD 库声明全局变量\",\"declare global 扩展全局变量\",\"declare module 扩展模块\",\"/// \"]},\"523\":{\"h\":\"什么是声明语句\",\"t\":[\"假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 <script> 标签引入 jQuery，然后就可以使用全局变量 $ 或 jQuery 了。\",\"我们通常这样获取一个 id 是 foo 的元素：\",\"$(\\\"#foo\\\"); // or jQuery(\\\"#foo\\\"); \",\"但是在 ts 中，编译器并不知道 $ 或 jQuery 是什么东西：\",\"jQuery(\\\"#foo\\\"); // ERROR: Cannot find name 'jQuery'. \",\"这时，我们需要使用 declare var 来定义它的类型\",\"declare var jQuery: (selector: string) => any; jQuery(\\\"#foo\\\"); \",\"上例中，declare var 并没有真的定义一个变量，只是定义了全局变量 jQuery 的类型，仅仅会用于编译时的检查，在编译结果中会被删除。它编译结果是：\",\"jQuery(\\\"#foo\\\"); \",\"除了 declare var 之外，还有其他很多种声明语句，将会在后面详细介绍。\",\"什么是声明文件\",\"通常我们会把声明语句放到一个单独的文件（jQuery.d.ts）中，这就是声明文件:\",\"// src/jQuery.d.ts declare var jQuery: (selector: string) => any; \",\"// src/index.ts jQuery(\\\"#foo\\\"); \",\"声明文件必需以 .d.ts 为后缀。\",\"一般来说，ts 会解析项目中所有的 *.ts 文件，当然也包含以 .d.ts 结尾的文件。所以当我们将 jQuery.d.ts 放到项目中时，其他所有 *.ts 文件就都可以获得 jQuery 的类型定义了。\",\"/path/to/project ├── src | ├── index.ts | └── jQuery.d.ts └── tsconfig.json \",\"假如仍然无法解析，那么可以检查下 tsconfig.json 中的 files、include 和 exclude 配置，确保其包含了 jQuery.d.ts 文件。\",\"这里只演示了全局变量这种模式的声明文件，假如是通过模块导入的方式使用第三方库的话，那么引入声明文件又是另一种方式了，将会在后面详细介绍。\"]},\"524\":{\"h\":\"第三方声明文件\",\"t\":[\"我们可以直接下载下来使用，但是更推荐的是使用 @types 统一管理第三方库的声明文件。\",\"@types的使用方式很简单，直接用 npm 安装对应的声明模块即可，以 jQuery 举例：\",\"npm install @types/jquery --save-dev \",\"可以在这个页面搜索你需要的声明文件。\"]},\"525\":{\"h\":\"书写声明文件\",\"t\":[\"当一个第三方库没有提供声明文件时，我们就需要自己书写声明文件了。前面只介绍了最简单的声明文件内容，而真正书写一个声明文件并不是一件简单的事，以下会详细介绍如何书写声明文件。\",\"在不同的场景下，声明文件的内容和使用方式会有所区别。\",\"库的使用场景主要有以下几种：\",\"全局变量：通过 <script> 标签引入第三方库，注入全局变量\",\"npm 包：通过 import foo from 'foo' 导入，符合 ES6 模块规范\",\"UMD 库：既可以通过 <script> 标签引入，又可以通过 import 导入\",\"直接扩展全局变量：通过 <script> 标签引入后，改变一个全局变量的结构\",\"在 npm 包或 UMD 库中扩展全局变量：引用 npm 包或 UMD 库后，改变一个全局变量的结构\",\"模块插件：通过 <script> 或 import 导入后，改变另一个模块的结构\"]},\"526\":{\"h\":\"全局变量\",\"t\":[\"全局变量是最简单的一种场景，之前举的例子就是通过 <script> 标签引入 jQuery，注入全局变量 $ 和 jQuery。\",\"使用全局变量的声明文件时，如果是以 npm install @types/xxx --save-dev 安装的，则不需要任何配置。如果是将声明文件直接存放于当前项目中，则建议和其他源码一起放到 src 目录下（或者对应的源码目录下）：\",\"/path/to/project ├── src | ├── index.ts | └── jQuery.d.ts └── tsconfig.json \",\"如果没有生效，可以检查下 tsconfig.json 中的 files、include 和 exclude 配置，确保其包含了 jQuery.d.ts 文件。\",\"全局变量的声明文件主要有以下几种语法：\",\"declare var 声明全局变量\",\"declare function 声明全局方法\",\"declare class 声明全局类\",\"declare enum 声明全局枚举类型\",\"declare namespace 声明（含有子属性的）全局对象\",\"interface 和 type 声明全局类型\"]},\"527\":{\"h\":\"declare var\",\"t\":[\"在所有的声明语句中，declare var 是最简单的，如之前所学，它能够用来定义一个全局变量的类型。与其类似的，还有 declare let 和 declare const，使用 let 与使用 var 没有什么区别：\",\"// src/jQuery.d.ts declare let jQuery: (selector: string) => any; \",\"// src/index.ts jQuery(\\\"#foo\\\"); // 使用 declare let 定义的 jQuery 类型，允许修改这个全局变量 jQuery = function (selector) { return document.querySelector(selector); }; \",\"而当我们使用 const 定义时，表示此时的全局变量是一个常量，不允许再去修改它的值了:\",\"// src/jQuery.d.ts declare const jQuery: (selector: string) => any; jQuery('#foo'); // 使用 declare const 定义的 jQuery 类型，禁止修改这个全局变量 jQuery = function(selector) { return document.querySelector(selector); }; // ERROR: Cannot assign to 'jQuery' because it is a constant or a read-only property. \",\"一般来说，全局变量都是禁止修改的常量，所以大部分情况都应该使用 const 而不是 var 或 let。\",\"需要注意的是，声明语句中只能定义类型，切勿在声明语句中定义具体的实现:\",\"declare const jQuery = function(selector) { return document.querySelector(selector); }; // ERROR: An implementation cannot be declared in ambient contexts. \"]},\"528\":{\"h\":\"declare function\",\"t\":[\"declare function 用来定义全局函数的类型。jQuery 其实就是一个函数，所以也可以用 function 来定义：\",\"// src/jQuery.d.ts declare function jQuery(selector: string): any; \",\"// src/index.ts jQuery(\\\"#foo\\\"); \",\"在函数类型的声明语句中，函数重载也是支持的:\",\"// src/jQuery.d.ts declare function jQuery(selector: string): any; declare function jQuery(domReadyCallback: () => any): any; \",\"// src/index.ts jQuery(\\\"#foo\\\"); jQuery(function () { alert(\\\"Dom Ready!\\\"); }); \"]},\"529\":{\"h\":\"declare class\",\"t\":[\"当全局变量是一个类的时候，我们用 declare class 来定义它的类型:\",\"// src/Animal.d.ts declare class Animal { name: string; constructor(name: string); sayHi(): string; } \",\"// src/index.ts let cat = new Animal(\\\"Tom\\\"); \",\"同样的，declare class 语句也只能用来定义类型，不能用来定义具体的实现，比如定义 sayHi 方法的具体实现则会报错：\",\"// src/Animal.d.ts declare class Animal { name: string; constructor(name: string); sayHi() { return `My name is ${this.name}`; }; // ERROR: An implementation cannot be declared in ambient contexts. } \"]},\"530\":{\"h\":\"declare enum\",\"t\":[\"使用 declare enum 定义的枚举类型也称作外部枚举（Ambient Enums），举例如下:\",\"// src/Directions.d.ts declare enum Directions { Up, Down, Left, Right } \",\"// src/index.ts let directions = [ Directions.Up, Directions.Down, Directions.Left, Directions.Right, ]; \",\"与其他全局变量的类型声明一致，declare enum 仅用来定义类型，而不是具体的值。\",\"Directions.d.ts 仅仅会用于编译时的检查，声明文件里的内容在编译结果中会被删除。它编译结果是：\",\"var directions = [ Directions.Up, Directions.Down, Directions.Left, Directions.Right, ]; \",\"其中 Directions 是由第三方库定义好的全局变量。\"]},\"531\":{\"h\":\"declare namespace\",\"t\":[\"namespace 是 ts 早期时为了解决模块化而创造的关键字，中文称为命名空间。\",\"由于历史遗留原因，在早期还没有 ES6 的时候，ts 提供了一种模块化方案，使用 module 关键字表示内部模块。但由于后来 ES6 也使用了 module 关键字，ts 为了兼容 ES6，使用 namespace 替代了自己的 module，更名为命名空间。\",\"随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的 namespace，而推荐使用 ES6 的模块化方案了，故我们不再需要学习 namespace 的使用了。\",\"namespace 被淘汰了，但是在声明文件中，declare namespace 还是比较常用的，它用来表示全局变量是一个对象，包含很多子属性。\",\"比如 jQuery 是一个全局变量，它是一个对象，提供了一个 jQuery.ajax 方法可以调用，那么我们就应该使用 declare namespace jQuery 来声明这个拥有多个子属性的全局变量。\",\"// src/jQuery.d.ts declare namespace jQuery { function ajax(url: string, settings?: any): void; } \",\"// src/index.ts jQuery.ajax(\\\"/api/get_something\\\"); \",\"注意，在 declare namespace 内部，我们直接使用 function ajax 来声明函数，而不是使用 declare function ajax。类似的，也可以使用 const, class, enum 等语句:\",\"// src/jQuery.d.ts declare namespace jQuery { function ajax(url: string, settings?: any): void; const version: number; class Event { blur(eventType: EventType): void } enum EventType { CustomClick } } \",\"// src/index.ts jQuery.ajax(\\\"/api/get_something\\\"); console.log(jQuery.version); const e = new jQuery.Event(); e.blur(jQuery.EventType.CustomClick); \"]},\"532\":{\"h\":\"嵌套的命名空间\",\"t\":[\"如果对象拥有深层的层级，则需要用嵌套的 namespace 来声明深层的属性的类型:\",\"// src/jQuery.d.ts declare namespace jQuery { function ajax(url: string, settings?: any): void; namespace fn { function extend(object: any): void; } } \",\"// src/index.ts jQuery.ajax(\\\"/api/get_something\\\"); jQuery.fn.extend({ check: function () { return this.each(function () { this.checked = true; }); }, }); \",\"假如 jQuery 下仅有 fn 这一个属性（没有 ajax 等其他属性或方法），则可以不需要嵌套 namespace:\",\"// src/jQuery.d.ts declare namespace jQuery.fn { function extend(object: any): void; } \",\"// src/index.ts jQuery.fn.extend({ check: function () { return this.each(function () { this.checked = true; }); }, }); \"]},\"533\":{\"h\":\"interface 和 type\",\"t\":[\"相同处:\",\"两者都可以用来描述对象或函数，但语法不同。\",\"// 对象 type Point = { x: number; y: number; } interface Point { x: number; y: number; } // 函数 type setPoint = (x: number, y: number) => void; interface setPoint { (x:number, y:number):void; } \",\"二者都可以被继承\",\"interface 和 type 都可以继承。 另一个值得注意的是，接口和类型别名并不互斥。类型别名可以继承接口，反之亦然。只是在实现形式上，稍微有些差别。\",\"interface 继承 interface\",\"interface Person { name: string } interface Student extends Person { className: string } \",\"interface 继承 type\",\"type Person { name: string } interface Student extends Person { className: string } \",\"type 继承 type\",\"type Person { name: string } type Student = Person & { className: string } \",\"type 继承 interface\",\"interface Person { name: string } type Student = Person & { className: string } \",\"二者都可以被实现\",\"类可以实现interface 以及 type(除联合类型外)\",\"interface ICat{ setName(name:string): void; } class Cat implements ICat{ setName(name:string):void{ // todo } } // type type ICat = { setName(name:string): void; } class Cat implements ICat{ setName(name:string):void{ // todo } } \",\"上面提到了特殊情况，类无法实现联合类型, 是什么意思呢？\",\"type Person = { name: string; } | { setName(name:string): void }; // 无法对联合类型Person进行实现 // error: A class can only implement an object type or intersection of object types with statically known members. class Student implements Person { name= \\\"张三\\\"; setName(name:string):void{ // todo } } \",\"不同处:\",\"定义基本类型别名\",\"type可以定义基本类型别名, 但是interface无法定义, 如：\",\"type name = string \",\"声明联合类型\",\"type可以声明联合类型, 例如：\",\"type Student = {stuNo: number} | {classId: number} \",\"声明元组\",\"type可以声明 元组类型：\",\"type Data = [number, string]; \",\"声明合并\",\"如果你多次声明一个同名的接口，TypeScript 会将它们合并到一个声明中，并将它们视为一个接口。这称为声明合并， 例如：\",\"interface Person { name: string } interface Person { age: number } let user: Person = { name: \\\"Tolu\\\", age: 0, }; \",\"这种情况下，如果是type的话，重复使用Person是会报错的：\",\"type Person { name: string }; // Error: 标识符“Person”重复。ts(2300) type Person { age: number } \"]},\"534\":{\"h\":\"防止命名冲突\",\"t\":[\"暴露在最外层的 interface 或 type 会作为全局类型作用于整个项目中，我们应该尽可能的减少全局变量或全局类型的数量。故最好将他们放到 namespace 下:\",\"// src/jQuery.d.ts declare namespace jQuery { interface AjaxSettings { method?: 'GET' | 'POST' data?: any; } function ajax(url: string, settings?: AjaxSettings): void; } \",\"注意，在使用这个 interface 的时候，也应该加上 jQuery 前缀：\",\"// src/index.ts let settings: jQuery.AjaxSettings = { method: \\\"POST\\\", data: { name: \\\"foo\\\", }, }; jQuery.ajax(\\\"/api/post_something\\\", settings); \"]},\"535\":{\"h\":\"声明合并\",\"t\":[\"假如 jQuery 既是一个函数，可以直接被调用 jQuery('#foo')，又是一个对象，拥有子属性 jQuery.ajax()（事实确实如此），那么我们可以组合多个声明语句，它们会不冲突的合并起来:\",\"// src/jQuery.d.ts declare function jQuery(selector: string): any; declare namespace jQuery { function ajax(url: string, settings?: any): void; } \",\"// src/index.ts jQuery(\\\"#foo\\\"); jQuery.ajax(\\\"/api/get_something\\\"); \",\"关于声明合并的更多用法，可以查看声明合并章节。\"]},\"536\":{\"h\":\"npm 包\",\"t\":[\"一般我们通过 import foo from 'foo' 导入一个 npm 包，这是符合 ES6 模块规范的。\",\"在我们尝试给一个 npm 包创建声明文件之前，需要先看看它的声明文件是否已经存在。一般来说，npm 包的声明文件可能存在于两个地方：\",\"与该 npm 包绑定在一起。判断依据是 package.json 中有 types 字段，或者有一个 index.d.ts 声明文件。这种模式不需要额外安装其他包，是最为推荐的，所以以后我们自己创建 npm 包的时候，最好也将声明文件与 npm 包绑定在一起。\",\"发布到 @types 里。我们只需要尝试安装一下对应的 @types 包就知道是否存在该声明文件，安装命令是 npm install @types/foo --save-dev。这种模式一般是由于 npm 包的维护者没有提供声明文件，所以只能由其他人将声明文件发布到 @types 里了。 假如以上两种方式都没有找到对应的声明文件，那么我们就需要自己为它写声明文件了。由于是通过 import 语句导入的模块，所以声明文件存放的位置也有所约束，一般有两种方案：\",\"创建一个 node_modules/@types/foo/index.d.ts 文件，存放 foo 模块的声明文件。这种方式不需要额外的配置，但是 node_modules 目录不稳定，代码也没有被保存到仓库中，无法回溯版本，有不小心被删除的风险，故不太建议用这种方案，一般只用作临时测试。\",\"创建一个 types 目录，专门用来管理自己写的声明文件，将 foo 的声明文件放到 types/foo/index.d.ts 中。这种方式需要配置下 tsconfig.json 中的 paths 和 baseUrl 字段。\",\"目录结构：\",\"/path/to/project ├── src | └── index.ts ├── types | └── foo | └── index.d.ts └── tsconfig.json \",\"tsconfig.json 内容：\",\"{ \\\"compilerOptions\\\": { \\\"module\\\": \\\"commonjs\\\", \\\"baseUrl\\\": \\\"./\\\", \\\"paths\\\": { \\\"*\\\": [\\\"types/*\\\"] } } } \",\"如此配置之后，通过 import 导入 foo 的时候，也会去 types 目录下寻找对应的模块的声明文件了。\",\"注意 module 配置可以有很多种选项，不同的选项会影响模块的导入导出模式。这里我们使用了 commonjs 这个最常用的选项，后面的教程也都默认使用的这个选项。\",\"不管采用了以上两种方式中的哪一种，我都强烈建议大家将书写好的声明文件（通过给第三方库发 pull request，或者直接提交到 @types 里）发布到开源社区中，享受了这么多社区的优秀的资源，就应该在力所能及的时候给出一些回馈。只有所有人都参与进来，才能让 ts 社区更加繁荣。\",\"npm 包的声明文件主要有以下几种语法：\",\"export 导出变量\",\"export namespace 导出（含有子属性的）对象\",\"export default ES6 默认导出\",\"export = commonjs 导出模块\"]},\"537\":{\"h\":\"export\",\"t\":[\"npm 包的声明文件与全局变量的声明文件有很大区别。在 npm 包的声明文件中，使用 declare 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 export 导出，然后在使用方 import 导入后，才会应用到这些类型声明。\",\"export 的语法与普通的 ts 中的语法类似，区别仅在于声明文件中禁止定义具体的实现:\",\"// types/foo/index.d.ts export const name: string; export function getName(): string; export class Animal { constructor(name: string); sayHi(): string; } export enum Directions { Up, Down, Left, Right } export interface Options { data: any; } \",\"对应的导入和使用模块应该是这样：\",\"// src/index.ts import { name, getName, Animal, Directions, Options } from \\\"foo\\\"; console.log(name); let myName = getName(); let cat = new Animal(\\\"Tom\\\"); let directions = [ Directions.Up, Directions.Down, Directions.Left, Directions.Right, ]; let options: Options = { data: { name: \\\"foo\\\", }, }; \"]},\"538\":{\"h\":\"混用 declare 和 export\",\"t\":[\"我们也可以使用 declare 先声明多个变量，最后再用 export 一次性导出。上例的声明文件可以等价的改写为:\",\"// types/foo/index.d.ts declare const name: string; declare function getName(): string; declare class Animal { constructor(name: string); sayHi(): string; } declare enum Directions { Up, Down, Left, Right } interface Options { data: any; } export { name, getName, Animal, Directions, Options }; \",\"注意，与全局变量的声明文件类似，interface 前是不需要 declare 的。\"]},\"539\":{\"h\":\"export namespace\",\"t\":[\"与 declare namespace 类似，export namespace 用来导出一个拥有子属性的对象:\",\"// types/foo/index.d.ts export namespace foo { const name: string; namespace bar { function baz(): string; } } \",\"// src/index.ts import { foo } from \\\"foo\\\"; console.log(foo.name); foo.bar.baz(); \"]},\"540\":{\"h\":\"export default\",\"t\":[\"在 ES6 模块系统中，使用 export default 可以导出一个默认值，使用方可以用 import foo from 'foo' 而不是 import { foo } from 'foo' 来导入这个默认值。\",\"在类型声明文件中，export default 用来导出默认值的类型:\",\"// types/foo/index.d.ts export default function foo(): string; \",\"// src/index.ts import foo from \\\"foo\\\"; foo(); \",\"注意，只有 function、class 和 interface 可以直接默认导出，其他的变量需要先定义出来，再默认导出:\",\"// types/foo/index.d.ts export default enum Directions { // ERROR: Expression expected. Up, Down, Left, Right } \",\"上例中 export default enum 是错误的语法，需要使用 declare enum 定义出来，然后使用 export default 导出：\",\"// types/foo/index.d.ts declare enum Directions { Up, Down, Left, Right } export default Directions; \",\"针对这种默认导出，我们一般会将导出语句放在整个声明文件的最前面:\",\"// types/foo/index.d.ts export default Directions; declare enum Directions { Up, Down, Left, Right } \"]},\"541\":{\"h\":\"export =\",\"t\":[\"在 commonjs 规范中，我们用以下方式来导出一个模块：\",\"// 整体导出 module.exports = foo; // 单个导出 exports.bar = bar; \",\"在 ts 中，针对这种模块导出，有多种方式可以导入，第一种方式是 const ... = require：\",\"// 整体导入 const foo = require(\\\"foo\\\"); // 单个导入 const bar = require(\\\"foo\\\").bar; \",\"第二种方式是 import ... from，注意针对整体导出，需要使用 import * as 来导入：\",\"// 整体导入 import * as foo from \\\"foo\\\"; // 单个导入 import { bar } from \\\"foo\\\"; \",\"第三种方式是 import ... require，这也是 ts 官方推荐的方式：\",\"// 整体导入 import foo = require('foo'); // 单个导入 import bar = foo.bar; \",\"对于这种使用 commonjs 规范的库，假如要为它写类型声明文件的话，就需要使用到 export = 这种语法了:\",\"// types/foo/index.d.ts export = foo; declare function foo(): string; declare namespace foo { const bar: number; } \",\"需要注意的是，上例中使用了 export = 之后，就不能再单个导出 export { bar } 了。所以我们通过声明合并，使用 declare namespace foo 来将 bar 合并到 foo 里。\",\"准确地讲，export = 不仅可以用在声明文件中，也可以用在普通的 ts 文件中。实际上，import ... require 和 export = 都是 ts 为了兼容 AMD 规范和 commonjs 规范而创立的新语法，由于并不常用也不推荐使用，所以这里就不详细介绍了，感兴趣的可以看官方文档。\",\"由于很多第三方库是 commonjs 规范的，所以声明文件也就不得不用到 export = 这种语法了。但是还是需要再强调下，相比与 export =，我们更推荐使用 ES6 标准的 export default 和 export。\"]},\"542\":{\"h\":\"UMD 库\",\"t\":[\"既可以通过 <script> 标签引入，又可以通过 import 导入的库，称为 UMD 库。相比于 npm 包的类型声明文件，我们需要额外声明一个全局变量，为了实现这种方式，ts 提供了一个新语法 export as namespace。\"]},\"543\":{\"h\":\"export as namespace\",\"t\":[\"一般使用 export as namespace 时，都是先有了 npm 包的声明文件，再基于它添加一条 export as namespace 语句，即可将声明好的一个变量声明为全局变量，举例如下:\",\"// types/foo/index.d.ts export as namespace foo; export = foo; declare function foo(): string; declare namespace foo { const bar: number; } \",\"当然它也可以与 export default 一起使用：\",\"// types/foo/index.d.ts export as namespace foo; export default foo; declare function foo(): string; declare namespace foo { const bar: number; } \"]},\"544\":{\"h\":\"直接扩展全局变量\",\"t\":[\"有的第三方库扩展了一个全局变量，可是此全局变量的类型却没有相应的更新过来，就会导致 ts 编译错误，此时就需要扩展全局变量的类型。比如扩展 String 类型:\",\"interface String { prependHello(): string; } \\\"foo\\\".prependHello(); \",\"通过声明合并，使用 interface String 即可给 String 添加属性或方法。\",\"也可以使用 declare namespace 给已有的命名空间添加类型声明:\",\"// types/jquery-plugin/index.d.ts declare namespace JQuery { interface CustomOptions { bar: string; } } interface JQueryStatic { foo(options: JQuery.CustomOptions): string; } \",\"// src/index.ts jQuery.foo({ bar: \\\"\\\", }); \"]},\"545\":{\"h\":\"在 npm 包或 UMD 库中扩展全局变量\",\"t\":[\"如之前所说，对于一个 npm 包或者 UMD 库的声明文件，只有 export 导出的类型声明才能被导入。所以对于 npm 包或 UMD 库，如果导入此库之后会扩展全局变量，则需要使用另一种语法在声明文件中扩展全局变量的类型，那就是 declare global。\"]},\"546\":{\"h\":\"declare global\",\"t\":[\"使用 declare global 可以在 npm 包或者 UMD 库的声明文件中扩展全局变量的类型：\",\"// types/foo/index.d.ts declare global { interface String { prependHello(): string; } } export {}; \",\"// src/index.ts \\\"bar\\\".prependHello(); \",\"注意即使此声明文件不需要导出任何东西，仍然需要导出一个空对象，用来告诉编译器这是一个模块的声明文件，而不是一个全局变量的声明文件。\"]},\"547\":{\"h\":\"模块插件\",\"t\":[\"有时通过 import 导入一个模块插件，可以改变另一个原有模块的结构。此时如果原有模块已经有了类型声明文件，而插件模块没有类型声明文件，就会导致类型不完整，缺少插件部分的类型。ts 提供了一个语法 declare module，它可以用来扩展原有模块的类型。\",\"// types/moment-plugin/index.d.ts import * as moment from 'moment'; declare module 'moment' { export function foo(): moment.CalendarKey; } \",\"// src/index.ts import * as moment from \\\"moment\\\"; import \\\"moment-plugin\\\"; moment.foo(); \",\"declare module 也可用于在一个文件中一次性声明多个模块的类型:\",\"// types/foo-bar.d.ts declare module 'foo' { export interface Foo { foo: string; } } declare module 'bar' { export function bar(): string; } \",\"// src/index.ts import { Foo } from \\\"foo\\\"; import * as bar from \\\"bar\\\"; let f: Foo; bar.bar(); \"]},\"548\":{\"h\":\"声明文件中的依赖\",\"t\":[\"一个声明文件有时会依赖另一个声明文件中的类型，比如在前面的 declare module 的例子中，我们就在声明文件中导入了 moment，并且使用了 moment.CalendarKey 这个类型：\",\"// types/moment-plugin/index.d.ts import * as moment from 'moment'; declare module 'moment' { export function foo(): moment.CalendarKey; } \",\"除了可以在声明文件中通过 import 导入另一个声明文件中的类型之外，还有一个语法也可以用来导入另一个声明文件，那就是三斜线指令。\"]},\"549\":{\"h\":\"三斜线指令\",\"t\":[\"与 namespace 类似，三斜线指令也是 ts 在早期版本中为了描述模块之间的依赖关系而创造的语法。随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的三斜线指令来声明模块之间的依赖关系了。\",\"但是在声明文件中，它还是有一定的用武之地。\",\"类似于声明文件中的 import，它可以用来导入另一个声明文件。与 import 的区别是，当且仅当在以下几个场景下，我们才需要使用三斜线指令替代 import：\",\"当我们在书写一个全局变量的声明文件时\",\"当我们在书写一个全局变量的声明文件时\"]},\"550\":{\"h\":\"书写一个全局变量的声明文件\",\"t\":[\"这些场景听上去很拗口，但实际上很好理解——在全局变量的声明文件中，是不允许出现 import, export 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令\",\"// types/jquery-plugin/index.d.ts /// <reference types=\\\"jquery\\\" /> declare function foo(options: JQuery.AjaxSettings): string; \",\"// src/index.ts foo({}); \",\"三斜线指令的语法如上，/// 后面使用 xml 的格式添加了对 jquery 类型的依赖，这样就可以在声明文件中使用 JQuery.AjaxSettings 类型了。\",\"注意，三斜线指令必须放在文件的最顶端，三斜线指令的前面只允许出现单行或多行注释。\"]},\"551\":{\"h\":\"依赖一个全局变量的声明文件\",\"t\":[\"在另一个场景下，当我们需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 import 导入，当然也就必须使用三斜线指令来引入了:\",\"// types/node-plugin/index.d.ts /// <reference types=\\\"node\\\" /> export function foo(p: NodeJS.Process): string; \",\"// src/index.ts import { foo } from \\\"node-plugin\\\"; foo(global.process); \"]},\"552\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"书写一个全局变量的声明文件\",{\"0\":{\"550\":1}}],[\"书写声明文件\",{\"0\":{\"525\":1}}],[\"缺少插件部分的类型\",{\"1\":{\"547\":1}}],[\"缺点\",{\"1\":{\"34\":1}}],[\"仍然需要导出一个空对象\",{\"1\":{\"546\":1}}],[\"称为\",{\"1\":{\"542\":1}}],[\"感兴趣的可以看官方文档\",{\"1\":{\"541\":1}}],[\"准确地讲\",{\"1\":{\"541\":1}}],[\"准确地说\",{\"1\":{\"357\":1}}],[\"合并到\",{\"1\":{\"541\":1}}],[\"合并关联的\",{\"1\":{\"431\":1}}],[\"整体导入\",{\"1\":{\"541\":3}}],[\"整体导出\",{\"1\":{\"541\":1}}],[\"整个表达式将变成左侧的值\",{\"1\":{\"408\":1}}],[\"混用\",{\"0\":{\"538\":1}}],[\"混淆\",{\"0\":{\"89\":1}}],[\"社区更加繁荣\",{\"1\":{\"536\":1}}],[\"享受了这么多社区的优秀的资源\",{\"1\":{\"536\":1}}],[\"专门用来管理自己写的声明文件\",{\"1\":{\"536\":1}}],[\"拥有子属性\",{\"1\":{\"535\":1}}],[\"防止命名冲突\",{\"0\":{\"534\":1}}],[\"稍微有些差别\",{\"1\":{\"533\":1}}],[\"稍后我们会介绍联合类型\",{\"1\":{\"478\":1}}],[\"嵌套的命名空间\",{\"0\":{\"532\":1}}],[\"随着\",{\"1\":{\"531\":1,\"549\":1}}],[\"随着你的应用的增长\",{\"1\":{\"442\":1}}],[\"替代了自己的\",{\"1\":{\"531\":1}}],[\"替换元素\",{\"1\":{\"428\":1}}],[\"替换context中当前保存的策略对象\",{\"1\":{\"375\":1}}],[\"替换\",{\"1\":{\"15\":1,\"302\":1}}],[\"早期时为了解决模块化而创造的关键字\",{\"1\":{\"531\":1}}],[\"又是一个对象\",{\"1\":{\"535\":1}}],[\"又可以通过\",{\"1\":{\"525\":1,\"542\":1}}],[\"又被赋值了\",{\"1\":{\"500\":1}}],[\"库的声明文件中扩展全局变量的类型\",{\"1\":{\"546\":1}}],[\"库的声明文件\",{\"1\":{\"545\":1}}],[\"库的使用场景主要有以下几种\",{\"1\":{\"525\":1}}],[\"库后\",{\"1\":{\"525\":1}}],[\"库中扩展全局变量\",{\"0\":{\"545\":1},\"1\":{\"525\":1}}],[\"库\",{\"0\":{\"542\":1},\"1\":{\"525\":1,\"542\":1,\"545\":1,\"550\":1}}],[\"库声明全局变量\",{\"1\":{\"522\":1}}],[\"配置可以有很多种选项\",{\"1\":{\"536\":1}}],[\"配置\",{\"1\":{\"523\":1,\"526\":1}}],[\"配置文件说明\",{\"0\":{\"320\":1}}],[\"结尾的文件\",{\"1\":{\"523\":1}}],[\"结构类型系统\",{\"1\":{\"516\":1}}],[\"结构中存在多个相互矛盾或\",{\"1\":{\"431\":1}}],[\"结构中添加额外节点\",{\"1\":{\"395\":1}}],[\"结构型\",{\"1\":{\"328\":1}}],[\"仅用来定义类型\",{\"1\":{\"530\":1}}],[\"仅仅会用于编译时的检查\",{\"1\":{\"523\":1,\"530\":1}}],[\"仅开发环境下的行为\",{\"1\":{\"457\":1}}],[\"假如要为它写类型声明文件的话\",{\"1\":{\"541\":1}}],[\"假如以上两种方式都没有找到对应的声明文件\",{\"1\":{\"536\":1}}],[\"假如\",{\"1\":{\"532\":1,\"535\":1}}],[\"假如是通过模块导入的方式使用第三方库的话\",{\"1\":{\"523\":1}}],[\"假如仍然无法解析\",{\"1\":{\"523\":1}}],[\"假如我们想使用第三方库\",{\"1\":{\"523\":1}}],[\"假设我们有两个音乐播放器类\",{\"1\":{\"367\":1}}],[\"假设有一个支付系统\",{\"1\":{\"324\":1}}],[\"假设没有定义全局的notdefined\",{\"1\":{\"127\":1}}],[\"含有子属性的\",{\"1\":{\"522\":2,\"526\":1,\"536\":1}}],[\"泛型\",{\"0\":{\"520\":1},\"1\":{\"520\":1}}],[\"才会应用到这些类型声明\",{\"1\":{\"537\":1}}],[\"才行\",{\"1\":{\"519\":1}}],[\"才能让\",{\"1\":{\"536\":1}}],[\"才能获得对应的代码补全\",{\"1\":{\"521\":1}}],[\"才能发挥出\",{\"1\":{\"514\":1}}],[\"才能开放远程访问\",{\"1\":{\"286\":1}}],[\"才能执行后面的操作\",{\"1\":{\"245\":1}}],[\"才能得到内部变动后的值\",{\"1\":{\"232\":1}}],[\"千万别用双重断言\",{\"1\":{\"517\":1}}],[\"互相都不兼容\",{\"1\":{\"517\":1}}],[\"肯定会报错\",{\"1\":{\"517\":1}}],[\"既是一个函数\",{\"1\":{\"535\":1}}],[\"既可以通过\",{\"1\":{\"525\":1,\"542\":1}}],[\"既然\",{\"1\":{\"517\":1}}],[\"既需要\",{\"1\":{\"453\":1}}],[\"双重断言\",{\"0\":{\"517\":1}}],[\"双大括号\",{\"0\":{\"400\":1}}],[\"综上所述\",{\"1\":{\"516\":1}}],[\"毕竟毫无根据的断言是非常危险的\",{\"1\":{\"516\":1}}],[\"章节\",{\"1\":{\"516\":1}}],[\"兼容\",{\"1\":{\"516\":9,\"517\":2,\"519\":5}}],[\"兼容性\",{\"0\":{\"210\":1}}],[\"若要进行类型转换\",{\"1\":{\"518\":1}}],[\"若你使用了这种双重断言\",{\"1\":{\"517\":1}}],[\"若直接使用\",{\"1\":{\"517\":1}}],[\"若\",{\"1\":{\"516\":3}}],[\"若这个唯一的实例不存在\",{\"1\":{\"354\":1}}],[\"答案是否定的\",{\"1\":{\"516\":1}}],[\"历史遗留的代码中有个\",{\"1\":{\"515\":1}}],[\"举例如下\",{\"1\":{\"530\":1,\"543\":1}}],[\"举例\",{\"1\":{\"524\":1}}],[\"举例来说\",{\"1\":{\"515\":1}}],[\"举个例子\",{\"1\":{\"441\":1}}],[\"亡羊补牢\",{\"1\":{\"515\":1}}],[\"遇到\",{\"1\":{\"515\":1}}],[\"遇到没有分号结尾的一行\",{\"1\":{\"179\":1}}],[\"临时将\",{\"1\":{\"514\":1}}],[\"理想情况下\",{\"1\":{\"514\":1}}],[\"理由同上\",{\"1\":{\"217\":1}}],[\"确实使用\",{\"1\":{\"513\":1}}],[\"确保其包含了\",{\"1\":{\"523\":1,\"526\":1}}],[\"确保接口的职责单一\",{\"1\":{\"326\":1}}],[\"确保新行为不会违背基类的设计意图\",{\"1\":{\"325\":1}}],[\"确保子类不会破坏父类在系统中的使用\",{\"1\":{\"325\":1}}],[\"确保每个组件都有明确的边界\",{\"1\":{\"323\":1}}],[\"总之\",{\"1\":{\"512\":1,\"514\":1,\"516\":1}}],[\"总结\",{\"0\":{\"270\":1}}],[\"故当我们在书写一个全局变量的声明文件时\",{\"1\":{\"550\":1}}],[\"故不太建议用这种方案\",{\"1\":{\"536\":1}}],[\"故最好将他们放到\",{\"1\":{\"534\":1}}],[\"故我们不再需要学习\",{\"1\":{\"531\":1}}],[\"故在本章开头列出新语法的索引\",{\"1\":{\"522\":1}}],[\"故在调用\",{\"1\":{\"512\":1}}],[\"故可以将\",{\"1\":{\"519\":1}}],[\"故\",{\"1\":{\"514\":1,\"516\":1,\"519\":1}}],[\"故直接获取\",{\"1\":{\"513\":1}}],[\"故建议大家在使用类型断言时\",{\"1\":{\"510\":1}}],[\"了\",{\"1\":{\"512\":1,\"513\":1,\"516\":1,\"523\":1,\"541\":1}}],[\"了一层新逻辑\",{\"1\":{\"363\":1}}],[\"欺骗\",{\"1\":{\"512\":1}}],[\"版\",{\"1\":{\"510\":1}}],[\"版本\",{\"1\":{\"427\":1}}],[\"剩余参数\",{\"0\":{\"507\":1}}],[\"联合类型可以被断言为其中一个类型\",{\"1\":{\"516\":2}}],[\"联合类型的变量在被赋值的时候\",{\"1\":{\"488\":1}}],[\"联合类型使用\",{\"1\":{\"487\":1}}],[\"联合类型\",{\"0\":{\"487\":1},\"1\":{\"487\":1}}],[\"推断的返回值类型为never\",{\"1\":{\"480\":1}}],[\"推荐阅读facebook推出的通用eventemiiter库的源码\",{\"1\":{\"338\":1}}],[\"推荐使用\",{\"1\":{\"320\":1,\"428\":1}}],[\"未指定时\",{\"1\":{\"479\":1}}],[\"未强调编译错误的代码片段\",{\"1\":{\"471\":1}}],[\"很多常见的问题\",{\"1\":{\"478\":1}}],[\"很可能出现牵一发而动全身的情况导致项目出现严重的问题\",{\"1\":{\"226\":1}}],[\"很可能以后会再次出问题\",{\"1\":{\"220\":1}}],[\"枚举成员会被赋值为从\",{\"1\":{\"476\":1}}],[\"枚举使用\",{\"1\":{\"476\":1}}],[\"枚举类型\",{\"0\":{\"476\":1},\"1\":{\"470\":1}}],[\"像c\",{\"1\":{\"476\":1}}],[\"像babel这样的转换器会删除转换代码中的额外的逗号\",{\"1\":{\"177\":1}}],[\"各元素的类型不必相同\",{\"1\":{\"475\":1}}],[\"各个框架除了功能实现上有些许差异外\",{\"1\":{\"391\":1}}],[\"创造的对象不是布尔值\",{\"1\":{\"471\":1}}],[\"创建目录\",{\"0\":{\"465\":1}}],[\"创建目标对象\",{\"1\":{\"371\":1}}],[\"创建的\",{\"1\":{\"457\":1}}],[\"创建阶段\",{\"1\":{\"429\":1}}],[\"创建项目\",{\"1\":{\"388\":1,\"390\":1}}],[\"创建项目结构\",{\"0\":{\"235\":1,\"240\":1,\"249\":1,\"256\":1}}],[\"创建代理对象\",{\"1\":{\"371\":1}}],[\"创建对象字面量\",{\"1\":{\"354\":1}}],[\"创建byd构造函数\",{\"1\":{\"346\":1}}],[\"创建bmw构造函数\",{\"1\":{\"346\":1}}],[\"创建类型实例\",{\"1\":{\"346\":1}}],[\"创建实例\",{\"1\":{\"346\":3}}],[\"创建cat构造函数\",{\"1\":{\"346\":1}}],[\"创建dog构造函数\",{\"1\":{\"346\":1}}],[\"创建公共方法\",{\"1\":{\"346\":1}}],[\"创建型\",{\"1\":{\"328\":1}}],[\"创建专门的类或模块来处理每个职责\",{\"1\":{\"323\":1}}],[\"创建后台脚本\",{\"0\":{\"314\":1}}],[\"创建文件目录层级\",{\"0\":{\"313\":1}}],[\"创建\",{\"0\":{\"311\":1},\"1\":{\"442\":2}}],[\"创建一个\",{\"1\":{\"389\":1,\"536\":2}}],[\"创建一个实例\",{\"1\":{\"358\":1}}],[\"创建一个函数\",{\"1\":{\"354\":1}}],[\"创建一个具有该颜色的按钮\",{\"1\":{\"319\":1}}],[\"创建一个名为\",{\"1\":{\"311\":1,\"317\":1}}],[\"创建一个新目录来保存扩展的文件\",{\"1\":{\"310\":1}}],[\"创建一个全新的对象\",{\"1\":{\"277\":1}}],[\"创建新文件\",{\"1\":{\"19\":1}}],[\"任何类型都可以被断言为\",{\"1\":{\"516\":2,\"517\":1}}],[\"任何人可访问\",{\"1\":{\"283\":2}}],[\"任由它滋生更多的\",{\"1\":{\"515\":1}}],[\"任意属性的值允许是\",{\"1\":{\"499\":1}}],[\"任意属性\",{\"0\":{\"499\":1}}],[\"任意类型\",{\"0\":{\"477\":1},\"1\":{\"470\":1}}],[\"元组类型允许表示一个已知元素数量和类型的数组\",{\"1\":{\"475\":1}}],[\"元组类型\",{\"0\":{\"475\":1},\"1\":{\"470\":1,\"533\":1}}],[\"元素中找到所有对应的属性\",{\"1\":{\"398\":1}}],[\"元素来代替\",{\"1\":{\"395\":1}}],[\"元素\",{\"1\":{\"310\":1,\"446\":1}}],[\"介绍\",{\"0\":{\"470\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}],[\"记录学习阮一峰typescript教程的过程\",{\"1\":{\"466\":1}}],[\"记住对react来说重要的是组件在ui树中的位置\",{\"1\":{\"436\":1}}],[\"记住\",{\"1\":{\"421\":1,\"445\":1}}],[\"记住它\",{\"1\":{\"415\":1}}],[\"脚手架搭建\",{\"0\":{\"463\":1}}],[\"技术选择\",{\"0\":{\"462\":1}}],[\"技术文档\",{\"0\":{\"5\":1},\"1\":{\"5\":1},\"2\":{\"7\":1,\"9\":1}}],[\"证明\",{\"1\":{\"460\":1}}],[\"抑制\",{\"1\":{\"460\":1}}],[\"永远不要把他们传给其他的组件或者\",{\"1\":{\"459\":1}}],[\"永远不要在字符串中用\",{\"0\":{\"65\":1}}],[\"卸载\",{\"1\":{\"458\":1}}],[\"卸载阶段\",{\"1\":{\"429\":1}}],[\"严格模式\",{\"1\":{\"457\":1}}],[\"严格模式下上段代码的\",{\"1\":{\"274\":1}}],[\"挂载\",{\"1\":{\"456\":2,\"458\":1}}],[\"挂载组件到root标签下\",{\"1\":{\"380\":1}}],[\"稳定\",{\"1\":{\"454\":1}}],[\"跳过不必要地重新运行\",{\"1\":{\"454\":1}}],[\"跳到匹配的括号\",{\"1\":{\"13\":1}}],[\"清理\",{\"1\":{\"455\":1,\"456\":1}}],[\"清理函数应该停止或撤销\",{\"1\":{\"456\":1}}],[\"清理函数\",{\"1\":{\"453\":1}}],[\"清单文件的版本\",{\"1\":{\"320\":1}}],[\"清单manifest\",{\"1\":{\"318\":1}}],[\"忽略\",{\"1\":{\"453\":1}}],[\"退订\",{\"1\":{\"453\":1}}],[\"断连\",{\"1\":{\"453\":1}}],[\"断言为精确的类型\",{\"1\":{\"515\":1}}],[\"断言为一个具体的类型\",{\"0\":{\"515\":1}}],[\"断言为\",{\"1\":{\"514\":1,\"518\":1,\"519\":2}}],[\"断言成\",{\"1\":{\"512\":1}}],[\"断言\",{\"1\":{\"440\":1}}],[\"连接\",{\"1\":{\"453\":1}}],[\"连接和断开服务器的操作只应在组件出现和消失时\",{\"1\":{\"453\":1}}],[\"必要时添加清理\",{\"1\":{\"453\":1}}],[\"必须在tsconfig\",{\"1\":{\"481\":1,\"482\":1}}],[\"必须在清单\",{\"1\":{\"315\":1}}],[\"必须纯净\",{\"1\":{\"441\":1}}],[\"必须是纯粹的\",{\"1\":{\"441\":1}}],[\"必须提前编写\",{\"1\":{\"440\":1}}],[\"必须使用\",{\"1\":{\"439\":1}}],[\"必须要委托这个事件中心帮我们实现\",{\"1\":{\"338\":1}}],[\"必须要有一个共同的状态\",{\"1\":{\"333\":1}}],[\"必须能够替换其基类型\",{\"1\":{\"325\":1}}],[\"必须清除缓存\",{\"1\":{\"230\":1}}],[\"淡入动画应该只在组件出现时触发\",{\"1\":{\"453\":1}}],[\"刷新\",{\"1\":{\"451\":1}}],[\"刷新此页面\",{\"1\":{\"318\":1}}],[\"强制\",{\"1\":{\"451\":1}}],[\"强制把非数字转成数字\",{\"1\":{\"216\":1}}],[\"执行两次\",{\"0\":{\"456\":1}}],[\"执行某些操作\",{\"1\":{\"450\":1}}],[\"执行笔记本单元格并在下方插入\",{\"1\":{\"15\":1}}],[\"阶段\",{\"1\":{\"450\":2}}],[\"两个属性\",{\"1\":{\"493\":1}}],[\"两个阶段\",{\"1\":{\"450\":1}}],[\"两者都可以用来描述对象或函数\",{\"1\":{\"533\":1}}],[\"两者都应依赖于抽象\",{\"1\":{\"324\":1}}],[\"两者各自有自己的类型分别叫做\",{\"1\":{\"478\":1}}],[\"两者达到的目的是相同的\",{\"1\":{\"70\":1}}],[\"何时添加\",{\"0\":{\"450\":1}}],[\"手动操作\",{\"1\":{\"448\":1}}],[\"甚至自己的子组件也不行\",{\"1\":{\"448\":1}}],[\"节点还没有更新\",{\"1\":{\"450\":1}}],[\"节点尚未创建\",{\"1\":{\"450\":1}}],[\"节点会使你的代码更加脆弱\",{\"1\":{\"448\":1}}],[\"节点\",{\"0\":{\"448\":1},\"1\":{\"448\":1,\"450\":1}}],[\"节点来调用你的\",{\"1\":{\"447\":1}}],[\"节点的组件必须选择该行为\",{\"1\":{\"448\":1}}],[\"节点的\",{\"1\":{\"446\":1,\"450\":1}}],[\"回调\",{\"1\":{\"447\":2}}],[\"回调管理\",{\"0\":{\"447\":1}}],[\"聚焦输入框\",{\"1\":{\"446\":1}}],[\"滚动到此节点\",{\"1\":{\"446\":1}}],[\"滚动到顶部\",{\"1\":{\"22\":1}}],[\"脱围机制\",{\"0\":{\"444\":1}}],[\"拓展你的应用\",{\"0\":{\"443\":1}}],[\"搭配使用来管理复杂的状态并将其传递给深层的组件来避免过多的麻烦\",{\"1\":{\"442\":1}}],[\"搭建私有npm库\",{\"0\":{\"279\":1}}],[\"许多遥远的下层组件可能想要修改它们\",{\"1\":{\"442\":1}}],[\"许多组件可能需要知道当前登录的用户信息\",{\"1\":{\"442\":1}}],[\"知道了它们的核心区别\",{\"1\":{\"519\":1}}],[\"知道\",{\"1\":{\"442\":1}}],[\"路由\",{\"1\":{\"442\":1}}],[\"路径\",{\"1\":{\"250\":1}}],[\"路径自动补全插件\",{\"1\":{\"24\":1}}],[\"主题\",{\"1\":{\"442\":1}}],[\"主要目的是控制访问\",{\"1\":{\"370\":1}}],[\"主要目的是为了避免通过\",{\"1\":{\"338\":1}}],[\"主要用到的是单一功能原则\",{\"1\":{\"327\":1}}],[\"主要用于客户端的模块管理\",{\"1\":{\"247\":1}}],[\"五个单独的\",{\"1\":{\"441\":1}}],[\"管理的\",{\"1\":{\"446\":1}}],[\"管理的表单\",{\"1\":{\"441\":1}}],[\"管理npm仓库源\",{\"0\":{\"287\":1}}],[\"定时器或者任何副作用\",{\"1\":{\"441\":1}}],[\"定义出来\",{\"1\":{\"540\":1}}],[\"定义基本类型别名\",{\"1\":{\"533\":1}}],[\"定义时\",{\"1\":{\"527\":1}}],[\"定义只读属性\",{\"1\":{\"500\":1}}],[\"定义了任意属性取\",{\"1\":{\"499\":1}}],[\"定义字符串类型\",{\"1\":{\"473\":1}}],[\"定义数值类型\",{\"1\":{\"472\":1}}],[\"定义按钮对应的装饰器\",{\"1\":{\"363\":1}}],[\"定义打开按钮\",{\"1\":{\"363\":1}}],[\"定义一个原型对象\",{\"1\":{\"358\":1}}],[\"定义抽象工厂接口\",{\"1\":{\"350\":1}}],[\"定义发布者类\",{\"1\":{\"337\":1}}],[\"定义接口或抽象类作为高层次模块的依赖\",{\"1\":{\"327\":1}}],[\"定义\",{\"0\":{\"267\":1,\"272\":1,\"331\":1,\"336\":1,\"342\":1,\"345\":1,\"349\":1,\"353\":1,\"357\":1,\"362\":1,\"366\":1,\"374\":1},\"1\":{\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":1}}],[\"定义package\",{\"0\":{\"265\":1}}],[\"定义模块\",{\"1\":{\"260\":1}}],[\"定义模块代码\",{\"0\":{\"237\":1,\"242\":1,\"268\":1}}],[\"定义sea\",{\"0\":{\"257\":1}}],[\"定义require\",{\"0\":{\"250\":1}}],[\"定义有依赖的模块\",{\"1\":{\"246\":1,\"250\":1,\"253\":1}}],[\"定义没有依赖的模块\",{\"1\":{\"246\":1,\"250\":1,\"253\":1}}],[\"定义暴露模块\",{\"1\":{\"246\":1,\"253\":1}}],[\"定义的枚举类型也称作外部枚举\",{\"1\":{\"530\":1}}],[\"定义的属性\",{\"1\":{\"500\":1}}],[\"定义的变量比接口少了一些属性是不允许的\",{\"1\":{\"497\":1}}],[\"定义的\",{\"1\":{\"197\":1,\"527\":2}}],[\"没关系\",{\"1\":{\"440\":1}}],[\"没有\",{\"1\":{\"532\":1}}],[\"没有什么区别\",{\"1\":{\"527\":1}}],[\"没有给\",{\"1\":{\"500\":1}}],[\"没有类型是never的子类型或可以赋值给never类型\",{\"1\":{\"480\":1}}],[\"没有空值\",{\"1\":{\"479\":1}}],[\"没有别的\",{\"1\":{\"449\":1}}],[\"没有内置的方法来执行此类操作\",{\"1\":{\"446\":1}}],[\"没有用new\",{\"1\":{\"346\":2}}],[\"没有切换任何咖啡模式\",{\"1\":{\"333\":1}}],[\"没有按照数值的大小对数字进行排序\",{\"1\":{\"298\":1}}],[\"没有改变\",{\"1\":{\"224\":1}}],[\"没有回归测试\",{\"1\":{\"220\":1}}],[\"没有增加任何语义\",{\"1\":{\"197\":1}}],[\"没有私有属性或私有方法的概念\",{\"1\":{\"191\":1}}],[\"没有结尾逗号的\",{\"1\":{\"177\":1}}],[\"没有返回值\",{\"1\":{\"55\":1}}],[\"个候选者\",{\"1\":{\"486\":1}}],[\"个人偏好\",{\"1\":{\"440\":1}}],[\"个参数\",{\"1\":{\"302\":3,\"439\":1}}],[\"派发\",{\"1\":{\"439\":1}}],[\"钩子接受\",{\"1\":{\"439\":1}}],[\"赋予每个组件一个明确的身份\",{\"1\":{\"437\":1}}],[\"赋值为\",{\"1\":{\"519\":1}}],[\"赋值给\",{\"1\":{\"519\":3}}],[\"赋值的时候\",{\"1\":{\"497\":1,\"500\":1}}],[\"赋值表达式的右边\",{\"1\":{\"486\":1}}],[\"赋值运算符\",{\"1\":{\"47\":1}}],[\"赋值\",{\"1\":{\"34\":1,\"428\":1,\"500\":1}}],[\"深入的讲\",{\"1\":{\"519\":1}}],[\"深层传递参数\",{\"0\":{\"442\":1}}],[\"深度分层的\",{\"1\":{\"431\":1}}],[\"深拷贝\",{\"0\":{\"359\":1},\"1\":{\"359\":1}}],[\"状态更新函数\",{\"1\":{\"441\":1}}],[\"状态提升\",{\"0\":{\"433\":1},\"1\":{\"433\":1}}],[\"状态管理\",{\"0\":{\"430\":1},\"1\":{\"442\":1}}],[\"状态模式不仅仅是策略模式加上一个状态属性\",{\"1\":{\"332\":1}}],[\"状态模式中的对象在内部状态改变时会改变其行为\",{\"1\":{\"332\":1}}],[\"状态模式可以理解为就是策略模式\",{\"1\":{\"332\":1}}],[\"状态模式\",{\"0\":{\"330\":1},\"1\":{\"331\":1,\"332\":1}}],[\"销毁阶段\",{\"1\":{\"429\":1}}],[\"存在阶段\",{\"1\":{\"429\":1}}],[\"存放\",{\"1\":{\"536\":1}}],[\"存放所有插件的目录\",{\"1\":{\"283\":1}}],[\"存放软件所有软件包的目录\",{\"1\":{\"283\":1}}],[\"树中进行渲染的过程\",{\"1\":{\"429\":1}}],[\"树是表示实体之间关系的常见方式\",{\"1\":{\"412\":1}}],[\"生命周期分为三个阶段\",{\"1\":{\"429\":1}}],[\"生产级的\",{\"0\":{\"382\":1}}],[\"先声明多个变量\",{\"1\":{\"538\":1}}],[\"先将数组复制一份\",{\"1\":{\"428\":1}}],[\"先检查一下目标事件名有没有对应的监听函数队列\",{\"1\":{\"338\":1}}],[\"排序\",{\"1\":{\"428\":1}}],[\"排序方式\",{\"1\":{\"283\":1}}],[\"想要\",{\"1\":{\"448\":1}}],[\"想要减少重复的拷贝代码\",{\"1\":{\"427\":1}}],[\"想要更新嵌套对象\",{\"1\":{\"427\":1}}],[\"想要知道\",{\"1\":{\"277\":1}}],[\"直接扩展全局变量\",{\"0\":{\"544\":1},\"1\":{\"525\":1}}],[\"直接用\",{\"1\":{\"524\":1}}],[\"直接断言为\",{\"1\":{\"512\":1}}],[\"直接修改对象并不会触发重渲染\",{\"1\":{\"427\":1}}],[\"直接调用\",{\"1\":{\"34\":1,\"471\":1}}],[\"改变另一个模块的结构\",{\"1\":{\"525\":1}}],[\"改变一个全局变量的结构\",{\"1\":{\"525\":2}}],[\"改变其中一个不会影响另一个\",{\"1\":{\"423\":1}}],[\"改变事物\",{\"1\":{\"411\":1}}],[\"循环语句或其他嵌套函数内调用\",{\"1\":{\"422\":1}}],[\"购物车\",{\"1\":{\"421\":1}}],[\"购买\",{\"1\":{\"421\":1}}],[\"某些信息\",{\"1\":{\"445\":1}}],[\"某些应用还允许你同时操作多个账户\",{\"1\":{\"442\":1}}],[\"某些东西\",{\"1\":{\"421\":1}}],[\"某些用户可能希望将背景更改为不同的颜色\",{\"1\":{\"318\":1}}],[\"阻止默认行为\",{\"0\":{\"420\":1}}],[\"阻止传播\",{\"0\":{\"418\":1}}],[\"捕获事件对于路由或数据分析之类的代码很有用\",{\"1\":{\"419\":1}}],[\"捕获阶段事件\",{\"0\":{\"419\":1}}],[\"极少数情况下\",{\"1\":{\"419\":1}}],[\"冒泡\",{\"1\":{\"417\":1}}],[\"冒泡排序等\",{\"1\":{\"332\":1}}],[\"魔女宅急便\",{\"1\":{\"416\":1}}],[\"播放电影\",{\"1\":{\"418\":1}}],[\"播放\",{\"1\":{\"416\":1}}],[\"立即将它断言为\",{\"1\":{\"515\":1}}],[\"立即将它们设置到相应的\",{\"1\":{\"450\":1}}],[\"立即\",{\"1\":{\"415\":1}}],[\"过程\",{\"1\":{\"456\":1}}],[\"过程中\",{\"1\":{\"415\":1}}],[\"过于分散的事件处理程序可能会令人不知所措\",{\"1\":{\"438\":1}}],[\"过滤\",{\"1\":{\"307\":1,\"308\":1}}],[\"区别仅在于声明文件中禁止定义具体的实现\",{\"1\":{\"537\":1}}],[\"区别很微妙\",{\"1\":{\"415\":1}}],[\"区分大小写\",{\"1\":{\"15\":1}}],[\"错误\",{\"1\":{\"415\":1}}],[\"正在执行的任何操作\",{\"1\":{\"456\":1}}],[\"正在播放\",{\"1\":{\"418\":1}}],[\"正在上传\",{\"1\":{\"416\":1,\"418\":1}}],[\"正确的态度是\",{\"1\":{\"456\":1}}],[\"正确\",{\"1\":{\"415\":1}}],[\"正则都有属于自己的具体类型\",{\"1\":{\"34\":1}}],[\"正则匹配\",{\"1\":{\"15\":1}}],[\"点我\",{\"1\":{\"415\":1}}],[\"点击按钮将使用\",{\"1\":{\"446\":1}}],[\"点击后展示弹窗\",{\"1\":{\"363\":1}}],[\"点击链接可开启控制台查看后台脚本的控制台日志\",{\"1\":{\"316\":1}}],[\"名称以\",{\"1\":{\"415\":1}}],[\"名字都是给人读的\",{\"1\":{\"196\":1}}],[\"悬停\",{\"1\":{\"414\":1}}],[\"响应事件\",{\"0\":{\"414\":1}}],[\"构建脚手架\",{\"1\":{\"463\":1}}],[\"构建react管理系统\",{\"0\":{\"461\":1}}],[\"构建\",{\"0\":{\"431\":1}}],[\"构建工具使用依赖树来捆绑必要的代码以部署应用程序\",{\"1\":{\"412\":1}}],[\"构造函数\",{\"1\":{\"350\":1}}],[\"识别它们有助于理解和调试渲染性能问题\",{\"1\":{\"412\":1}}],[\"识别职责并进行分离\",{\"1\":{\"323\":1}}],[\"顶级组件会影响其下所有组件的渲染性能\",{\"1\":{\"412\":1}}],[\"视为树\",{\"0\":{\"412\":1}}],[\"视为一个\",{\"1\":{\"408\":1}}],[\"范式的能力\",{\"1\":{\"411\":1}}],[\"努力在你返回的\",{\"1\":{\"411\":1}}],[\"渲染\",{\"1\":{\"415\":1,\"450\":1}}],[\"渲染树有助于识别顶级组件和叶子组件\",{\"1\":{\"412\":1}}],[\"渲染树可能会在不同的渲染过程中发生变化\",{\"1\":{\"412\":1}}],[\"渲染树表示单次渲染中\",{\"1\":{\"412\":1}}],[\"渲染随时可能发生\",{\"1\":{\"411\":1}}],[\"渲染列表\",{\"0\":{\"410\":1}}],[\"传入\",{\"1\":{\"454\":1}}],[\"传播逻辑暂且不论\",{\"1\":{\"419\":1}}],[\"传播\",{\"1\":{\"417\":1}}],[\"传递一个更新函数\",{\"1\":{\"460\":1}}],[\"传递一个函数\",{\"1\":{\"415\":1}}],[\"传递\",{\"1\":{\"416\":1,\"442\":1}}],[\"传递给这两个组件\",{\"1\":{\"433\":1}}],[\"传递给事件处理函数的函数应直接传递\",{\"1\":{\"415\":1}}],[\"传递给\",{\"1\":{\"402\":1}}],[\"传给组件\",{\"1\":{\"410\":1}}],[\"本小节的前置知识点\",{\"1\":{\"516\":1,\"520\":1}}],[\"本书中也会贯彻这一思想\",{\"1\":{\"510\":1}}],[\"本笔记主要用于整理\",{\"1\":{\"466\":1}}],[\"本身的逻辑中\",{\"1\":{\"440\":1}}],[\"本身起到提示作用\",{\"1\":{\"410\":1}}],[\"本教程将构建一个扩展\",{\"1\":{\"310\":1}}],[\"天体物理学家\",{\"1\":{\"410\":1}}],[\"钱德拉塞卡\",{\"1\":{\"410\":1}}],[\"苏布拉马尼扬\",{\"1\":{\"410\":1}}],[\"朱利亚\",{\"1\":{\"410\":1}}],[\"莱温\",{\"1\":{\"410\":1}}],[\"珀西\",{\"1\":{\"410\":1}}],[\"物理学家\",{\"1\":{\"410\":1}}],[\"萨拉姆\",{\"1\":{\"410\":1}}],[\"阿卜杜勒\",{\"1\":{\"410\":1}}],[\"阿里巴巴脚手架\",{\"0\":{\"390\":1}}],[\"穆罕默德\",{\"1\":{\"410\":1}}],[\"化学家\",{\"1\":{\"410\":2}}],[\"莫利纳\",{\"1\":{\"410\":1}}],[\"马里奥\",{\"1\":{\"410\":1}}],[\"马丁\",{\"1\":{\"326\":1}}],[\"约翰逊\",{\"1\":{\"410\":1}}],[\"凯瑟琳\",{\"1\":{\"410\":1}}],[\"切勿在声明语句中定义具体的实现\",{\"1\":{\"527\":1}}],[\"切勿将数字放在\",{\"1\":{\"408\":1}}],[\"切换断点\",{\"1\":{\"21\":1}}],[\"切换搜索细节\",{\"1\":{\"20\":1}}],[\"切换侧栏可见性\",{\"1\":{\"20\":1}}],[\"切换编辑器布局\",{\"1\":{\"20\":1}}],[\"切换\",{\"1\":{\"14\":1}}],[\"切换工作区\",{\"1\":{\"14\":2}}],[\"切换自动换行\",{\"1\":{\"13\":1}}],[\"空值\",{\"1\":{\"408\":1}}],[\"✔\",{\"1\":{\"408\":2}}],[\"✔<\",{\"1\":{\"408\":1}}],[\"条件返回\",{\"0\":{\"408\":1}}],[\"条件渲染\",{\"0\":{\"407\":1}}],[\"条件语句如\",{\"0\":{\"133\":1}}],[\"父类可以被断言为子类\",{\"1\":{\"516\":3}}],[\"父组件将在名为\",{\"1\":{\"405\":1}}],[\"父节点\",{\"0\":{\"208\":1}}],[\"读取\",{\"1\":{\"402\":1}}],[\"读入并执行一个javascript文件\",{\"1\":{\"231\":1}}],[\"符合\",{\"1\":{\"402\":1,\"525\":1}}],[\"符号后的\",{\"1\":{\"399\":1}}],[\"符号的\",{\"1\":{\"398\":1}}],[\"符号或者像\",{\"1\":{\"398\":1}}],[\"样式中就已经见过这种写法了\",{\"1\":{\"400\":1}}],[\"样例应该包含插入文字或换行\",{\"1\":{\"62\":1}}],[\"逻辑或者引用动态的属性\",{\"1\":{\"399\":1}}],[\"逻辑操作符放在行首\",{\"0\":{\"145\":1}}],[\"经常会遇到需要用变量的方式读取这些属性的时候\",{\"1\":{\"398\":1}}],[\"经过验证的代码\",{\"1\":{\"324\":1}}],[\"规则\",{\"0\":{\"394\":1}}],[\"规范的\",{\"1\":{\"541\":1}}],[\"规范的库\",{\"1\":{\"541\":1}}],[\"规范而创立的新语法\",{\"1\":{\"541\":1}}],[\"规范和\",{\"1\":{\"541\":1}}],[\"规范中\",{\"1\":{\"541\":1}}],[\"规范\",{\"1\":{\"223\":1,\"270\":1}}],[\"启发\",{\"1\":{\"391\":1}}],[\"启动并守护任何应用程序\",{\"1\":{\"286\":1}}],[\"启动docker容器\",{\"1\":{\"285\":1}}],[\"启动的服务地址\",{\"1\":{\"282\":1}}],[\"启动的服务地址等信息\",{\"1\":{\"282\":1}}],[\"启动verdaccio\",{\"0\":{\"282\":1}}],[\"蚂蚁金服脚手架\",{\"0\":{\"389\":1}}],[\"官方推荐的方式\",{\"1\":{\"541\":1}}],[\"官方脚手架\",{\"0\":{\"388\":1}}],[\"官网\",{\"1\":{\"248\":1,\"255\":1}}],[\"框架\",{\"0\":{\"382\":1},\"1\":{\"383\":1,\"384\":1,\"385\":1,\"386\":1}}],[\"项目\",{\"0\":{\"381\":1},\"1\":{\"383\":1,\"384\":1,\"385\":1,\"386\":1}}],[\"详细请参考\",{\"1\":{\"516\":1}}],[\"详情\",{\"1\":{\"380\":1}}],[\"详见no\",{\"0\":{\"71\":1}}],[\"详见\",{\"0\":{\"55\":1}}],[\"便能执行不同的算法来得到我们想要的结果\",{\"1\":{\"375\":1}}],[\"便于未来的扩展和修改\",{\"1\":{\"325\":1}}],[\"环境类context并没有计算奖金的能力\",{\"1\":{\"375\":1}}],[\"奖金类\",{\"1\":{\"375\":1}}],[\"策略类\",{\"1\":{\"375\":1}}],[\"策略模式除了用来封装算法\",{\"1\":{\"374\":1}}],[\"策略模式属于对象行为模式\",{\"1\":{\"374\":1}}],[\"策略模式定义了一系列算法\",{\"1\":{\"374\":1}}],[\"策略模式\",{\"0\":{\"373\":1},\"1\":{\"332\":1}}],[\"业务规则\",{\"1\":{\"374\":1}}],[\"业务规则和用户界面逻辑放在同一个类中\",{\"1\":{\"323\":1}}],[\"且算法的变化不会影响使用算法的客户\",{\"1\":{\"374\":1}}],[\"且同时删除任意数量的项\",{\"1\":{\"302\":1}}],[\"尝试访问会被阻止\",{\"1\":{\"371\":1}}],[\"尝试在行为函数里拿到咖啡机实例的信息并输出\",{\"1\":{\"333\":1}}],[\"目录结构\",{\"1\":{\"536\":1}}],[\"目录\",{\"1\":{\"536\":1}}],[\"目录不稳定\",{\"1\":{\"536\":1}}],[\"目录下寻找对应的模块的声明文件了\",{\"1\":{\"536\":1}}],[\"目录下\",{\"1\":{\"526\":1}}],[\"目标对象\",{\"1\":{\"371\":1}}],[\"目的与好处\",{\"1\":{\"325\":1}}],[\"目的\",{\"1\":{\"324\":1,\"326\":1,\"327\":1}}],[\"目的就是为了让\",{\"1\":{\"276\":1}}],[\"适用于任何规模的项目\",{\"1\":{\"467\":1}}],[\"适配器类\",{\"1\":{\"367\":1}}],[\"适配器模式是一种结构型设计模式\",{\"1\":{\"366\":1}}],[\"适配器模式\",{\"0\":{\"365\":1}}],[\"适当命名\",{\"1\":{\"317\":1}}],[\"验证装饰器是否生效\",{\"1\":{\"363\":1}}],[\"旧逻辑\",{\"1\":{\"363\":1}}],[\"装饰器模式\",{\"0\":{\"361\":1},\"1\":{\"362\":1}}],[\"拷贝对象\",{\"1\":{\"359\":1}}],[\"拷贝下面配置文件到本地~\",{\"1\":{\"285\":1}}],[\"处理函数\",{\"1\":{\"419\":3}}],[\"处理循环引用\",{\"1\":{\"359\":1}}],[\"处理set类型\",{\"1\":{\"359\":1}}],[\"处理map类型\",{\"1\":{\"359\":1}}],[\"处理日期类型\",{\"1\":{\"359\":1}}],[\"处理正则类型\",{\"1\":{\"359\":1}}],[\"处理返回值的纯函数比副作用更容易\",{\"1\":{\"110\":1}}],[\"免得出现引用问题\",{\"1\":{\"358\":1}}],[\"克隆实例\",{\"1\":{\"358\":1}}],[\"共享一套数据\",{\"1\":{\"357\":1}}],[\"获取父类的属性\",{\"1\":{\"516\":1}}],[\"获取到的对象引用总是相同的\",{\"1\":{\"454\":1}}],[\"获取\",{\"1\":{\"453\":1,\"512\":1}}],[\"获取刚刚创建的\",{\"1\":{\"442\":1}}],[\"获取单例\",{\"1\":{\"354\":1}}],[\"获取对象指定的几个属性时\",{\"0\":{\"47\":1}}],[\"再基于它添加一条\",{\"1\":{\"543\":1}}],[\"再默认导出\",{\"1\":{\"540\":1}}],[\"再通过\",{\"1\":{\"433\":1}}],[\"再次说明\",{\"1\":{\"478\":1}}],[\"再次渲染组件\",{\"1\":{\"422\":1}}],[\"再次获取单例\",{\"1\":{\"354\":1}}],[\"再次调用时\",{\"1\":{\"354\":1}}],[\"再加巧克力\",{\"1\":{\"333\":2}}],[\"再加香草糖浆\",{\"1\":{\"333\":3}}],[\"文章将介绍如何通过指定依赖来控制如何按需执行\",{\"1\":{\"453\":1}}],[\"文本框\",{\"1\":{\"350\":1}}],[\"文件中\",{\"1\":{\"541\":1}}],[\"文件中书写类似\",{\"1\":{\"393\":1}}],[\"文件就都可以获得\",{\"1\":{\"523\":1}}],[\"文件很简单\",{\"1\":{\"468\":1}}],[\"文件\",{\"1\":{\"223\":1,\"317\":1,\"523\":2,\"526\":1,\"536\":1}}],[\"文件名需要和函数名一致\",{\"0\":{\"194\":1}}],[\"文件结尾空一行\",{\"0\":{\"159\":1}}],[\"针对这种模块导出\",{\"1\":{\"541\":1}}],[\"针对这种默认导出\",{\"1\":{\"540\":1}}],[\"针对特定的初始状态和\",{\"1\":{\"440\":1}}],[\"针对firefox浏览器\",{\"1\":{\"350\":1}}],[\"针对chrome浏览器\",{\"1\":{\"350\":1}}],[\"针对性的接口\",{\"1\":{\"326\":1}}],[\"报错信息有两处\",{\"1\":{\"500\":1}}],[\"报错\",{\"1\":{\"350\":1}}],[\"静态方法是属于类本身\",{\"1\":{\"350\":1}}],[\"静态方法\",{\"1\":{\"350\":1}}],[\"静态方法不需要使用\",{\"1\":{\"98\":1}}],[\"情景\",{\"1\":{\"350\":1}}],[\"情况相同\",{\"0\":{\"128\":1}}],[\"比这种情况复杂很多\",{\"1\":{\"516\":1}}],[\"比较灵活\",{\"1\":{\"489\":1}}],[\"比\",{\"1\":{\"441\":1}}],[\"比亚迪\",{\"1\":{\"346\":1}}],[\"比如在前面的\",{\"1\":{\"548\":1}}],[\"比如扩展\",{\"1\":{\"544\":1}}],[\"比如定义\",{\"1\":{\"529\":1}}],[\"比如来自用户输入或第三方代码库\",{\"1\":{\"477\":1}}],[\"比如原本在父类中正常工作的代码\",{\"1\":{\"325\":1}}],[\"比如obj1\",{\"1\":{\"275\":1}}],[\"比如下面的代码\",{\"1\":{\"275\":1}}],[\"比如下面代码\",{\"1\":{\"275\":1}}],[\"比如下面这段代码\",{\"1\":{\"274\":1}}],[\"比如下面这个例子\",{\"1\":{\"514\":1}}],[\"比如下面这个\",{\"1\":{\"76\":1}}],[\"比如\",{\"1\":{\"259\":1,\"275\":1,\"332\":1,\"409\":1,\"475\":1,\"486\":2,\"493\":1,\"508\":1,\"512\":1,\"531\":1}}],[\"比如由于\",{\"0\":{\"184\":1}}],[\"宝马\",{\"1\":{\"346\":1}}],[\"另外\",{\"1\":{\"499\":1}}],[\"另一方面也不要完全否定它的作用\",{\"1\":{\"514\":1}}],[\"另一个值得注意的是\",{\"1\":{\"533\":1}}],[\"另一个\",{\"1\":{\"448\":1}}],[\"另一种方法\",{\"1\":{\"346\":1}}],[\"另保存\",{\"1\":{\"19\":1}}],[\"工厂模式的简单之处\",{\"1\":{\"345\":1}}],[\"工具栏图标\",{\"1\":{\"317\":1}}],[\"工具栏图标的名称也包含在\",{\"1\":{\"317\":1}}],[\"迭代器模式\",{\"0\":{\"341\":1},\"1\":{\"342\":1}}],[\"迭代器和生成器\",{\"1\":{\"213\":1}}],[\"私下沟通\",{\"1\":{\"338\":1}}],[\"收到\",{\"1\":{\"337\":1}}],[\"收集记录各种常用的网站站点\",{\"1\":{\"5\":1}}],[\"订阅模式之间的区别\",{\"1\":{\"339\":1}}],[\"订阅模式的区别\",{\"0\":{\"339\":1}}],[\"订阅模式\",{\"0\":{\"338\":1},\"1\":{\"338\":1}}],[\"订阅\",{\"1\":{\"336\":1,\"453\":1}}],[\"观察者模式和发布\",{\"1\":{\"339\":1}}],[\"观察者模式与发布\",{\"0\":{\"339\":1}}],[\"观察者模式\",{\"0\":{\"335\":1},\"1\":{\"336\":1}}],[\"加点奶\",{\"1\":{\"333\":4}}],[\"加载模块是同步的\",{\"1\":{\"270\":1}}],[\"加载的是一个对象\",{\"1\":{\"263\":1}}],[\"加载某个模块\",{\"1\":{\"231\":1}}],[\"初始渲染\",{\"1\":{\"457\":1}}],[\"初始化后\",{\"1\":{\"500\":1}}],[\"初始化阶段\",{\"1\":{\"429\":1}}],[\"初始化牛奶的存储量\",{\"1\":{\"333\":1}}],[\"初始化状态\",{\"1\":{\"333\":1}}],[\"初始实现为creditcardpayment类\",{\"1\":{\"324\":1}}],[\"咖啡机现在的牛奶存储量是\",{\"1\":{\"333\":5}}],[\"咖啡机\",{\"1\":{\"333\":1}}],[\"场景设定\",{\"1\":{\"333\":1,\"367\":1}}],[\"疑问\",{\"0\":{\"332\":1}}],[\"笔记\",{\"2\":{\"329\":1,\"334\":1,\"340\":1,\"343\":1,\"347\":1,\"351\":1,\"355\":1,\"360\":1,\"364\":1,\"368\":1,\"372\":1,\"376\":1}}],[\"号的是接下来要学习的\",{\"1\":{\"328\":1}}],[\"阐述了设计模式领域的开创性成果\",{\"1\":{\"328\":1}}],[\"容器\",{\"1\":{\"327\":1}}],[\"容易引起命名冲突或数据不安全\",{\"1\":{\"224\":1}}],[\"控制反转\",{\"1\":{\"327\":1}}],[\"易于理解和维护\",{\"1\":{\"326\":1}}],[\"胖接口\",{\"1\":{\"326\":1}}],[\"客户端只依赖那些它实际使用的方法\",{\"1\":{\"326\":1}}],[\"违反后果\",{\"1\":{\"325\":1,\"326\":1}}],[\"利用联合类型\",{\"1\":{\"508\":1}}],[\"利用抽象和多态机制\",{\"1\":{\"325\":1}}],[\"利用多态而非类型检查\",{\"1\":{\"325\":1}}],[\"利斯科夫\",{\"1\":{\"325\":1}}],[\"明确父类接口所表达的契约\",{\"1\":{\"325\":1}}],[\"明确你想用那个参数\",{\"1\":{\"74\":1}}],[\"鼓励设计更为抽象的基类和符合契约的子类\",{\"1\":{\"325\":1}}],[\"鼓励使用更多文件\",{\"1\":{\"105\":1}}],[\"促进设计灵活性\",{\"1\":{\"325\":1}}],[\"促进复用\",{\"1\":{\"324\":1}}],[\"换句话说\",{\"1\":{\"325\":1,\"326\":1,\"423\":1,\"505\":1}}],[\"子类可以被断言为父类\",{\"1\":{\"516\":1}}],[\"子类原型对象\",{\"1\":{\"358\":1}}],[\"子类应谨慎添加新行为\",{\"1\":{\"325\":1}}],[\"子类应当能够替换其父类并在不改变程序正确性的前提下工作\",{\"1\":{\"325\":1}}],[\"子类必须遵守这些契约\",{\"1\":{\"325\":1}}],[\"子类不仅需要保持父类的行为约定\",{\"1\":{\"325\":1}}],[\"子类型兼容\",{\"1\":{\"325\":1}}],[\"子类型\",{\"1\":{\"325\":1}}],[\"子节点\",{\"0\":{\"208\":1}}],[\"优先考虑通过扩展而非修改现有代码来满足新需求\",{\"1\":{\"324\":1}}],[\"优先级\",{\"0\":{\"278\":1}}],[\"案例\",{\"1\":{\"324\":1}}],[\"细节应该依赖于抽象\",{\"1\":{\"324\":1}}],[\"高层次的业务逻辑层不应直接依赖于特定的数据库访问类\",{\"1\":{\"327\":1}}],[\"高层次的模块\",{\"1\":{\"327\":1}}],[\"高层模块不应依赖于低层模块\",{\"1\":{\"324\":1}}],[\"高内聚的关键原则之一\",{\"1\":{\"325\":1}}],[\"高可维护性\",{\"1\":{\"225\":1}}],[\"继承\",{\"1\":{\"533\":4}}],[\"继承抽象类原型指向抽象类原型\",{\"1\":{\"350\":1}}],[\"继承与多态\",{\"1\":{\"324\":1}}],[\"继续用大括号和\",{\"0\":{\"86\":1}}],[\"抽象产品\",{\"1\":{\"350\":2}}],[\"抽象类不能调用抽象方法\",{\"1\":{\"350\":1}}],[\"抽象类里没必要定义静态方法\",{\"1\":{\"350\":1}}],[\"抽象工厂模式\",{\"0\":{\"348\":1},\"1\":{\"349\":1}}],[\"抽象不应该依赖于具体实现\",{\"1\":{\"327\":1}}],[\"抽象不应该依赖于细节\",{\"1\":{\"324\":1}}],[\"抽象与接口\",{\"1\":{\"324\":1}}],[\"抽象方法来评估它们的表达式\",{\"0\":{\"133\":1}}],[\"遵循ocp\",{\"1\":{\"324\":1}}],[\"遵循单一职责原则有助于创建更加灵活\",{\"1\":{\"323\":1}}],[\"遵守ocp可以最小化这种风险\",{\"1\":{\"324\":1}}],[\"增加订阅者\",{\"1\":{\"337\":1}}],[\"增加代码的复用可能性\",{\"1\":{\"326\":1}}],[\"增加新的功能而不影响已有代码的稳定性\",{\"1\":{\"324\":1}}],[\"增强了系统的稳定性和可靠性\",{\"1\":{\"325\":1}}],[\"增强代码健壮性\",{\"1\":{\"325\":1}}],[\"增强可测试性\",{\"1\":{\"323\":1,\"327\":1}}],[\"软件设计应允许通过增加新代码来应对变化\",{\"1\":{\"324\":1}}],[\"降低代码的灵活性和可维护性\",{\"1\":{\"327\":1}}],[\"降低了模块间的耦合度\",{\"1\":{\"327\":1}}],[\"降低了出错的可能性\",{\"1\":{\"323\":1}}],[\"降低耦合\",{\"1\":{\"323\":1,\"326\":1,\"327\":1}}],[\"边界更清晰\",{\"1\":{\"323\":1}}],[\"好处\",{\"1\":{\"323\":1}}],[\"核心思想\",{\"1\":{\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":1}}],[\"敏捷软件开发\",{\"1\":{\"323\":1}}],[\"里了\",{\"1\":{\"536\":1}}],[\"里return的函数就是清理\",{\"1\":{\"455\":1}}],[\"里\",{\"1\":{\"357\":1,\"408\":1,\"409\":1,\"484\":1,\"536\":2,\"541\":1}}],[\"里式替换原则是实现面向对象设计中\",{\"1\":{\"325\":1}}],[\"里式替换原则\",{\"0\":{\"325\":1},\"1\":{\"322\":1}}],[\"里面执行的\",{\"1\":{\"276\":1}}],[\"设计模式\",{\"0\":{\"328\":1},\"1\":{\"328\":1}}],[\"设计模式核心原理与应用实践笔记\",{\"1\":{\"321\":1}}],[\"设计时考虑契约\",{\"1\":{\"325\":1}}],[\"设计为可扩展的组件更易于在不同上下文中复用\",{\"1\":{\"324\":1}}],[\"设计原则是设计模式的指导理论\",{\"1\":{\"322\":1}}],[\"设计原则\",{\"0\":{\"322\":1}}],[\"设置成这个新版本来触发重新渲染\",{\"1\":{\"427\":1}}],[\"设置\",{\"0\":{\"424\":1,\"425\":1},\"1\":{\"411\":1,\"445\":1}}],[\"设置为操作的\",{\"1\":{\"317\":1}}],[\"设置一个值\",{\"1\":{\"314\":1}}],[\"设置npm源\",{\"1\":{\"287\":1}}],[\"新语法索引\",{\"0\":{\"522\":1}}],[\"新\",{\"1\":{\"427\":1}}],[\"新版chrome只认后面这一个\",{\"1\":{\"320\":1}}],[\"新窗口\",{\"1\":{\"12\":1}}],[\"覆盖浏览器默认的新标签页\",{\"1\":{\"320\":1}}],[\"覆盖浏览器默认页面\",{\"1\":{\"320\":1}}],[\"普通页面能够直接访问的插件资源列表\",{\"1\":{\"320\":1}}],[\"右边是输出类型\",{\"1\":{\"503\":1}}],[\"右键菜单\",{\"1\":{\"320\":1}}],[\"右移动编辑器\",{\"1\":{\"18\":1}}],[\"我都强烈建议大家将书写好的声明文件\",{\"1\":{\"536\":1}}],[\"我是一个单例对象\",{\"1\":{\"354\":1}}],[\"我是pageaction\",{\"1\":{\"320\":1}}],[\"我只吐黑咖啡\",{\"1\":{\"333\":2}}],[\"我们才需要使用三斜线指令替代\",{\"1\":{\"549\":1}}],[\"我们更推荐使用\",{\"1\":{\"541\":1}}],[\"我们一般会将导出语句放在整个声明文件的最前面\",{\"1\":{\"540\":1}}],[\"我们只需要尝试安装一下对应的\",{\"1\":{\"536\":1}}],[\"我们只能访问此联合类型的所有类型中共有的属性或方法\",{\"1\":{\"512\":1}}],[\"我们只能访问此联合类型的所有类型里共有的属性或方法\",{\"1\":{\"488\":1}}],[\"我们应该尽可能的减少全局变量或全局类型的数量\",{\"1\":{\"534\":1}}],[\"我们直接使用\",{\"1\":{\"531\":1}}],[\"我们通常这样获取一个\",{\"1\":{\"523\":1}}],[\"我们通过类型声明的方式\",{\"1\":{\"519\":1}}],[\"我们还有第三种方式可以解决这个问题\",{\"1\":{\"520\":1}}],[\"我们还是举上面那个commonjs模块的加载机制例子\",{\"1\":{\"263\":1}}],[\"我们最好优先使用类型声明\",{\"1\":{\"519\":1}}],[\"我们最好是在真实环境中测试组件\",{\"1\":{\"440\":1}}],[\"我们使用\",{\"1\":{\"519\":1}}],[\"我们使用接口\",{\"1\":{\"495\":1}}],[\"我们把它换成\",{\"1\":{\"516\":1}}],[\"我们知道\",{\"1\":{\"516\":1}}],[\"我们知道这个不会工作\",{\"1\":{\"127\":1}}],[\"我们调用完\",{\"1\":{\"515\":1}}],[\"我们也可以选择改进它\",{\"1\":{\"515\":1}}],[\"我们也可以通过\",{\"1\":{\"514\":1}}],[\"我们也可以使用\",{\"1\":{\"538\":1}}],[\"我们也可以使用接口的方式来定义一个函数需要符合的形状\",{\"1\":{\"504\":1}}],[\"我们也可以使用数组泛型\",{\"1\":{\"491\":1}}],[\"我们需要额外声明一个全局变量\",{\"1\":{\"542\":1}}],[\"我们需要使用\",{\"1\":{\"523\":1}}],[\"我们需要引用它的声明文件\",{\"1\":{\"521\":1}}],[\"我们需要在类型的严格性和开发的便利性之间掌握平衡\",{\"1\":{\"514\":1}}],[\"我们需要将\",{\"1\":{\"514\":1}}],[\"我们需要实现一个函数\",{\"1\":{\"508\":1}}],[\"我们非常确定这段代码不会出错\",{\"1\":{\"514\":1}}],[\"我们声明了函数\",{\"1\":{\"513\":1}}],[\"我们确实需要在还不确定类型的时候就访问其中一个类型特有的属性或方法\",{\"1\":{\"512\":1}}],[\"我们重复定义了多次函数\",{\"1\":{\"508\":1}}],[\"我们允许给函数的参数添加默认值\",{\"1\":{\"506\":1}}],[\"我们用以下方式来导出一个模块\",{\"1\":{\"541\":1}}],[\"我们用\",{\"1\":{\"505\":1,\"529\":1}}],[\"我们定义了一个接口\",{\"1\":{\"497\":1}}],[\"我们除了约束当索引的类型是数字时\",{\"1\":{\"493\":1}}],[\"我们想让\",{\"1\":{\"485\":1}}],[\"我们想要很明确的将函数的\",{\"1\":{\"276\":1}}],[\"我们想要用的是\",{\"1\":{\"214\":1}}],[\"我们想要避免污染全局命名空间\",{\"0\":{\"118\":1}}],[\"我们必须考虑所有元素的类型\",{\"1\":{\"485\":1}}],[\"我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型\",{\"1\":{\"477\":1}}],[\"我们会说事件会沿着树向上\",{\"1\":{\"417\":1}}],[\"我们约定使用\",{\"1\":{\"468\":1}}],[\"我们将在下一页讨论\",{\"1\":{\"450\":1}}],[\"我们就在声明文件中导入了\",{\"1\":{\"548\":1}}],[\"我们就需要自己书写声明文件了\",{\"1\":{\"525\":1}}],[\"我们就约束了\",{\"1\":{\"497\":1}}],[\"我们就可以在任何地方执行\",{\"1\":{\"468\":1}}],[\"我们就可以用策略模式来封装它们\",{\"1\":{\"374\":1}}],[\"我们就应该思考是不是可以掏出工厂模式重构我们的代码了\",{\"1\":{\"345\":1}}],[\"我们就应该想到简单工厂\",{\"1\":{\"345\":1}}],[\"我们就很有必要知道一个当我们\",{\"1\":{\"277\":1}}],[\"我们所有事件的订阅\",{\"1\":{\"338\":1}}],[\"我们可以直接下载下来使用\",{\"1\":{\"524\":1}}],[\"我们可以更加规范的实现对\",{\"1\":{\"520\":1}}],[\"我们可以总结出\",{\"1\":{\"516\":1}}],[\"我们可以选择无视它\",{\"1\":{\"515\":1}}],[\"我们可以使用重载定义多个\",{\"1\":{\"508\":1}}],[\"我们可以这么实现\",{\"1\":{\"508\":1}}],[\"我们可以把它理解为一个事件中心\",{\"1\":{\"338\":1}}],[\"我们可以看到\",{\"1\":{\"277\":1}}],[\"我们可以给默认绑定给个定义\",{\"1\":{\"274\":1}}],[\"我们这里简单总结一下\",{\"1\":{\"277\":1}}],[\"我们认为谁调用了函数\",{\"1\":{\"275\":1}}],[\"我们在来看看代码\",{\"1\":{\"277\":1}}],[\"我们在全局作用域中定义了一个变量name\",{\"1\":{\"274\":1}}],[\"我们在一般的项目中以及能够判断出\",{\"1\":{\"273\":1}}],[\"我们比较常见的一种函数调用类型就是独立函数的调用\",{\"1\":{\"274\":1}}],[\"我们不可避免的需要处理\",{\"1\":{\"515\":1}}],[\"我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查\",{\"1\":{\"477\":1}}],[\"我们不妨在封装一个函数\",{\"1\":{\"276\":1}}],[\"我们不能使用默认绑定规则\",{\"1\":{\"275\":1}}],[\"我们不知道他们的具体依赖关系是什么\",{\"1\":{\"226\":1}}],[\"我们不该改arguments\",{\"1\":{\"75\":1}}],[\"我们首先看到的是function关键字\",{\"1\":{\"70\":1}}],[\"图标悬停时的标题\",{\"1\":{\"320\":1}}],[\"图标\",{\"1\":{\"320\":1}}],[\"依浏览器版本而定\",{\"1\":{\"320\":1}}],[\"依赖一个全局变量的声明文件\",{\"0\":{\"551\":1}}],[\"依赖应始终与代码匹配\",{\"1\":{\"460\":1}}],[\"依赖项不同时的重新渲染\",{\"1\":{\"457\":1}}],[\"依赖项相同时的重新渲染\",{\"1\":{\"457\":1}}],[\"依赖数组的不同\",{\"1\":{\"454\":1}}],[\"依赖数组\",{\"1\":{\"454\":1}}],[\"依赖\",{\"0\":{\"454\":1,\"460\":1},\"1\":{\"453\":1}}],[\"依赖树有助于调试大型捆绑包带来的渲染速度过慢的问题\",{\"1\":{\"412\":1}}],[\"依赖树表示\",{\"1\":{\"412\":1}}],[\"依赖反转容器\",{\"1\":{\"327\":1}}],[\"依赖反转原则是实现\",{\"1\":{\"327\":1}}],[\"依赖反转原则是面向对象设计的基本原则之一\",{\"1\":{\"327\":1}}],[\"依赖反转原则\",{\"0\":{\"327\":1},\"1\":{\"322\":1}}],[\"依赖注入\",{\"1\":{\"327\":1}}],[\"依赖注入使得测试变得更加容易\",{\"1\":{\"327\":1}}],[\"依赖关系的控制权从调用者转移到了被调用者\",{\"1\":{\"327\":1}}],[\"依赖于抽象接口或抽象类\",{\"1\":{\"327\":1}}],[\"依赖抽象\",{\"1\":{\"327\":1}}],[\"依赖倒置\",{\"1\":{\"324\":1}}],[\"依赖spm\",{\"1\":{\"270\":1}}],[\"依赖就近\",{\"1\":{\"270\":1}}],[\"依赖模糊\",{\"1\":{\"226\":1}}],[\"事实确实如此\",{\"1\":{\"535\":1}}],[\"事实上常用的类数组都有自己的接口定义\",{\"1\":{\"493\":1}}],[\"事实上\",{\"1\":{\"191\":1,\"471\":1,\"476\":1,\"484\":1,\"507\":1}}],[\"事件\",{\"1\":{\"418\":1}}],[\"事件对象\",{\"1\":{\"418\":1}}],[\"事件传播\",{\"0\":{\"417\":1}}],[\"事件处理函数接收一个\",{\"1\":{\"418\":1}}],[\"事件处理函数还将捕获任何来自子组件的事件\",{\"1\":{\"417\":1}}],[\"事件处理函数传递\",{\"1\":{\"415\":1}}],[\"事件处理函数有如下特点\",{\"1\":{\"415\":1}}],[\"事件处理函数\",{\"1\":{\"414\":1}}],[\"事件侦听器的选项页面上生成按钮\",{\"1\":{\"319\":1}}],[\"提取非响应式逻辑\",{\"0\":{\"459\":1}}],[\"提交\",{\"1\":{\"450\":1}}],[\"提交表单\",{\"1\":{\"420\":1}}],[\"提示我们\",{\"1\":{\"514\":1}}],[\"提示\",{\"1\":{\"395\":1,\"409\":1,\"417\":1}}],[\"提供\",{\"1\":{\"442\":1}}],[\"提供了一个语法\",{\"1\":{\"547\":1}}],[\"提供了一个新语法\",{\"1\":{\"542\":1}}],[\"提供了一个\",{\"1\":{\"531\":1}}],[\"提供了一种模块化方案\",{\"1\":{\"531\":1}}],[\"提供了这两个功能\",{\"1\":{\"422\":1}}],[\"提供了\",{\"1\":{\"386\":1}}],[\"提供四种颜色选项\",{\"1\":{\"319\":1}}],[\"提出的最经典的23种设计模式\",{\"1\":{\"328\":1}}],[\"提出的\",{\"1\":{\"326\":1}}],[\"提出\",{\"1\":{\"325\":1}}],[\"提高了代码的可维护性\",{\"1\":{\"515\":1}}],[\"提高了代码的可复用性和可维护性\",{\"1\":{\"327\":1}}],[\"提高了模块之间的独立性\",{\"1\":{\"326\":1}}],[\"提高软件设计的质量\",{\"1\":{\"326\":1}}],[\"提高可重用性\",{\"1\":{\"326\":1}}],[\"提高可维护性\",{\"1\":{\"325\":1}}],[\"提高可扩展性\",{\"1\":{\"323\":1,\"327\":1}}],[\"提高灵活性\",{\"1\":{\"324\":1,\"326\":1}}],[\"提高代码的可读性和可维护性\",{\"1\":{\"323\":1}}],[\"提议还不是javascript\",{\"1\":{\"214\":1}}],[\"标识符\",{\"1\":{\"533\":1}}],[\"标准的\",{\"1\":{\"541\":1}}],[\"标准\",{\"1\":{\"402\":1}}],[\"标准库中包含一些功能受损但是由于历史原因遗留的工具类\",{\"1\":{\"215\":1}}],[\"标签引入后\",{\"1\":{\"525\":1}}],[\"标签引入第三方库\",{\"1\":{\"525\":1}}],[\"标签引入\",{\"1\":{\"523\":1,\"525\":1,\"526\":1,\"542\":1}}],[\"标签包裹起来\",{\"1\":{\"410\":1}}],[\"标签中时\",{\"1\":{\"405\":1}}],[\"标签的\",{\"1\":{\"402\":1}}],[\"标签内的文本\",{\"1\":{\"399\":1}}],[\"标签必须闭合\",{\"0\":{\"397\":1}}],[\"标签必须要用一个父元素或者\",{\"1\":{\"396\":1}}],[\"标签需要被一个父元素包裹\",{\"0\":{\"396\":1}}],[\"标签\",{\"1\":{\"320\":1,\"417\":1}}],[\"标记当前选择的颜色\",{\"1\":{\"319\":1}}],[\"进行赋值的时候\",{\"1\":{\"500\":1}}],[\"进行描述\",{\"1\":{\"496\":1}}],[\"进行保留和重置的原则\",{\"0\":{\"436\":1}}],[\"进行保留和重置\",{\"0\":{\"435\":1}}],[\"进行划分\",{\"1\":{\"328\":1}}],[\"进一步自定义他们的浏览体验\",{\"1\":{\"319\":1}}],[\"进入文件\",{\"1\":{\"12\":1}}],[\"权限申请\",{\"1\":{\"320\":1}}],[\"权限以使用脚本\",{\"1\":{\"318\":1}}],[\"权限以允许扩展临时访问当前页面\",{\"1\":{\"318\":1}}],[\"权限警告和图标上显示图像\",{\"1\":{\"317\":1}}],[\"层逻辑\",{\"0\":{\"318\":1}}],[\"弹出\",{\"1\":{\"317\":1}}],[\"固定扩展程序将在工具栏中显示图标\",{\"1\":{\"317\":1}}],[\"拼图\",{\"1\":{\"317\":1}}],[\"带有蓝色链接\",{\"1\":{\"316\":1}}],[\"检查目标事件是否有监听函数队列\",{\"1\":{\"338\":1}}],[\"检查后台脚本\",{\"0\":{\"316\":1}}],[\"检测的是原型\",{\"1\":{\"34\":1}}],[\"字符串可以赋值给\",{\"1\":{\"475\":1}}],[\"字符串类型\",{\"0\":{\"473\":1},\"1\":{\"470\":1}}],[\"字符串插入参数\",{\"1\":{\"64\":1}}],[\"字段\",{\"1\":{\"536\":2}}],[\"字段中的\",{\"1\":{\"317\":1}}],[\"字段下注册\",{\"1\":{\"315\":1}}],[\"侦听器中\",{\"1\":{\"314\":1}}],[\"└──\",{\"1\":{\"523\":2,\"526\":2,\"536\":4}}],[\"└─\",{\"1\":{\"313\":2}}],[\"├──\",{\"1\":{\"523\":2,\"526\":2,\"536\":2}}],[\"├─\",{\"1\":{\"313\":9}}],[\"与全局变量的声明文件类似\",{\"1\":{\"538\":1}}],[\"与该\",{\"1\":{\"536\":1}}],[\"与其他全局变量的类型声明一致\",{\"1\":{\"530\":1}}],[\"与其类似的\",{\"1\":{\"527\":1}}],[\"与接口中的可选属性类似\",{\"1\":{\"505\":1}}],[\"与使用\",{\"1\":{\"440\":1,\"527\":1}}],[\"与运算符\",{\"1\":{\"408\":1}}],[\"与\",{\"0\":{\"391\":1,\"464\":1},\"1\":{\"442\":1,\"445\":1,\"457\":1,\"478\":1,\"539\":1,\"549\":2}}],[\"与后台脚本一样\",{\"1\":{\"317\":1}}],[\"与许多其他重要组件一样\",{\"1\":{\"312\":1}}],[\"与外部其它模块通信\",{\"1\":{\"223\":1}}],[\"菜单打开此页面\",{\"1\":{\"311\":1}}],[\"选择性地返回\",{\"0\":{\"409\":1}}],[\"选择\",{\"1\":{\"319\":1}}],[\"选择当前出现的所有单词\",{\"1\":{\"16\":1}}],[\"选择当前选择的所有匹配项\",{\"1\":{\"16\":1}}],[\"选择当前行\",{\"1\":{\"16\":1}}],[\"选项页面\",{\"1\":{\"310\":1}}],[\"扩展模块\",{\"1\":{\"522\":1}}],[\"扩展全局变量\",{\"1\":{\"522\":1}}],[\"扩展\",{\"1\":{\"514\":1}}],[\"扩展出现在扩展菜单\",{\"1\":{\"317\":1}}],[\"扩展程序无法在\",{\"1\":{\"318\":1}}],[\"扩展程序还会在扩展程序管理页面\",{\"1\":{\"317\":1}}],[\"扩展程序才能使用它们\",{\"1\":{\"315\":1}}],[\"扩展可以有多种形式的user\",{\"1\":{\"317\":1}}],[\"扩展将使用storage\",{\"1\":{\"314\":1}}],[\"扩展从它们的清单开始\",{\"1\":{\"311\":1}}],[\"扩展的组件将取决于其功能\",{\"1\":{\"310\":1}}],[\"扩展组件是使用\",{\"1\":{\"310\":1}}],[\"扩展由不同但有凝聚力的组件组成\",{\"1\":{\"310\":1}}],[\"扩大选择\",{\"1\":{\"16\":1}}],[\"谷歌开发入门示例\",{\"0\":{\"310\":1}}],[\"功能\",{\"1\":{\"307\":1,\"308\":1}}],[\"遍历的数组内容\",{\"1\":{\"305\":1}}],[\"位置\",{\"1\":{\"303\":1,\"304\":1}}],[\"位表示的\",{\"0\":{\"185\":1}}],[\"起始位置\",{\"1\":{\"302\":2}}],[\"起作用\",{\"1\":{\"122\":1}}],[\"插入的项数不必与删除的项数相等\",{\"1\":{\"302\":1}}],[\"插入\",{\"1\":{\"302\":1}}],[\"插入和替换\",{\"1\":{\"302\":1}}],[\"插件主页\",{\"1\":{\"320\":1}}],[\"插件本地存储\",{\"1\":{\"320\":1}}],[\"插件描述\",{\"1\":{\"320\":1}}],[\"插件的版本\",{\"1\":{\"320\":1}}],[\"插件的名称\",{\"1\":{\"320\":1}}],[\"插件\",{\"0\":{\"23\":1}}],[\"该嵌套部分可以并行加载数据并响应用户操作进行刷新\",{\"1\":{\"384\":1}}],[\"该函数返回一个对象字面量\",{\"1\":{\"354\":1}}],[\"该原则是面向对象设计的基本原则之一\",{\"1\":{\"323\":1}}],[\"该扩展程序目前仅允许用户将背景更改为绿色\",{\"1\":{\"319\":1}}],[\"该扩展程序要创建的文件目录层级如下\",{\"1\":{\"313\":1}}],[\"该扩展现在功能齐全\",{\"1\":{\"318\":1}}],[\"该扩展现在有一个自定义图标和一个弹出窗口\",{\"1\":{\"318\":1}}],[\"该方法返回起始和结束位置之间的项\",{\"1\":{\"301\":1}}],[\"该对象只有在脚本运行完才会生成\",{\"1\":{\"263\":1}}],[\"反之亦然\",{\"1\":{\"533\":1}}],[\"反而滥用类型断言可能会导致运行时错误\",{\"1\":{\"512\":1}}],[\"反应\",{\"1\":{\"460\":1}}],[\"反模式\",{\"1\":{\"327\":1}}],[\"反转数组项的顺序\",{\"1\":{\"299\":1}}],[\"反斜线可读性差\",{\"1\":{\"66\":1}}],[\"发布到开源社区中\",{\"1\":{\"536\":1}}],[\"发布到\",{\"1\":{\"536\":1}}],[\"发布者能否直接感知订阅者\",{\"1\":{\"339\":1}}],[\"发布都不能由订阅方和发布方\",{\"1\":{\"338\":1}}],[\"发布当前包\",{\"1\":{\"291\":1}}],[\"发布\",{\"0\":{\"291\":1,\"338\":1}}],[\"登录用户\",{\"1\":{\"290\":1}}],[\"登录\",{\"0\":{\"290\":1}}],[\"密码\",{\"1\":{\"289\":1}}],[\"四位程序员前辈\",{\"1\":{\"328\":1}}],[\"四\",{\"0\":{\"288\":1}}],[\"地址\",{\"1\":{\"287\":2,\"289\":2,\"290\":2}}],[\"添加属性或方法\",{\"1\":{\"544\":1}}],[\"添加类型\",{\"1\":{\"503\":1}}],[\"添加元素\",{\"1\":{\"428\":1}}],[\"添加\",{\"0\":{\"422\":1}}],[\"添加事件处理函数\",{\"0\":{\"415\":1}}],[\"添加交互\",{\"0\":{\"413\":1}}],[\"添加额外功能\",{\"1\":{\"371\":1}}],[\"添加一些默认的样式\",{\"1\":{\"320\":1}}],[\"添加存储权限\",{\"0\":{\"315\":1}}],[\"添加私有库\",{\"1\":{\"287\":1}}],[\"添加行注释\",{\"1\":{\"13\":1}}],[\"负载平衡4个api\",{\"1\":{\"286\":1}}],[\"具有\",{\"1\":{\"454\":1}}],[\"具有内置的负载均衡器\",{\"1\":{\"286\":1}}],[\"具体来说\",{\"1\":{\"516\":1}}],[\"具体产品\",{\"1\":{\"350\":4}}],[\"具体工厂2\",{\"1\":{\"350\":1}}],[\"具体工厂1\",{\"1\":{\"350\":1}}],[\"具体实现可以根据需求变化而变化\",{\"1\":{\"324\":1}}],[\"具体的\",{\"1\":{\"277\":1}}],[\"给已有的命名空间添加类型声明\",{\"1\":{\"544\":1}}],[\"给出了相应的错误提示\",{\"1\":{\"514\":1}}],[\"给一个子组件\",{\"1\":{\"448\":1}}],[\"给定相同的输入\",{\"1\":{\"411\":1}}],[\"给\",{\"0\":{\"403\":1}}],[\"给它的子组件\",{\"1\":{\"401\":1}}],[\"给用户\",{\"0\":{\"319\":1}}],[\"给容器指定一个名称\",{\"1\":{\"285\":1}}],[\"给~\",{\"1\":{\"285\":1}}],[\"给问题做注释\",{\"0\":{\"152\":1}}],[\"~\",{\"1\":{\"285\":3,\"291\":1}}],[\"拉取verdaccio\",{\"1\":{\"285\":1}}],[\"部署\",{\"0\":{\"284\":1}}],[\"日志\",{\"1\":{\"441\":1}}],[\"日志设置\",{\"1\":{\"283\":1}}],[\"日期\",{\"1\":{\"34\":1}}],[\"值的类型必须是数字之外\",{\"1\":{\"493\":1}}],[\"值都是唯一的\",{\"1\":{\"481\":1}}],[\"值都是固定的\",{\"1\":{\"425\":1}}],[\"值设置为\",{\"1\":{\"450\":1}}],[\"值做某事\",{\"1\":{\"426\":1}}],[\"值总是\",{\"1\":{\"425\":1}}],[\"值\",{\"1\":{\"401\":1,\"410\":1,\"426\":1,\"427\":1,\"442\":1,\"510\":3}}],[\"值为0会使http服务器的行为类似于8\",{\"1\":{\"283\":1}}],[\"值被覆盖\",{\"0\":{\"73\":1}}],[\"您可以指定传入连接的http\",{\"1\":{\"283\":1}}],[\"禁用gravatar头像\",{\"1\":{\"283\":1}}],[\"禁止修改这个全局变量\",{\"1\":{\"527\":1}}],[\"禁止任何人都可以通过\",{\"1\":{\"283\":1}}],[\"禁止一元增量和减量语句还会阻止您无意地预增\",{\"1\":{\"123\":1}}],[\"网站title\",{\"1\":{\"283\":1}}],[\"撤销\",{\"1\":{\"453\":1}}],[\"撤销已发布的软件包\",{\"1\":{\"283\":2}}],[\"撤销最后光标操作\",{\"1\":{\"16\":1}}],[\"表单输入框获得焦点等\",{\"1\":{\"414\":1}}],[\"表示此时的全局变量是一个常量\",{\"1\":{\"527\":1}}],[\"表示可选的参数\",{\"1\":{\"505\":1}}],[\"表示数组中允许出现任意类型\",{\"1\":{\"494\":1}}],[\"表示\",{\"1\":{\"492\":1}}],[\"表示法\",{\"0\":{\"490\":1}}],[\"表示取值可以为多种类型中的一种\",{\"1\":{\"487\":1}}],[\"表示没有任何返回值的函数\",{\"1\":{\"479\":1}}],[\"表示由此类型元素组成的一个数组\",{\"1\":{\"474\":1}}],[\"表示匹配所有地址\",{\"1\":{\"320\":1}}],[\"表示查找起点位置的索引\",{\"1\":{\"303\":1,\"304\":1}}],[\"表示只有注册用户可访问\",{\"1\":{\"283\":2}}],[\"表示未注册用户可访问\",{\"1\":{\"283\":2}}],[\"表示不限制\",{\"1\":{\"283\":2}}],[\"表达式\",{\"1\":{\"400\":1}}],[\"表达式种的函数调用会自动返回这个新对象\",{\"1\":{\"277\":1}}],[\"表达式有副作用就不要用隐式return\",{\"1\":{\"86\":1}}],[\"表达式为\",{\"1\":{\"34\":1}}],[\"访问它的\",{\"1\":{\"488\":2}}],[\"访问\",{\"1\":{\"488\":1}}],[\"访问联合类型的属性或方法\",{\"0\":{\"488\":1}}],[\"访问另一个组件的\",{\"0\":{\"448\":1}}],[\"访问任何属性都是允许的\",{\"1\":{\"514\":1}}],[\"访问任何\",{\"1\":{\"447\":1}}],[\"访问权限有三个关键词\",{\"1\":{\"283\":2}}],[\"访问属性时使用点符号\",{\"0\":{\"114\":1}}],[\"注入全局变量\",{\"1\":{\"525\":1,\"526\":1}}],[\"注入当前页面\",{\"1\":{\"318\":1}}],[\"注册页面\",{\"1\":{\"317\":1}}],[\"注册后台脚本\",{\"1\":{\"312\":1}}],[\"注册用户\",{\"1\":{\"289\":1}}],[\"注册用户可访问\",{\"1\":{\"283\":4}}],[\"注册\",{\"0\":{\"289\":1}}],[\"注意即使此声明文件不需要导出任何东西\",{\"1\":{\"546\":1}}],[\"注意针对整体导出\",{\"1\":{\"541\":1}}],[\"注意不要混淆了\",{\"1\":{\"503\":1}}],[\"注意只能指向一个html文件\",{\"1\":{\"320\":1}}],[\"注意\",{\"0\":{\"38\":1,\"88\":1,\"185\":1},\"1\":{\"69\":1,\"127\":1,\"167\":1,\"235\":1,\"242\":1,\"251\":1,\"274\":1,\"275\":1,\"283\":2,\"285\":1,\"286\":1,\"291\":1,\"318\":1,\"327\":1,\"378\":1,\"398\":1,\"400\":1,\"408\":1,\"410\":1,\"415\":1,\"422\":1,\"436\":1,\"452\":1,\"454\":1,\"468\":1,\"471\":1,\"478\":1,\"500\":1,\"502\":1,\"507\":1,\"508\":1,\"531\":1,\"534\":1,\"536\":1,\"538\":1,\"540\":1,\"550\":1}}],[\"可是此全局变量的类型却没有相应的更新过来\",{\"1\":{\"544\":1}}],[\"可是\",{\"1\":{\"512\":1}}],[\"可能为\",{\"1\":{\"512\":1}}],[\"可能会写成这样\",{\"1\":{\"503\":1}}],[\"可能会让你想起\",{\"1\":{\"401\":1}}],[\"可能会导致运行时错误\",{\"1\":{\"325\":1}}],[\"可见\",{\"1\":{\"497\":1}}],[\"可测试性\",{\"1\":{\"440\":1}}],[\"可调试性\",{\"1\":{\"440\":1}}],[\"可读性\",{\"1\":{\"440\":1}}],[\"可信单一数据源\",{\"1\":{\"434\":1}}],[\"可复用面向对象软件的基础\",{\"1\":{\"328\":1}}],[\"可复用和易于理解的代码库\",{\"1\":{\"323\":1}}],[\"可扩展的系统\",{\"1\":{\"326\":1}}],[\"可选参数后面不允许再出现必需参数了\",{\"1\":{\"505\":1}}],[\"可选参数必须接在必需参数后面\",{\"1\":{\"505\":1,\"506\":1}}],[\"可选参数\",{\"0\":{\"505\":1}}],[\"可选属性的含义是该属性可以不存在\",{\"1\":{\"498\":1}}],[\"可选属性\",{\"0\":{\"498\":1}}],[\"可选值\",{\"1\":{\"320\":1}}],[\"可选\",{\"1\":{\"320\":1}}],[\"可选的\",{\"1\":{\"303\":1,\"304\":1}}],[\"可用\",{\"1\":{\"316\":1}}],[\"可用列表见\",{\"1\":{\"283\":1}}],[\"可用通过设置为\",{\"1\":{\"283\":2}}],[\"可修改packages下的属性\",{\"1\":{\"283\":1}}],[\"可以改变另一个原有模块的结构\",{\"1\":{\"547\":1}}],[\"可以直接默认导出\",{\"1\":{\"540\":1}}],[\"可以直接被调用\",{\"1\":{\"535\":1}}],[\"可以导出一个默认值\",{\"1\":{\"540\":1}}],[\"可以查看声明合并章节\",{\"1\":{\"535\":1}}],[\"可以检查下\",{\"1\":{\"526\":1}}],[\"可以看作是\",{\"1\":{\"519\":1}}],[\"可以通过这个例子来理解\",{\"1\":{\"519\":1}}],[\"可以通过executescript或者insertcss访问的网站\",{\"1\":{\"320\":2}}],[\"可以被断言为任何类型\",{\"1\":{\"516\":2,\"517\":1}}],[\"可以说是解决\",{\"1\":{\"514\":1}}],[\"可以正确的看到前两个提示\",{\"1\":{\"508\":1}}],[\"可以保证以后对函数名赋值时保证参数个数\",{\"1\":{\"504\":1}}],[\"可以参考\",{\"1\":{\"503\":1,\"506\":1,\"507\":1}}],[\"可以参考内置对象一章\",{\"1\":{\"493\":1}}],[\"可以参考泛型一章\",{\"1\":{\"491\":1}}],[\"可以赋值给\",{\"1\":{\"478\":1,\"516\":1}}],[\"可以减少代码量\",{\"1\":{\"440\":1}}],[\"可以将相关\",{\"1\":{\"433\":1}}],[\"可以将左侧的值改成布尔类型\",{\"1\":{\"408\":1}}],[\"可以使用如下方式\",{\"1\":{\"499\":1}}],[\"可以使用\",{\"1\":{\"427\":1,\"507\":1}}],[\"可以在这个页面搜索你需要的声明文件\",{\"1\":{\"524\":1}}],[\"可以在元素类型后面接上\",{\"1\":{\"474\":1}}],[\"可以在\",{\"1\":{\"414\":1,\"546\":1}}],[\"可以在运行时选择不同的算法\",{\"1\":{\"332\":1}}],[\"可以用来手动指定一个值的类型\",{\"1\":{\"509\":1}}],[\"可以用\",{\"1\":{\"395\":1,\"479\":1}}],[\"可以让你在\",{\"1\":{\"393\":1}}],[\"可以让你创建具有真正原生\",{\"1\":{\"386\":1}}],[\"可以让你创建任意规模的\",{\"1\":{\"383\":1}}],[\"可以是静态博客\",{\"1\":{\"383\":1}}],[\"可以无缝地使用子类实例而无需了解这种替换\",{\"1\":{\"325\":1}}],[\"可以设计一个paymentmethod接口\",{\"1\":{\"324\":1}}],[\"可以创建新的类而不是修改已有的类\",{\"1\":{\"323\":1}}],[\"可以降低类的复杂性\",{\"1\":{\"323\":1}}],[\"可以向指定位置插入任意数量的项\",{\"1\":{\"302\":2}}],[\"可以根据自己需要选择\",{\"1\":{\"286\":1}}],[\"可以很容易在node\",{\"1\":{\"270\":1}}],[\"可以暴露任意数据类项\",{\"1\":{\"268\":1}}],[\"可以得出amd模块定义的方法非常清晰\",{\"1\":{\"251\":1}}],[\"可以不用圆括号括起来\",{\"0\":{\"139\":1}}],[\"可以重写成如下例子\",{\"1\":{\"127\":1}}],[\"查看当前登录用户\",{\"1\":{\"290\":1}}],[\"查看现有的npm源\",{\"1\":{\"287\":1}}],[\"查看docker容器\",{\"1\":{\"285\":1}}],[\"查看docker镜像\",{\"1\":{\"285\":1}}],[\"查看包\",{\"1\":{\"283\":1}}],[\"查找上\",{\"1\":{\"15\":1}}],[\"查找\",{\"1\":{\"15\":1}}],[\"修改克隆后的实例\",{\"1\":{\"358\":1}}],[\"修改现有代码可能引入错误\",{\"1\":{\"324\":1}}],[\"修改一个类时对其他类的影响减小\",{\"1\":{\"323\":1}}],[\"修改配置\",{\"0\":{\"283\":1}}],[\"修剪尾随空格\",{\"1\":{\"17\":1}}],[\"安装命令是\",{\"1\":{\"536\":1}}],[\"安装的\",{\"1\":{\"526\":1}}],[\"安装的监听器在移除的过程中出现顺序问题\",{\"1\":{\"338\":1}}],[\"安装对应的声明模块即可\",{\"1\":{\"524\":1}}],[\"安装完成之后\",{\"1\":{\"468\":1}}],[\"安装\",{\"0\":{\"468\":1},\"1\":{\"388\":1,\"389\":1,\"390\":1}}],[\"安装verdaccio\",{\"0\":{\"280\":1}}],[\"安装babel\",{\"0\":{\"266\":1}}],[\"基础\",{\"0\":{\"484\":1}}],[\"基础类型直接返回\",{\"1\":{\"359\":1}}],[\"基于pm2\",{\"0\":{\"279\":1}}],[\"基本路径\",{\"1\":{\"250\":1,\"251\":1}}],[\"基本语法\",{\"0\":{\"231\":1}}],[\"基本类型\",{\"0\":{\"32\":1}}],[\"叫做箭头函数\",{\"1\":{\"503\":1}}],[\"叫做\",{\"1\":{\"277\":1}}],[\"种\",{\"1\":{\"277\":1}}],[\"形如\",{\"1\":{\"510\":1}}],[\"形如foo\",{\"1\":{\"274\":1}}],[\"形式\",{\"1\":{\"276\":1}}],[\"指代的五个基本原则分别是\",{\"1\":{\"322\":1}}],[\"指\",{\"1\":{\"306\":1}}],[\"指定一个默认值\",{\"0\":{\"403\":1}}],[\"指定\",{\"0\":{\"454\":1},\"1\":{\"276\":1,\"302\":1,\"453\":1}}],[\"指向了\",{\"1\":{\"276\":1}}],[\"指向了全局对象\",{\"1\":{\"275\":1}}],[\"指向了全局作用域\",{\"1\":{\"274\":1}}],[\"指向哪儿呢\",{\"1\":{\"275\":1}}],[\"指向哪儿了\",{\"1\":{\"273\":1}}],[\"指向全局对象\",{\"1\":{\"274\":2}}],[\"补充\",{\"1\":{\"276\":1}}],[\"出现问题时\",{\"1\":{\"440\":1}}],[\"出现\",{\"1\":{\"276\":1}}],[\"出发点在根目录下\",{\"1\":{\"250\":1,\"251\":1}}],[\"硬绑定\",{\"1\":{\"276\":1}}],[\"来将\",{\"1\":{\"541\":1}}],[\"来将任何一个类型断言为任何另一个类型呢\",{\"1\":{\"517\":1}}],[\"来导入\",{\"1\":{\"541\":1}}],[\"来导入这个默认值\",{\"1\":{\"540\":1}}],[\"来声明深层的属性的类型\",{\"1\":{\"532\":1}}],[\"来声明函数\",{\"1\":{\"531\":1}}],[\"来声明这个拥有多个子属性的全局变量\",{\"1\":{\"531\":1}}],[\"来定义\",{\"1\":{\"528\":1}}],[\"来定义它的类型\",{\"1\":{\"523\":1,\"529\":1}}],[\"来定义对象的类型\",{\"1\":{\"495\":1}}],[\"来理解类型断言的限制\",{\"1\":{\"516\":1}}],[\"来做运行时判断了\",{\"1\":{\"513\":1}}],[\"来做到这一切\",{\"1\":{\"453\":1}}],[\"来判断传入的参数是不是\",{\"1\":{\"513\":1}}],[\"来判断\",{\"1\":{\"513\":1}}],[\"来表示数组\",{\"1\":{\"490\":1,\"491\":1}}],[\"来实现\",{\"1\":{\"446\":1}}],[\"来实现这一点\",{\"1\":{\"419\":1}}],[\"来保存当前路由\",{\"1\":{\"442\":1}}],[\"来自哪个\",{\"1\":{\"440\":1}}],[\"来阻止默认行为发生\",{\"1\":{\"420\":1}}],[\"来更新界面\",{\"1\":{\"411\":1}}],[\"来更改\",{\"1\":{\"276\":1}}],[\"来互相通信\",{\"1\":{\"401\":1}}],[\"来代替\",{\"1\":{\"398\":1}}],[\"来包裹\",{\"1\":{\"396\":1}}],[\"来继承abstractclass的原型属性和方法\",{\"1\":{\"350\":1}}],[\"来改变this的指向\",{\"1\":{\"350\":1}}],[\"来决定对象的行为\",{\"1\":{\"325\":1}}],[\"来调用函数时\",{\"1\":{\"277\":1}}],[\"来调用才能返回正确的类型信息\",{\"1\":{\"34\":1}}],[\"却绑定到了全局对象上去\",{\"1\":{\"275\":1}}],[\"张三\",{\"1\":{\"275\":1,\"276\":4,\"346\":1,\"533\":1}}],[\"常用脚手架\",{\"0\":{\"387\":1}}],[\"常用class\",{\"0\":{\"92\":1}}],[\"常见于回调函数中\",{\"1\":{\"275\":1}}],[\"丢失\",{\"1\":{\"275\":3}}],[\"独立函数的调用我们可以直接看出执行上下文在哪里\",{\"1\":{\"275\":1}}],[\"独立的模块\",{\"1\":{\"220\":1}}],[\"从上面的例子中\",{\"1\":{\"516\":1}}],[\"从上段代码可以看出\",{\"1\":{\"274\":1}}],[\"从这两个组件上移除\",{\"1\":{\"433\":1}}],[\"从数组中渲染数据\",{\"1\":{\"410\":1}}],[\"从数组的开头\",{\"1\":{\"303\":1,\"304\":1}}],[\"从\",{\"0\":{\"459\":1},\"1\":{\"389\":1,\"459\":1}}],[\"从而将一些信息传递给它\",{\"1\":{\"401\":1}}],[\"从而简化了代码结构和维护性\",{\"1\":{\"331\":1}}],[\"从而提升软件的长期可维护性和灵活性\",{\"1\":{\"324\":1}}],[\"从先前选择的颜色中删除样式\",{\"1\":{\"319\":1}}],[\"从同一个路径下import多行会使代码难以维护\",{\"1\":{\"103\":1}}],[\"输出也应该为字符串\",{\"1\":{\"508\":1}}],[\"输出也应该为数字\",{\"1\":{\"508\":1}}],[\"输出也是相同的\",{\"1\":{\"441\":1}}],[\"输出反转的字符串\",{\"1\":{\"508\":1}}],[\"输出反转的数字\",{\"1\":{\"508\":1}}],[\"输出\",{\"1\":{\"350\":4,\"354\":6,\"358\":2,\"367\":4,\"371\":2,\"375\":2}}],[\"输出为\",{\"1\":{\"305\":1}}],[\"输出它的配置文件位置\",{\"1\":{\"282\":1}}],[\"输出的结果就是全局变量name\",{\"1\":{\"274\":1}}],[\"输入为字符串的时候\",{\"1\":{\"508\":1}}],[\"输入为数字的时候\",{\"1\":{\"508\":1}}],[\"输入字符串\",{\"1\":{\"508\":1}}],[\"输入数字\",{\"1\":{\"508\":1}}],[\"输入多余的\",{\"1\":{\"502\":1,\"505\":1}}],[\"输入表单应该更新输入字段\",{\"1\":{\"421\":1}}],[\"输入相同\",{\"1\":{\"411\":1}}],[\"输入时必须查找对象属性\",{\"1\":{\"259\":1}}],[\"输入的是被输出的值的拷贝\",{\"1\":{\"232\":1}}],[\"绑定丢失原因无非就是我们传入的回调函数在被执行时\",{\"1\":{\"276\":1}}],[\"绑定丢失的问题\",{\"1\":{\"276\":2}}],[\"绑定\",{\"1\":{\"276\":1,\"277\":2}}],[\"绑定在某个对象上\",{\"1\":{\"276\":1}}],[\"绑定到\",{\"1\":{\"276\":1}}],[\"绑定到了哪个对象上\",{\"1\":{\"276\":1}}],[\"绑定到了全局对象\",{\"1\":{\"274\":1}}],[\"绑定到了\",{\"1\":{\"274\":1}}],[\"绑定的\",{\"1\":{\"275\":1}}],[\"绑定就是采用的默认绑定规则\",{\"1\":{\"274\":1}}],[\"绑定规则变为了默认绑定\",{\"1\":{\"276\":1}}],[\"绑定规则\",{\"0\":{\"273\":1},\"1\":{\"277\":2}}],[\"显式传递\",{\"1\":{\"442\":1}}],[\"显式绑定到\",{\"1\":{\"276\":1}}],[\"显式绑定\",{\"0\":{\"276\":1},\"1\":{\"273\":1}}],[\"显示的结束语句\",{\"1\":{\"179\":1}}],[\"显示终端\",{\"1\":{\"22\":1}}],[\"显示悬停\",{\"1\":{\"21\":1}}],[\"显示输出面板\",{\"1\":{\"20\":1}}],[\"显示插件\",{\"1\":{\"20\":1}}],[\"显示\",{\"1\":{\"20\":1}}],[\"显示源控制\",{\"1\":{\"20\":1}}],[\"显示搜索栏\",{\"1\":{\"20\":1}}],[\"显示资源管理器\",{\"1\":{\"20\":1}}],[\"显示引用\",{\"1\":{\"17\":1}}],[\"显示问题面板\",{\"1\":{\"14\":1}}],[\"显示命令面板\",{\"1\":{\"12\":1}}],[\"隐式绑定中\",{\"1\":{\"275\":1}}],[\"隐式绑定\",{\"0\":{\"275\":1},\"1\":{\"273\":1}}],[\"成为浏览器和服务器通用的模块解决方案\",{\"1\":{\"270\":1}}],[\"完整配置文件如下\",{\"1\":{\"283\":1}}],[\"完整版\",{\"1\":{\"221\":1}}],[\"完全可以取代\",{\"1\":{\"270\":1}}],[\"延迟执行\",{\"1\":{\"270\":1}}],[\"代表\",{\"1\":{\"418\":1}}],[\"代理设置属性\",{\"1\":{\"371\":1}}],[\"代理获取属性\",{\"1\":{\"371\":1}}],[\"代理对象\",{\"1\":{\"371\":1}}],[\"代理模式在不改变原始类接口的条件下\",{\"1\":{\"370\":1}}],[\"代理模式\",{\"0\":{\"370\":1}}],[\"代理器模式\",{\"0\":{\"369\":1}}],[\"代码也没有被保存到仓库中\",{\"1\":{\"536\":1}}],[\"代码在编译后会变成\",{\"1\":{\"518\":1}}],[\"代码体积\",{\"1\":{\"440\":1}}],[\"代码时常做的事\",{\"1\":{\"433\":1}}],[\"代码注入的时间\",{\"1\":{\"320\":1}}],[\"代码如下\",{\"1\":{\"274\":1,\"275\":2,\"276\":1,\"277\":1}}],[\"代码的阅读和书写比较困难\",{\"1\":{\"270\":1}}],[\"代替全局的\",{\"0\":{\"216\":1}}],[\"代替\",{\"0\":{\"74\":1,\"217\":1},\"1\":{\"398\":1}}],[\"代替直接向数组中添加一个值\",{\"0\":{\"50\":1}}],[\"三斜线指令的前面只允许出现单行或多行注释\",{\"1\":{\"550\":1}}],[\"三斜线指令的语法如上\",{\"1\":{\"550\":1}}],[\"三斜线指令必须放在文件的最顶端\",{\"1\":{\"550\":1}}],[\"三斜线指令也是\",{\"1\":{\"549\":1}}],[\"三斜线指令\",{\"0\":{\"549\":1}}],[\"三\",{\"0\":{\"270\":1,\"287\":1}}],[\"三元表达式不应该嵌套\",{\"0\":{\"137\":1}}],[\"编译错误\",{\"1\":{\"544\":1}}],[\"编译时的类型\",{\"1\":{\"518\":1}}],[\"编译时会报错\",{\"1\":{\"514\":1}}],[\"编译时报错\",{\"1\":{\"488\":1}}],[\"编译器并不知道\",{\"1\":{\"523\":1}}],[\"编译器信任了我们的断言\",{\"1\":{\"512\":1}}],[\"编译器\",{\"1\":{\"512\":1}}],[\"编译结果\",{\"1\":{\"472\":1,\"473\":1}}],[\"编译通过\",{\"1\":{\"471\":1}}],[\"编译一个\",{\"1\":{\"468\":1}}],[\"编译并在index\",{\"0\":{\"269\":1}}],[\"编写的文件以\",{\"1\":{\"468\":1}}],[\"编写\",{\"1\":{\"441\":1,\"453\":1,\"468\":1}}],[\"编写一个好的\",{\"0\":{\"441\":1}}],[\"编写纯函数需要一些练习\",{\"1\":{\"411\":1}}],[\"编程环境中非常常用的设计模式\",{\"1\":{\"342\":1}}],[\"编码\",{\"1\":{\"224\":2}}],[\"接口和类型别名并不互斥\",{\"1\":{\"533\":1}}],[\"接口提示等功能\",{\"1\":{\"521\":1}}],[\"接口是一个类型\",{\"1\":{\"513\":1}}],[\"接口一般首字母大写\",{\"1\":{\"497\":1}}],[\"接口\",{\"0\":{\"495\":1},\"1\":{\"496\":1}}],[\"接口也可以用来描述数组\",{\"1\":{\"492\":1}}],[\"接口拆分\",{\"1\":{\"326\":1}}],[\"接口分组\",{\"1\":{\"326\":1}}],[\"接口隔离原则鼓励设计更加灵活\",{\"1\":{\"326\":1}}],[\"接口隔离原则\",{\"0\":{\"326\":1},\"1\":{\"322\":1}}],[\"接下来\",{\"1\":{\"318\":1}}],[\"接下来介绍amd规范在浏览器实现的步骤\",{\"1\":{\"247\":1}}],[\"接收事件更新界面\",{\"1\":{\"429\":1}}],[\"接收两个参数\",{\"1\":{\"303\":1,\"304\":1}}],[\"接收到就是什么数据\",{\"1\":{\"268\":1}}],[\"接着定义了一个变量\",{\"1\":{\"497\":1}}],[\"接着\",{\"1\":{\"282\":1}}],[\"统一管理第三方库的声明文件\",{\"1\":{\"524\":1}}],[\"统一使用\",{\"1\":{\"510\":1}}],[\"统一暴露\",{\"1\":{\"268\":1}}],[\"统一性好\",{\"1\":{\"79\":1}}],[\"为后缀\",{\"1\":{\"468\":2,\"523\":1}}],[\"为\",{\"1\":{\"408\":1,\"519\":1}}],[\"为什么多个\",{\"0\":{\"396\":1}}],[\"为什么\",{\"1\":{\"378\":1}}],[\"为原始类定义一个代理类\",{\"1\":{\"370\":1}}],[\"为事件注册单次监听器\",{\"1\":{\"338\":1}}],[\"为每种提供的颜色向页面添加一个按钮\",{\"1\":{\"319\":1}}],[\"为此\",{\"1\":{\"317\":1}}],[\"为模块指定默认输出\",{\"1\":{\"260\":1}}],[\"为了实现这种方式\",{\"1\":{\"542\":1}}],[\"为了实现这样一个函数\",{\"1\":{\"513\":1}}],[\"为了兼容\",{\"1\":{\"531\":1,\"541\":1}}],[\"为了推断\",{\"1\":{\"485\":1}}],[\"为了检测effect函数没有副作用\",{\"1\":{\"452\":1}}],[\"为了更正\",{\"1\":{\"408\":1,\"485\":1}}],[\"为了能在\",{\"1\":{\"400\":1}}],[\"为了给用户提供方便\",{\"1\":{\"260\":1}}],[\"为了规范开发\",{\"1\":{\"34\":1}}],[\"异步引入依赖模块3\",{\"1\":{\"257\":1}}],[\"异步\",{\"1\":{\"253\":1,\"257\":1}}],[\"同样的\",{\"1\":{\"529\":1}}],[\"同样出自robert\",{\"1\":{\"324\":1}}],[\"同理\",{\"1\":{\"516\":1}}],[\"同对象一样\",{\"1\":{\"428\":1}}],[\"同时也会对枚举值到枚举名进行反向映射\",{\"1\":{\"476\":1}}],[\"同时又不改变其结构\",{\"1\":{\"362\":1}}],[\"同时它的应用场景也非常容易识别\",{\"1\":{\"345\":1}}],[\"同时利用多态确保新功能可以在不修改原有代码的情况下插入系统\",{\"1\":{\"324\":1}}],[\"同步更新\",{\"0\":{\"451\":1},\"1\":{\"451\":1}}],[\"同步\",{\"1\":{\"253\":1,\"257\":1}}],[\"同服务器端\",{\"0\":{\"242\":1}}],[\"能够被断言为\",{\"1\":{\"516\":5,\"517\":1}}],[\"能够通过\",{\"1\":{\"513\":1}}],[\"能够清楚地显示依赖关系\",{\"1\":{\"251\":1}}],[\"能直接修改模块内部的数据\",{\"1\":{\"224\":1}}],[\"小接口比大接口更易于理解和测试\",{\"1\":{\"326\":1}}],[\"小猪课堂\",{\"1\":{\"274\":4,\"275\":5,\"276\":7,\"277\":2}}],[\"小结\",{\"1\":{\"251\":1}}],[\"小心\",{\"1\":{\"220\":1}}],[\"第三种方式是\",{\"1\":{\"541\":1}}],[\"第三方声明文件\",{\"0\":{\"524\":1}}],[\"第三方库模块\",{\"1\":{\"251\":1}}],[\"第一处是在对\",{\"1\":{\"500\":1}}],[\"第一种方式是\",{\"1\":{\"541\":1}}],[\"第一种\",{\"1\":{\"474\":1}}],[\"第一次调用时\",{\"1\":{\"354\":1}}],[\"第对应的数组索引\",{\"1\":{\"305\":1}}],[\"第二种方式是\",{\"1\":{\"541\":1}}],[\"第二种方式是使用数组泛型\",{\"1\":{\"474\":1}}],[\"第二处是在给\",{\"1\":{\"500\":1}}],[\"第二行的\",{\"1\":{\"488\":1}}],[\"第二次请求给你造成了困扰\",{\"1\":{\"456\":1}}],[\"第二个差异是因为\",{\"1\":{\"263\":1}}],[\"第二\",{\"1\":{\"75\":1}}],[\"第二或第三编辑组\",{\"1\":{\"18\":1}}],[\"自觉非常不爽的情况下\",{\"1\":{\"345\":1}}],[\"自动管理对象的创建和依赖关系\",{\"1\":{\"327\":1}}],[\"自动重启容器\",{\"1\":{\"285\":1}}],[\"自动生成package\",{\"1\":{\"235\":1}}],[\"自然而然绑定到了全局对象上\",{\"1\":{\"275\":1}}],[\"自定义模块\",{\"1\":{\"251\":1}}],[\"映射\",{\"1\":{\"250\":1,\"306\":1}}],[\"实际上\",{\"1\":{\"541\":1}}],[\"实际上是一个类数组\",{\"1\":{\"493\":1}}],[\"实际项目中我们容易遇到这种问题的场景可能就是定时器了\",{\"1\":{\"275\":1}}],[\"实现同步\",{\"0\":{\"452\":1}}],[\"实现克隆方法\",{\"1\":{\"358\":1}}],[\"实现抽象\",{\"1\":{\"350\":1}}],[\"实现方式\",{\"1\":{\"327\":1}}],[\"实现策略\",{\"1\":{\"324\":1}}],[\"实现了模块功能\",{\"1\":{\"270\":1}}],[\"实现代码的模块加载\",{\"1\":{\"247\":1}}],[\"实例中显示活动文件\",{\"1\":{\"19\":1}}],[\"实例\",{\"0\":{\"189\":1},\"1\":{\"12\":2}}],[\"由渲染引起的副作用\",{\"1\":{\"452\":1}}],[\"由芭芭拉\",{\"1\":{\"325\":1}}],[\"由robert\",{\"1\":{\"323\":1,\"327\":1}}],[\"由于全局变量不支持通过\",{\"1\":{\"551\":1}}],[\"由于很多第三方库是\",{\"1\":{\"541\":1}}],[\"由于并不常用也不推荐使用\",{\"1\":{\"541\":1}}],[\"由于是通过\",{\"1\":{\"536\":1}}],[\"由于历史遗留原因\",{\"1\":{\"531\":1}}],[\"由于历史原因\",{\"1\":{\"398\":1}}],[\"由于本章涉及大量新语法\",{\"1\":{\"522\":1}}],[\"由于它是只读属性\",{\"1\":{\"500\":1}}],[\"由于最终的通用类型取自候选类型\",{\"1\":{\"485\":1}}],[\"由于\",{\"1\":{\"398\":1,\"446\":1,\"512\":1,\"519\":2}}],[\"由于所有扩展的文件都从该存储中提取颜色信息\",{\"1\":{\"319\":1}}],[\"由于node\",{\"1\":{\"245\":1}}],[\"由上图可以看出\",{\"1\":{\"34\":1}}],[\"允许修改这个全局变量\",{\"1\":{\"527\":1}}],[\"允许\",{\"1\":{\"487\":1,\"516\":2}}],[\"允许父组件向其下层无论多深的任何组件提供信息\",{\"1\":{\"442\":1}}],[\"允许你将状态更新逻辑与事件处理程序分离开来\",{\"1\":{\"440\":1}}],[\"允许你将子元素分组\",{\"1\":{\"395\":1}}],[\"允许向一个现有的对象添加新的功能\",{\"1\":{\"362\":1}}],[\"允许接口的消费者选择合适的接口\",{\"1\":{\"326\":1}}],[\"允许在不修改现有客户端代码的情况下引入新的子类\",{\"1\":{\"325\":1}}],[\"允许用户更改当前聚焦页面的背景颜色\",{\"1\":{\"310\":1}}],[\"允许所有ip访问\",{\"1\":{\"286\":1}}],[\"允许所有ip\",{\"1\":{\"283\":1}}],[\"允许所有注册用户发布\",{\"1\":{\"283\":2}}],[\"允许所有人访问\",{\"1\":{\"283\":2}}],[\"允许指定回调函数\",{\"1\":{\"245\":1}}],[\"允许但不够语义化\",{\"1\":{\"197\":1}}],[\"页面引入require\",{\"0\":{\"251\":1}}],[\"页面使用引入\",{\"0\":{\"244\":1}}],[\"页面上下滚动\",{\"1\":{\"13\":1}}],[\"根据它们的需求将大接口拆分成小接口\",{\"1\":{\"326\":1}}],[\"根据eslint文档\",{\"1\":{\"123\":1}}],[\"根目录下运行browserify\",{\"1\":{\"243\":1}}],[\"局部\",{\"1\":{\"241\":1}}],[\"源码所在的目录\",{\"1\":{\"240\":1}}],[\"打包\",{\"1\":{\"270\":1}}],[\"打包处理js\",{\"0\":{\"243\":1}}],[\"打包生成文件的目录\",{\"1\":{\"240\":1}}],[\"打开弹出窗口并单击按钮将其变为绿色\",{\"1\":{\"318\":1}}],[\"打开新终端\",{\"1\":{\"22\":1}}],[\"打开\",{\"1\":{\"20\":1}}],[\"打开上一个\",{\"1\":{\"19\":1}}],[\"打开下一个\",{\"1\":{\"19\":1}}],[\"打开定义到边\",{\"1\":{\"17\":1}}],[\"打开文件\",{\"1\":{\"14\":1,\"19\":1}}],[\"借助browserify\",{\"0\":{\"239\":1}}],[\"浏览器右上角图标设置\",{\"1\":{\"320\":1}}],[\"浏览器资源是异步加载的\",{\"1\":{\"270\":1}}],[\"浏览器端实现\",{\"0\":{\"239\":1}}],[\"浏览器会允许你这样做\",{\"0\":{\"71\":1}}],[\"运行npm\",{\"1\":{\"291\":1}}],[\"运行于浏览器上\",{\"1\":{\"240\":1}}],[\"运行js文件\",{\"1\":{\"238\":1}}],[\"运算符去做map遍历\",{\"0\":{\"54\":1}}],[\"运算符而不是array\",{\"0\":{\"52\":1}}],[\"⑤\",{\"0\":{\"238\":1,\"244\":1,\"269\":1}}],[\"④\",{\"0\":{\"237\":1,\"243\":1,\"251\":1,\"258\":1,\"268\":1}}],[\"③\",{\"0\":{\"236\":1,\"242\":1,\"250\":1,\"257\":1,\"267\":1}}],[\"|\",{\"1\":{\"235\":6,\"240\":9,\"249\":8,\"256\":10,\"283\":1,\"305\":2,\"475\":2,\"478\":2,\"485\":2,\"487\":5,\"488\":4,\"499\":4,\"508\":6,\"512\":6,\"523\":2,\"526\":2,\"533\":2,\"534\":1,\"536\":3}}],[\"||\",{\"1\":{\"75\":1,\"81\":1,\"95\":1,\"138\":1,\"139\":7,\"145\":2,\"149\":3,\"202\":1,\"307\":1,\"359\":1,\"476\":1}}],[\"②\",{\"0\":{\"235\":1,\"241\":1,\"249\":1,\"256\":1,\"263\":1,\"266\":1}}],[\"①\",{\"0\":{\"234\":1,\"240\":1,\"248\":1,\"255\":1,\"262\":1,\"265\":1}}],[\"服务器端实现\",{\"0\":{\"233\":1}}],[\"此函数的主体将作为内容脚本执行\",{\"1\":{\"318\":1}}],[\"此代码从\",{\"1\":{\"317\":1}}],[\"此文件必须在清单manifest\",{\"1\":{\"317\":1}}],[\"此扩展程序使用按钮来更改背景颜色\",{\"1\":{\"317\":1}}],[\"此扩展将需要来自持久变量的信息\",{\"1\":{\"314\":1}}],[\"此时如果原有模块已经有了类型声明文件\",{\"1\":{\"547\":1}}],[\"此时我们可以使用\",{\"1\":{\"514\":1}}],[\"此时就需要扩展全局变量的类型\",{\"1\":{\"544\":1}}],[\"此时就只能用类型断言\",{\"1\":{\"513\":1}}],[\"此时就不受\",{\"1\":{\"506\":1}}],[\"此时可以使用类型断言\",{\"1\":{\"512\":1}}],[\"此时则会渲染\",{\"1\":{\"408\":1}}],[\"此时是独立函数调用\",{\"1\":{\"275\":1}}],[\"此时不是独立函数调用\",{\"1\":{\"275\":1}}],[\"此时\",{\"1\":{\"274\":1,\"275\":1,\"499\":1}}],[\"此处可以分别尝试两个实例的onclick方法\",{\"1\":{\"363\":1}}],[\"此处不能写成alerter\",{\"1\":{\"250\":1,\"251\":1}}],[\"此处我们有个疑问\",{\"1\":{\"231\":1}}],[\"此外还提供了实用的枚举类型方便我们使用\",{\"1\":{\"470\":1}}],[\"此外第三方库\",{\"1\":{\"269\":1}}],[\"此外在项目中如何引入第三方库\",{\"1\":{\"251\":1}}],[\"此外amd规范比commonjs规范在浏览器端实现要来着早\",{\"1\":{\"245\":1}}],[\"此外\",{\"1\":{\"177\":1,\"457\":1}}],[\"暴露在最外层的\",{\"1\":{\"534\":1}}],[\"暴露其\",{\"1\":{\"448\":1}}],[\"暴露什么数据\",{\"1\":{\"268\":1}}],[\"暴露模块\",{\"1\":{\"231\":1,\"250\":2,\"251\":1,\"253\":1}}],[\"暴露行为\",{\"1\":{\"224\":2}}],[\"特性\",{\"1\":{\"422\":1}}],[\"特点\",{\"0\":{\"230\":1}}],[\"特别是当你要输出可变的绑定\",{\"1\":{\"104\":1}}],[\"特别是在v8里\",{\"1\":{\"81\":1}}],[\"采用函数表达式|接口定义函数的方式时\",{\"1\":{\"504\":1}}],[\"采用\",{\"1\":{\"229\":1}}],[\"应尽可能减少重复\",{\"1\":{\"431\":1}}],[\"应尽量避免这种情况\",{\"1\":{\"431\":1}}],[\"应用十分广泛\",{\"1\":{\"503\":1}}],[\"应用程序中的模块依赖关系\",{\"1\":{\"412\":1}}],[\"应用示例\",{\"1\":{\"327\":1}}],[\"应用指南\",{\"1\":{\"325\":1}}],[\"应用\",{\"1\":{\"323\":1,\"326\":1,\"383\":1,\"386\":1}}],[\"应用主源文件\",{\"1\":{\"240\":1}}],[\"应用由模块组成\",{\"1\":{\"229\":1}}],[\"应该按需执行\",{\"1\":{\"453\":1}}],[\"应该谨慎使用\",{\"1\":{\"448\":1}}],[\"应该将商品放入购物车\",{\"1\":{\"421\":1}}],[\"应该将庞大而臃肿的接口拆分成更小\",{\"1\":{\"326\":1}}],[\"应该更改显示的图片\",{\"1\":{\"421\":1}}],[\"应该对扩展开放\",{\"1\":{\"324\":1}}],[\"应该放置在最前面\",{\"1\":{\"237\":1}}],[\"应该缩进\",{\"0\":{\"107\":1}}],[\"概述\",{\"0\":{\"229\":1}}],[\"二者都可以被实现\",{\"1\":{\"533\":1}}],[\"二者都可以被继承\",{\"1\":{\"533\":1}}],[\"二者意义相同\",{\"1\":{\"127\":1}}],[\"二十年前\",{\"1\":{\"328\":1}}],[\"二\",{\"0\":{\"227\":1,\"284\":1}}],[\"然而这样有一个缺点\",{\"1\":{\"508\":1}}],[\"然而\",{\"1\":{\"408\":1,\"440\":1,\"478\":1,\"480\":1}}],[\"然而一个页面需要引入多个js文件\",{\"1\":{\"226\":1}}],[\"然后使用\",{\"1\":{\"540\":1}}],[\"然后就可以使用全局变量\",{\"1\":{\"523\":1}}],[\"然后就是见证奇迹的时刻\",{\"1\":{\"60\":1}}],[\"然后再将\",{\"1\":{\"519\":1}}],[\"然后返回下一个结果的外部函数\",{\"1\":{\"438\":1}}],[\"然后返回该模块的exports对象\",{\"1\":{\"231\":1}}],[\"然后沿着树向上传播\",{\"1\":{\"417\":1}}],[\"然后通过克隆原型的方式来创建出一个与原型一样\",{\"1\":{\"357\":1}}],[\"然后选择选项\",{\"1\":{\"319\":1}}],[\"然后选择扩展程序\",{\"1\":{\"311\":1}}],[\"然后在使用方\",{\"1\":{\"537\":1}}],[\"然后在带有\",{\"1\":{\"319\":1}}],[\"然后在清单manifest\",{\"1\":{\"319\":1}}],[\"然后在index\",{\"1\":{\"269\":1}}],[\"然后单击重新加载链接\",{\"1\":{\"316\":1}}],[\"然后给他规定个连接字符\",{\"1\":{\"293\":1}}],[\"然后我们使用\",{\"1\":{\"275\":1}}],[\"然后我们在函数\",{\"1\":{\"274\":1}}],[\"然后将颜色应用为按钮的背景\",{\"1\":{\"317\":1}}],[\"然后将接收到的参数添加到这个副本的末尾\",{\"1\":{\"300\":1}}],[\"然后将\",{\"1\":{\"276\":1,\"427\":1}}],[\"然后将sea\",{\"1\":{\"255\":1}}],[\"然后将require\",{\"1\":{\"248\":1}}],[\"然后运行结果就被缓存了\",{\"1\":{\"230\":1}}],[\"然后做判断\",{\"1\":{\"217\":1}}],[\"然后对于任何强转后为\",{\"1\":{\"216\":1}}],[\"难以维护\",{\"1\":{\"226\":1}}],[\"导出的类型声明才能被导入\",{\"1\":{\"545\":1}}],[\"导出模块\",{\"1\":{\"522\":1,\"536\":1}}],[\"导出\",{\"1\":{\"522\":1,\"536\":1,\"537\":1,\"540\":1}}],[\"导出变量\",{\"1\":{\"197\":1,\"522\":1,\"536\":1}}],[\"导入另一个声明文件中的类型之外\",{\"1\":{\"548\":1}}],[\"导入的库\",{\"1\":{\"542\":1}}],[\"导入一个模块插件\",{\"1\":{\"547\":1}}],[\"导入一个\",{\"1\":{\"536\":1}}],[\"导入后\",{\"1\":{\"525\":1,\"537\":1}}],[\"导入\",{\"1\":{\"422\":1,\"525\":2,\"536\":1,\"551\":1}}],[\"导入插件\",{\"1\":{\"311\":1}}],[\"导致的不必要的耦合\",{\"1\":{\"326\":1}}],[\"导致请求过多\",{\"1\":{\"226\":1}}],[\"导航回扩展管理页面\",{\"1\":{\"316\":1}}],[\"按上下文归类会发生在表达式的类型与所处的位置相关时\",{\"1\":{\"486\":1}}],[\"按上下文归类\",{\"1\":{\"486\":1}}],[\"按需添加清理\",{\"0\":{\"455\":1}}],[\"按需加载\",{\"1\":{\"225\":1}}],[\"按照惯例\",{\"1\":{\"418\":1}}],[\"按照其在代码中出现的顺序\",{\"1\":{\"230\":1}}],[\"按钮\",{\"1\":{\"350\":1}}],[\"按关键字搜索\",{\"1\":{\"14\":1}}],[\"还是比较常用的\",{\"1\":{\"531\":1}}],[\"还是这个例子\",{\"1\":{\"520\":1}}],[\"还是绑定带\",{\"1\":{\"275\":1}}],[\"还可能是受到\",{\"1\":{\"515\":1}}],[\"还不能减少父类已经承诺的职责\",{\"1\":{\"325\":1}}],[\"还使得模块之间的依赖关系变得明显\",{\"1\":{\"224\":1}}],[\"还有一个语法也可以用来导入另一个声明文件\",{\"1\":{\"548\":1}}],[\"还有其他很多种声明语句\",{\"1\":{\"523\":1}}],[\"还有\",{\"1\":{\"34\":1,\"527\":1}}],[\"上不存在\",{\"1\":{\"514\":1}}],[\"上添加一个属性\",{\"1\":{\"514\":1}}],[\"上是没有\",{\"1\":{\"514\":1}}],[\"上没有\",{\"1\":{\"512\":1}}],[\"上下文归类会在很多情况下使用到\",{\"1\":{\"486\":1}}],[\"上下文的类型被忽略\",{\"1\":{\"486\":1}}],[\"上下文类型也会做为最佳通用类型的候选类型\",{\"1\":{\"486\":1}}],[\"上下文类型被忽略\",{\"1\":{\"486\":1}}],[\"上下文类型\",{\"0\":{\"486\":1}}],[\"上传图片\",{\"1\":{\"416\":1,\"418\":1}}],[\"上游npm库\",{\"1\":{\"283\":1}}],[\"上面提到了特殊情况\",{\"1\":{\"533\":1}}],[\"上面的代码只对等号右侧的匿名函数进行了类型定义\",{\"1\":{\"503\":1}}],[\"上面的例子编译时不会报错\",{\"1\":{\"512\":1}}],[\"上面的例子中\",{\"1\":{\"497\":1,\"512\":1,\"513\":2,\"514\":3,\"515\":1,\"519\":1}}],[\"上面的例子会被编译为\",{\"1\":{\"476\":1}}],[\"上面的写法相当于\",{\"1\":{\"276\":1}}],[\"上面代码说明\",{\"1\":{\"232\":1}}],[\"上面代码输出内部变量counter和改写这个变量的内部方法inccounter\",{\"1\":{\"232\":1}}],[\"上面代码通过module\",{\"1\":{\"231\":1}}],[\"上段代码我们使用\",{\"1\":{\"277\":1}}],[\"上段代码我们虽然使用\",{\"1\":{\"276\":1}}],[\"上段代码我们利用\",{\"1\":{\"276\":1}}],[\"上段代码我们在\",{\"1\":{\"275\":1}}],[\"上段代码中我们很容易会以为\",{\"1\":{\"275\":1}}],[\"上段代码非常简单\",{\"1\":{\"274\":1}}],[\"上例的声明文件可以等价的改写为\",{\"1\":{\"538\":1}}],[\"上例中使用了\",{\"1\":{\"541\":1}}],[\"上例中\",{\"1\":{\"488\":2,\"490\":1,\"493\":1,\"499\":1,\"500\":2,\"508\":1,\"523\":1,\"540\":1}}],[\"上例是在alerter\",{\"1\":{\"251\":1}}],[\"上例子通过jquery方法将页面的背景颜色改成红色\",{\"1\":{\"224\":1}}],[\"上的方法\",{\"0\":{\"46\":1}}],[\"操作需要\",{\"1\":{\"453\":1}}],[\"操作\",{\"0\":{\"446\":1}}],[\"操作数据的函数\",{\"1\":{\"224\":2}}],[\"操作参数对象对原始调用者会导致意想不到的副作用\",{\"1\":{\"80\":1}}],[\"外部只能通过暴露的方法操作\",{\"1\":{\"224\":1}}],[\"外部可以直接修改模块内部的数据\",{\"1\":{\"224\":1}}],[\"闭包\",{\"1\":{\"224\":1}}],[\"匿名函数自调用\",{\"1\":{\"224\":1}}],[\"匿名函数表达式和\",{\"0\":{\"128\":1}}],[\"内容\",{\"1\":{\"536\":1}}],[\"内容脚本\",{\"1\":{\"310\":1}}],[\"内\",{\"1\":{\"460\":1}}],[\"内联\",{\"1\":{\"400\":1}}],[\"内部\",{\"1\":{\"531\":1}}],[\"内部页面上注入内容脚本\",{\"1\":{\"318\":1}}],[\"内部函数\",{\"1\":{\"257\":1}}],[\"内部变量数据\",{\"1\":{\"257\":1}}],[\"内部私有的函数\",{\"1\":{\"224\":2}}],[\"内部调用他们\",{\"1\":{\"459\":1}}],[\"内部调用\",{\"1\":{\"224\":2}}],[\"内部状态可以被外部改写\",{\"1\":{\"224\":1}}],[\"内声明函数\",{\"0\":{\"71\":1}}],[\"减少对象的遍历\",{\"1\":{\"350\":1}}],[\"减少依赖\",{\"1\":{\"326\":1}}],[\"减少风险\",{\"1\":{\"324\":1}}],[\"减少变更风险\",{\"1\":{\"323\":1}}],[\"减少数组的length\",{\"1\":{\"295\":1}}],[\"减少命名空间污染\",{\"1\":{\"225\":1}}],[\"减少了全局变量\",{\"1\":{\"224\":1}}],[\"减少突变的发生\",{\"1\":{\"220\":1}}],[\"作出不同的处理\",{\"1\":{\"508\":1}}],[\"作用域包\",{\"1\":{\"283\":2}}],[\"作用\",{\"1\":{\"224\":2}}],[\"作为唯一的参数\",{\"1\":{\"418\":1}}],[\"作为最后的手段\",{\"1\":{\"411\":1}}],[\"作为子组件传递\",{\"0\":{\"405\":1}}],[\"作为全局事件总线\",{\"1\":{\"338\":1}}],[\"作为语句的花括号内也要加空格\",{\"0\":{\"168\":1}}],[\"作为一个实例方法应该表明它根据接收者的属性有不同的行为\",{\"0\":{\"98\":1}}],[\"简介\",{\"0\":{\"377\":1,\"466\":1}}],[\"简而言之\",{\"1\":{\"374\":1}}],[\"简化了维护和升级过程\",{\"1\":{\"325\":1}}],[\"简单的例子\",{\"0\":{\"497\":1},\"1\":{\"487\":1}}],[\"简单的chrome扩展demo\",{\"1\":{\"320\":1}}],[\"简单来说\",{\"1\":{\"456\":1}}],[\"简单来说就一句话\",{\"1\":{\"264\":1}}],[\"简单点说就是通过\",{\"1\":{\"370\":1}}],[\"简单工厂模式\",{\"0\":{\"344\":1}}],[\"简单对象封装\",{\"1\":{\"224\":1}}],[\"简称和缩写应该全部大写或全部小写\",{\"0\":{\"196\":1}}],[\"污染全局命名空间\",{\"1\":{\"224\":1}}],[\"问题\",{\"1\":{\"224\":3}}],[\"封装成几个块\",{\"1\":{\"223\":1}}],[\"什么是声明文件\",{\"1\":{\"523\":1}}],[\"什么是声明语句\",{\"0\":{\"523\":1}}],[\"什么是接口\",{\"0\":{\"496\":1}}],[\"什么是\",{\"0\":{\"467\":1}}],[\"什么是抽象工厂模式\",{\"1\":{\"350\":1}}],[\"什么是模块\",{\"0\":{\"223\":1}}],[\"什么时候不用箭头函数\",{\"1\":{\"85\":1}}],[\"原始实例不受影响\",{\"1\":{\"358\":1}}],[\"原型模式在javascript里的使用简直是无处不在\",{\"1\":{\"358\":1}}],[\"原型模式\",{\"0\":{\"356\":1}}],[\"原因是\",{\"1\":{\"512\":1}}],[\"原因\",{\"1\":{\"323\":1}}],[\"原则\",{\"1\":{\"323\":1}}],[\"原数组没变\",{\"1\":{\"301\":1}}],[\"原数组未被修改\",{\"1\":{\"300\":1}}],[\"原数组改变\",{\"1\":{\"299\":1}}],[\"原数组不变\",{\"1\":{\"293\":1}}],[\"原文\",{\"1\":{\"221\":1}}],[\"原有的ios播放器类\",{\"1\":{\"367\":2}}],[\"原有的android播放器类\",{\"1\":{\"367\":2}}],[\"原有的\",{\"1\":{\"34\":1}}],[\"测试覆盖率是我们努力的目标\",{\"1\":{\"220\":1}}],[\"偶尔被用来测试一些小的\",{\"1\":{\"220\":1}}],[\"首先通过abstractclass\",{\"1\":{\"350\":1}}],[\"首先在名为\",{\"1\":{\"319\":1}}],[\"首先在后台脚本中包含runtime\",{\"1\":{\"314\":1}}],[\"首先\",{\"1\":{\"310\":1}}],[\"首先安装依赖npm\",{\"1\":{\"269\":1}}],[\"首先我们要依赖多个模块\",{\"1\":{\"226\":1}}],[\"首选\",{\"1\":{\"220\":1}}],[\"首长这样警告我们\",{\"0\":{\"118\":1}}],[\"尽量避免断言后调用方法或引用深层属性\",{\"1\":{\"512\":1}}],[\"尽量避免对象和函数依赖\",{\"1\":{\"460\":1}}],[\"尽量去写很多小而美的纯函数\",{\"1\":{\"220\":1}}],[\"尽管前置下划线通常的概念上意味着\",{\"1\":{\"191\":1}}],[\"会作为全局类型作用于整个项目中\",{\"1\":{\"534\":1}}],[\"会解析项目中所有的\",{\"1\":{\"523\":1}}],[\"会更加方便\",{\"1\":{\"514\":1}}],[\"会优先从最前面的函数定义开始匹配\",{\"1\":{\"508\":1}}],[\"会根据类型推论的规则推断出一个类型\",{\"1\":{\"488\":1}}],[\"会使用这些表达式的类型来推断出一个最合适的通用类型\",{\"1\":{\"485\":1}}],[\"会使用联合类型替代\",{\"1\":{\"475\":1}}],[\"会得到正确的类型\",{\"1\":{\"475\":1}}],[\"会导致非常混乱的错误\",{\"1\":{\"460\":1}}],[\"会忽略第二次渲染时的\",{\"1\":{\"457\":1}}],[\"会自动更新\",{\"1\":{\"446\":1}}],[\"会自动将左侧的值转换成布尔类型以判断条件成立与否\",{\"1\":{\"408\":1}}],[\"会重新渲染组件\",{\"1\":{\"445\":1}}],[\"会变的十分冗长和不便\",{\"1\":{\"442\":1}}],[\"会排队直到下一次渲染\",{\"1\":{\"441\":1}}],[\"会返回一个新数组\",{\"1\":{\"428\":1}}],[\"会改变原始数组\",{\"1\":{\"428\":1}}],[\"会触发渲染\",{\"0\":{\"424\":1}}],[\"会立即执行\",{\"1\":{\"415\":1}}],[\"会在后续章节中详细介绍\",{\"1\":{\"490\":1}}],[\"会在每次渲染后都会执行\",{\"1\":{\"453\":1}}],[\"会在\",{\"1\":{\"415\":1}}],[\"会在终端中输出提示\",{\"1\":{\"282\":1}}],[\"会将它们合并到一个声明中\",{\"1\":{\"533\":1}}],[\"会将添加了默认值的参数识别为可选参数\",{\"1\":{\"506\":1}}],[\"会将\",{\"1\":{\"408\":1}}],[\"会读取\",{\"1\":{\"399\":1}}],[\"会先找到一个对象作为原型\",{\"1\":{\"357\":1}}],[\"会创建单例\",{\"1\":{\"354\":1}}],[\"会一直常驻的后台js或后台页面\",{\"1\":{\"320\":1}}],[\"会扫描指定文件以获取其他说明\",{\"1\":{\"312\":1}}],[\"会执行下面操作\",{\"1\":{\"277\":1}}],[\"会被缓存\",{\"1\":{\"232\":1}}],[\"会报错\",{\"1\":{\"231\":1,\"250\":1,\"251\":1,\"513\":1}}],[\"会把一个非数字变量强转成数字\",{\"1\":{\"217\":1}}],[\"会丢失\",{\"1\":{\"34\":1}}],[\"会丢失原来的\",{\"1\":{\"34\":1}}],[\"幂操作符\",{\"1\":{\"213\":1}}],[\"箭头函数\",{\"1\":{\"213\":1}}],[\"暂存jquery查找\",{\"0\":{\"207\":1}}],[\"例如聚焦节点\",{\"1\":{\"446\":1}}],[\"例如暗夜模式\",{\"1\":{\"442\":1}}],[\"例如检查权限\",{\"1\":{\"371\":1}}],[\"例如http\",{\"1\":{\"318\":1}}],[\"例如它需要侦听的重要事件\",{\"1\":{\"312\":1}}],[\"例如\",{\"0\":{\"204\":1},\"1\":{\"318\":1,\"398\":2,\"400\":2,\"405\":1,\"408\":1,\"415\":1,\"419\":1,\"442\":1,\"446\":1,\"453\":2,\"480\":1,\"485\":2,\"533\":2}}],[\"程序员\",{\"0\":{\"204\":1}}],[\"通知所有订阅者\",{\"1\":{\"337\":1}}],[\"通知\",{\"1\":{\"320\":1}}],[\"通过声明合并\",{\"1\":{\"544\":1}}],[\"通过类型断言及时的把\",{\"1\":{\"515\":1}}],[\"通过判断是否存在\",{\"1\":{\"513\":1}}],[\"通过以下三个步骤来实现它\",{\"1\":{\"442\":1}}],[\"通过\",{\"1\":{\"411\":1,\"525\":4,\"536\":1}}],[\"通过children读取传递的组件\",{\"1\":{\"405\":1}}],[\"通过框架创建\",{\"0\":{\"381\":1}}],[\"通过src引用react\",{\"0\":{\"380\":1}}],[\"通过代理访问和修改属性\",{\"1\":{\"371\":1}}],[\"通过object\",{\"1\":{\"350\":1}}],[\"通过编写\",{\"1\":{\"328\":1}}],[\"通过构造函数注入\",{\"1\":{\"327\":1}}],[\"通过依赖抽象而不是具体实现\",{\"1\":{\"327\":1}}],[\"通过最小化接口的粒度来优化代码结构\",{\"1\":{\"326\":1}}],[\"通过减少不必要的依赖\",{\"1\":{\"326\":1}}],[\"通过继承实现具体功能的多样化\",{\"1\":{\"324\":1}}],[\"通过限制类的职责范围\",{\"1\":{\"323\":1}}],[\"通过标记所选按钮并保存对按钮单击做出反应\",{\"1\":{\"319\":1}}],[\"通过将以下内容添加到文件末尾来更新\",{\"1\":{\"318\":1}}],[\"通过单击开发人员模式旁边的切换开关启用开发人员模式\",{\"1\":{\"311\":2}}],[\"通过单击\",{\"1\":{\"311\":1}}],[\"通过单击扩展菜单按钮并选择菜单底部的管理扩展来打开此页面\",{\"1\":{\"311\":1}}],[\"通过导航到打开扩展管理页面\",{\"1\":{\"311\":1}}],[\"通过pm2启动verdaccio\",{\"1\":{\"286\":1}}],[\"通过给第三方库发\",{\"1\":{\"536\":1}}],[\"通过给\",{\"1\":{\"520\":1}}],[\"通过给定的配置可以解决以下问题\",{\"1\":{\"283\":1}}],[\"通过给window添加属性来向外暴露接口\",{\"1\":{\"224\":1}}],[\"通过两者的比较\",{\"1\":{\"251\":1}}],[\"通过require方法\",{\"1\":{\"247\":1}}],[\"通过define方法\",{\"1\":{\"247\":1}}],[\"通过node运行app\",{\"0\":{\"238\":1}}],[\"通过哈希而不是原始值向事件装载数据时\",{\"0\":{\"204\":1}}],[\"通常我们会把声明语句放到一个单独的文件\",{\"1\":{\"523\":1}}],[\"通常我们认为这种方式主观上易读\",{\"1\":{\"45\":1}}],[\"通常包含函数的参数\",{\"1\":{\"486\":1}}],[\"通常是作为对交互的响应\",{\"1\":{\"458\":1}}],[\"通常是单行表达式\",{\"0\":{\"137\":1}}],[\"通常的解决办法是实现清理函数\",{\"1\":{\"456\":1}}],[\"通常来说\",{\"1\":{\"442\":1}}],[\"通常\",{\"1\":{\"417\":1,\"440\":1,\"442\":1,\"450\":2}}],[\"通常在你的组件内部定义\",{\"1\":{\"415\":1}}],[\"相同处\",{\"1\":{\"533\":1}}],[\"相同位置的不同组件会使\",{\"1\":{\"436\":1}}],[\"相同位置的相同组件会使得\",{\"1\":{\"436\":1}}],[\"相似\",{\"1\":{\"478\":1}}],[\"相比于\",{\"1\":{\"542\":1}}],[\"相比与\",{\"1\":{\"541\":1}}],[\"相比\",{\"1\":{\"440\":1}}],[\"相反\",{\"1\":{\"427\":1,\"448\":1}}],[\"相反的\",{\"0\":{\"200\":1}}],[\"相当于传引用\",{\"0\":{\"33\":1}}],[\"维护和理解\",{\"0\":{\"200\":1}}],[\"赞同\",{\"1\":{\"197\":1}}],[\"大部分\",{\"1\":{\"398\":1}}],[\"大部分属性命名\",{\"0\":{\"398\":1}}],[\"大多数路由解决方案在其内部使用\",{\"1\":{\"442\":1}}],[\"大多数\",{\"1\":{\"315\":1,\"453\":1}}],[\"大家可能会注意到\",{\"1\":{\"513\":1}}],[\"大家注意这不是默认调用规则\",{\"1\":{\"277\":1}}],[\"大家想一想\",{\"1\":{\"276\":1}}],[\"大写变量处在export的最高级\",{\"1\":{\"197\":1}}],[\"大写变量不应该在同一个文件里定义并使用\",{\"1\":{\"197\":1}}],[\"大小写完全一致\",{\"0\":{\"193\":1}}],[\"帮助开发者去辨识一个变量是不是不可变的\",{\"1\":{\"197\":1}}],[\"单个导入\",{\"1\":{\"541\":3}}],[\"单个导出\",{\"1\":{\"541\":1}}],[\"单一职责的类更容易编写单元测试\",{\"1\":{\"323\":1}}],[\"单一功能原则\",{\"0\":{\"323\":1},\"1\":{\"322\":1}}],[\"单击\",{\"1\":{\"421\":1}}],[\"单击轮播图上的\",{\"1\":{\"421\":1}}],[\"单击详细信息并向下滚动详细信息页面并选择扩展选项\",{\"1\":{\"319\":1}}],[\"单击按钮时\",{\"1\":{\"318\":1}}],[\"单击该操作将打开一个弹出窗口\",{\"1\":{\"317\":1}}],[\"单例模式\",{\"0\":{\"352\":1}}],[\"单例\",{\"0\":{\"195\":1}}],[\"单行注释用\",{\"0\":{\"149\":1}}],[\"^\",{\"1\":{\"193\":1}}],[\"时没有编译错误\",{\"1\":{\"512\":1}}],[\"时报错的问题了\",{\"1\":{\"512\":1}}],[\"时最好牢记以下两点\",{\"1\":{\"441\":1}}],[\"时触发\",{\"1\":{\"414\":1}}],[\"时生效\",{\"1\":{\"403\":1}}],[\"时\",{\"1\":{\"275\":2,\"411\":1,\"431\":1,\"440\":3,\"445\":1,\"447\":1,\"458\":1,\"468\":1,\"516\":1,\"543\":1}}],[\"时用大驼峰\",{\"0\":{\"195\":1}}],[\"时用缩进\",{\"0\":{\"160\":1}}],[\"时候的参数也叫a\",{\"0\":{\"193\":1}}],[\"qq\",{\"1\":{\"289\":1,\"290\":1}}],[\"q\",{\"1\":{\"188\":1}}],[\"qux\",{\"1\":{\"162\":2}}],[\"queryselector\",{\"1\":{\"319\":1,\"527\":3}}],[\"queryselectorall\",{\"1\":{\"52\":1}}],[\"query\",{\"1\":{\"188\":1,\"318\":1}}],[\"queue\",{\"1\":{\"92\":9,\"93\":5}}],[\"quux\",{\"1\":{\"83\":2,\"112\":1,\"167\":4}}],[\"quoted\",{\"1\":{\"66\":2}}],[\"quick\",{\"1\":{\"12\":1,\"17\":1}}],[\"布尔不是\",{\"1\":{\"475\":1}}],[\"布尔类型\",{\"0\":{\"471\":1},\"1\":{\"470\":1}}],[\"布尔\",{\"0\":{\"186\":1}}],[\"布尔值用缩写\",{\"0\":{\"134\":1}}],[\"最简单的方法是使用\",{\"1\":{\"490\":1}}],[\"最佳通用类型有\",{\"1\":{\"486\":1}}],[\"最佳通用类型\",{\"0\":{\"485\":1}}],[\"最终在靠近应用顶部的位置可能会有很多\",{\"1\":{\"442\":1}}],[\"最终会被转化为\",{\"1\":{\"398\":1}}],[\"最好也将声明文件与\",{\"1\":{\"536\":1}}],[\"最好能够将调用了它之后的返回值断言成一个精确的类型\",{\"1\":{\"515\":1}}],[\"最好的方法是使用一种可以删除重复请求\",{\"1\":{\"456\":1}}],[\"最好以扁平化方式构建\",{\"1\":{\"431\":1}}],[\"最好是在webpack\",{\"1\":{\"108\":1}}],[\"最初只支持信用卡支付\",{\"1\":{\"324\":1}}],[\"最后再用\",{\"1\":{\"538\":1}}],[\"最后一次是函数实现\",{\"1\":{\"508\":1}}],[\"最后一个表示页面空闲时\",{\"1\":{\"320\":1}}],[\"最后一步是添加选项逻辑\",{\"1\":{\"319\":1}}],[\"最后返回新构建的数组\",{\"1\":{\"300\":1}}],[\"最大的价值\",{\"1\":{\"514\":1}}],[\"最大的32位整数是\",{\"0\":{\"185\":1}}],[\"最大注册用户数\",{\"1\":{\"283\":2}}],[\"数学家\",{\"1\":{\"410\":1}}],[\"数字类型的变量\",{\"1\":{\"514\":1}}],[\"数字类型\",{\"0\":{\"472\":1},\"1\":{\"470\":1}}],[\"数字和其它\",{\"1\":{\"400\":1}}],[\"数字使用64\",{\"0\":{\"185\":1}}],[\"数据类型\",{\"0\":{\"469\":1}}],[\"数据层简化了将内容\",{\"1\":{\"385\":1}}],[\"数据是私有的\",{\"1\":{\"224\":1}}],[\"数据不安全\",{\"1\":{\"224\":1}}],[\"数组泛型\",{\"0\":{\"491\":1}}],[\"数组的一些方法的参数也会根据数组在定义时约定的类型进行限制\",{\"1\":{\"490\":1}}],[\"数组的项中不允许出现其他的类型\",{\"1\":{\"490\":1}}],[\"数组的类型\",{\"0\":{\"489\":1}}],[\"数组类型有多种定义方式\",{\"1\":{\"489\":1}}],[\"数组类型\",{\"0\":{\"474\":1},\"1\":{\"470\":1}}],[\"数组是另外一种可以存储在\",{\"1\":{\"428\":1}}],[\"数组生成的jsx元素必须用\",{\"1\":{\"410\":1}}],[\"数组和函数\",{\"1\":{\"401\":1}}],[\"数组中的每一项运行给定函数\",{\"1\":{\"307\":1,\"308\":1}}],[\"数组本身\",{\"1\":{\"305\":1}}],[\"数组被改变\",{\"1\":{\"298\":1}}],[\"数组方法整理\",{\"0\":{\"292\":1}}],[\"数组\",{\"1\":{\"133\":1,\"441\":1}}],[\"转发\",{\"1\":{\"448\":1}}],[\"转换string常需要带上基数\",{\"0\":{\"183\":1}}],[\"转到上个错误或警告\",{\"1\":{\"14\":1}}],[\"转到下个错误或警告\",{\"1\":{\"14\":1}}],[\"转到编辑器中的符号\",{\"1\":{\"14\":1}}],[\"转到文件的结尾\",{\"1\":{\"13\":1}}],[\"转到文件的开头\",{\"1\":{\"13\":1}}],[\"转到行首\",{\"1\":{\"13\":1}}],[\"做一次浅拷贝\",{\"1\":{\"338\":1}}],[\"做类型转换\",{\"0\":{\"183\":1}}],[\"做幂运算时用幂操作符\",{\"0\":{\"116\":1}}],[\"并没有真的定义一个变量\",{\"1\":{\"523\":1}}],[\"并没有按照我们的想法去绑定\",{\"1\":{\"275\":1}}],[\"并不兼容\",{\"1\":{\"519\":1}}],[\"并不关心\",{\"1\":{\"516\":1}}],[\"并不是任何一个类型都可以被断言为任何另一个类型\",{\"1\":{\"516\":1}}],[\"并不是所有人都喜欢用\",{\"1\":{\"440\":1}}],[\"并给出一个兼容所有候选类型的类型\",{\"1\":{\"485\":1}}],[\"并缓存请求响应的解决方案\",{\"1\":{\"456\":1}}],[\"并在需要清除它时传入\",{\"1\":{\"447\":1}}],[\"并在需要调整其外观的组件中使用该\",{\"1\":{\"442\":1}}],[\"并把\",{\"1\":{\"433\":1}}],[\"并使用新数组设置\",{\"1\":{\"428\":1}}],[\"并通过其索引或某种类型的\",{\"1\":{\"447\":1}}],[\"并通过把\",{\"1\":{\"427\":1}}],[\"并通过配置代码检查去捕获没有带分号的地方可以帮助你防止这种错误\",{\"1\":{\"179\":1}}],[\"并会改变前一次渲染\",{\"1\":{\"427\":1}}],[\"并委派给不同的对象对这些算法进行管理\",{\"1\":{\"374\":1}}],[\"并提供一个访问它的全局访问点\",{\"1\":{\"353\":1}}],[\"并将它们视为一个接口\",{\"1\":{\"533\":1}}],[\"并将其包裹在\",{\"1\":{\"405\":1}}],[\"并将其放置在扩展程序的目录中\",{\"1\":{\"317\":1}}],[\"并将每个算法进行封装\",{\"1\":{\"374\":1}}],[\"并将每个算法封装起来\",{\"1\":{\"374\":1}}],[\"并将concreteclass的原型指向abstractclass的原型\",{\"1\":{\"350\":1}}],[\"并为单击该按钮时注册一个侦听器\",{\"1\":{\"319\":1}}],[\"并添加以下代码\",{\"1\":{\"317\":1}}],[\"并返回数组的长度\",{\"1\":{\"297\":1}}],[\"并返回删除元素的值\",{\"1\":{\"296\":1}}],[\"并返回修改后的长度\",{\"1\":{\"294\":1}}],[\"并引入\",{\"0\":{\"248\":1,\"255\":1}}],[\"并进行组合在一起\",{\"1\":{\"223\":1}}],[\"并且使用了\",{\"1\":{\"548\":1}}],[\"并且\",{\"1\":{\"454\":1}}],[\"并且只在用户点击按钮时调用你的函数\",{\"1\":{\"415\":1}}],[\"并且在大部分代码库中使用它\",{\"1\":{\"393\":1}}],[\"并且可以被替换使用\",{\"1\":{\"374\":1}}],[\"并且可能不需要每个选项\",{\"1\":{\"310\":1}}],[\"并且可能会导致应用程序中的值递增或递减的无声错误\",{\"1\":{\"123\":1}}],[\"并且不会缓存值\",{\"1\":{\"263\":1}}],[\"并且允许非同步加载模块\",{\"1\":{\"251\":1}}],[\"并且难以测试\",{\"0\":{\"200\":1}}],[\"并且他包含的所有子属性都是不可变的\",{\"1\":{\"197\":1}}],[\"并且明确了开发者的意图\",{\"1\":{\"139\":1}}],[\"并且它们的优先级显而易见时\",{\"0\":{\"139\":1}}],[\"并且始终遵循以下简单规则\",{\"0\":{\"133\":1}}],[\"并且页更容易被许多\",{\"1\":{\"45\":1}}],[\"并且这个表达式没有副作用\",{\"0\":{\"55\":1}}],[\"并且这个\",{\"1\":{\"34\":1}}],[\"有的第三方库扩展了一个全局变量\",{\"1\":{\"544\":1}}],[\"有的编程语言中会建议接口的名称加上\",{\"1\":{\"497\":1}}],[\"有多种方式可以导入\",{\"1\":{\"541\":1}}],[\"有不小心被删除的风险\",{\"1\":{\"536\":1}}],[\"有两种常见的定义函数的方式\",{\"1\":{\"502\":1}}],[\"有两种方式可以定义数组\",{\"1\":{\"474\":1}}],[\"有些时候候选类型共享相同的通用类型\",{\"1\":{\"485\":1}}],[\"有意重复挂载你的组件\",{\"1\":{\"456\":1}}],[\"有时通过\",{\"1\":{\"547\":1}}],[\"有时我们希望不要完全匹配一个形状\",{\"1\":{\"498\":1}}],[\"有时\",{\"1\":{\"453\":1}}],[\"有时可能需要访问由\",{\"1\":{\"446\":1}}],[\"有时候我们希望对象中的一些字段只能在创建的时候被赋值\",{\"1\":{\"500\":1}}],[\"有时候我们希望一个接口允许有任意的属性\",{\"1\":{\"499\":1}}],[\"有时候\",{\"1\":{\"433\":1,\"477\":1}}],[\"有构造函数的地方\",{\"1\":{\"345\":1}}],[\"有四种不同的咖啡模式\",{\"1\":{\"333\":1}}],[\"有一个共同的状态属性吗\",{\"1\":{\"332\":1}}],[\"有一个明确的方式进口和一个明确的出口方式来保证一致性\",{\"1\":{\"102\":1}}],[\"有自己的作用域\",{\"1\":{\"229\":1}}],[\"有结尾逗号的\",{\"1\":{\"177\":1}}],[\"要使得\",{\"1\":{\"516\":2,\"517\":1}}],[\"要在\",{\"1\":{\"502\":1}}],[\"要在配置文件里中添加listen\",{\"1\":{\"286\":1}}],[\"要移除依赖\",{\"1\":{\"460\":1}}],[\"要么使用长一点但更明确的\",{\"1\":{\"410\":1}}],[\"要创建一个新的\",{\"1\":{\"383\":1,\"384\":1,\"385\":1,\"386\":1}}],[\"要解决这个问题\",{\"1\":{\"350\":1}}],[\"要查找的项和\",{\"1\":{\"303\":1,\"304\":1}}],[\"要查看pm2启动的服务的监听地址和端口\",{\"1\":{\"286\":1}}],[\"要删除的项数和要插入的任意数量的项\",{\"1\":{\"302\":1}}],[\"要删除的项数\",{\"1\":{\"302\":1}}],[\"要删除的第一项的位置和要删除的项数\",{\"1\":{\"302\":1}}],[\"要实现这一点\",{\"1\":{\"298\":1,\"433\":1}}],[\"要进一步了解\",{\"1\":{\"286\":1}}],[\"要配置发布包\",{\"1\":{\"283\":1}}],[\"要从服务器端加载模块\",{\"1\":{\"245\":1}}],[\"要想让模块再次运行\",{\"1\":{\"230\":1}}],[\"要\",{\"0\":{\"177\":1}}],[\"额外结尾逗号\",{\"0\":{\"177\":1}}],[\"之外\",{\"1\":{\"523\":1}}],[\"之前举的例子就是通过\",{\"1\":{\"526\":1}}],[\"之前提到过\",{\"1\":{\"512\":1}}],[\"之前\",{\"1\":{\"450\":1}}],[\"之间定义时是什么关系\",{\"1\":{\"516\":1}}],[\"之间切换\",{\"1\":{\"440\":1}}],[\"之间的差异\",{\"1\":{\"456\":1}}],[\"之间的\",{\"1\":{\"415\":1}}],[\"之间要有空格\",{\"0\":{\"172\":1}}],[\"之类的框架有什么区别\",{\"0\":{\"391\":1}}],[\"之后\",{\"1\":{\"34\":1,\"515\":1,\"541\":1}}],[\"参考kangax的es5兼容性列表\",{\"0\":{\"211\":1}}],[\"参考上述花括号和中括号的规则\",{\"0\":{\"170\":1}}],[\"参数只能是最后一个参数\",{\"1\":{\"507\":1}}],[\"参数默认值\",{\"0\":{\"506\":1}}],[\"参数类型\",{\"1\":{\"504\":1}}],[\"参数\",{\"1\":{\"502\":1,\"505\":1,\"507\":3}}],[\"参数分别为\",{\"1\":{\"305\":1}}],[\"参数都是function类型\",{\"1\":{\"305\":1}}],[\"参数列表和函数名之间不空格\",{\"0\":{\"157\":1}}],[\"参数定义了但未使用\",{\"1\":{\"125\":1}}],[\"参数总是放在圆括号里\",{\"0\":{\"88\":1}}],[\"参数重新赋值会导致意外行为\",{\"1\":{\"81\":1}}],[\"计算通用类型算法会考虑所有的候选类型\",{\"1\":{\"485\":1}}],[\"计算下一个\",{\"1\":{\"426\":1}}],[\"计算属性内要空格\",{\"0\":{\"170\":1}}],[\"计算成\",{\"1\":{\"133\":6}}],[\"长字符串不受此规则限制\",{\"1\":{\"167\":1}}],[\"包就知道是否存在该声明文件\",{\"1\":{\"536\":1}}],[\"包的类型声明文件\",{\"1\":{\"542\":1}}],[\"包的声明文件\",{\"1\":{\"543\":1}}],[\"包的声明文件中\",{\"1\":{\"537\":1}}],[\"包的声明文件与全局变量的声明文件有很大区别\",{\"1\":{\"537\":1}}],[\"包的声明文件主要有以下几种语法\",{\"1\":{\"536\":1}}],[\"包的声明文件可能存在于两个地方\",{\"1\":{\"536\":1}}],[\"包的维护者没有提供声明文件\",{\"1\":{\"536\":1}}],[\"包的时候\",{\"1\":{\"536\":1}}],[\"包绑定在一起\",{\"1\":{\"536\":2}}],[\"包创建声明文件之前\",{\"1\":{\"536\":1}}],[\"包或者\",{\"1\":{\"545\":1,\"546\":1}}],[\"包或\",{\"0\":{\"545\":1},\"1\":{\"525\":2,\"545\":1,\"550\":1}}],[\"包\",{\"0\":{\"536\":1},\"1\":{\"525\":1,\"536\":1}}],[\"包装\",{\"1\":{\"363\":1}}],[\"包含很多子属性\",{\"1\":{\"531\":1}}],[\"包含了\",{\"1\":{\"516\":1}}],[\"包含五个表单项\",{\"1\":{\"441\":1}}],[\"包含选项页面可以让用户更好地控制扩展程序的功能\",{\"1\":{\"319\":1}}],[\"包含空格\",{\"0\":{\"167\":1}}],[\"包括对象\",{\"1\":{\"401\":1,\"427\":1}}],[\"包括\",{\"1\":{\"386\":1}}],[\"包括storage\",{\"1\":{\"315\":1}}],[\"包括未授权用户\",{\"1\":{\"283\":2}}],[\"包名\",{\"1\":{\"235\":1}}],[\"包裹起来\",{\"1\":{\"69\":1}}],[\"花括号里加空格\",{\"0\":{\"166\":1}}],[\"花括号与样式指南中每个其他花括号块遵循相同的缩进规则\",{\"1\":{\"107\":1}}],[\"逗号分隔符还是要空格的\",{\"1\":{\"165\":1}}],[\"逗号也是\",{\"1\":{\"107\":1}}],[\"看示例\",{\"0\":{\"165\":1}}],[\"↵\",{\"1\":{\"159\":3}}],[\"∙∙const\",{\"1\":{\"155\":1}}],[\"∙∙∙∙const\",{\"1\":{\"155\":1}}],[\"∙const\",{\"1\":{\"155\":1}}],[\"需要使用\",{\"1\":{\"540\":1,\"541\":1}}],[\"需要使用类型断言获取\",{\"1\":{\"513\":1}}],[\"需要先看看它的声明文件是否已经存在\",{\"1\":{\"536\":1}}],[\"需要满足\",{\"1\":{\"519\":1}}],[\"需要直接调用类型转换的方法\",{\"1\":{\"518\":1}}],[\"需要直接注入页面的js\",{\"1\":{\"320\":1}}],[\"需要优先把精确的定义写在前面\",{\"1\":{\"508\":1}}],[\"需要把输入和输出都考虑到\",{\"1\":{\"502\":1}}],[\"需要注意的是\",{\"1\":{\"499\":1,\"505\":1,\"512\":1,\"514\":1,\"516\":1,\"527\":1,\"541\":1}}],[\"需要\",{\"1\":{\"453\":1}}],[\"需要指定如何停止\",{\"1\":{\"453\":1}}],[\"需要遵循以下三个规则\",{\"1\":{\"453\":1}}],[\"需要用括号括起来\",{\"1\":{\"503\":1}}],[\"需要用\",{\"1\":{\"398\":1}}],[\"需要用一个父标签把它们包裹起来\",{\"1\":{\"395\":1}}],[\"需要借助browserify将app\",{\"1\":{\"242\":1}}],[\"需要实现\",{\"0\":{\"151\":1}}],[\"需要计算出来或todo\",{\"0\":{\"151\":1}}],[\"动作是fixme\",{\"0\":{\"151\":1}}],[\"判断依据是\",{\"1\":{\"536\":1}}],[\"判断是否已经new过1个实例\",{\"1\":{\"354\":1}}],[\"判断是否是有用new\",{\"1\":{\"346\":1}}],[\"判断数组中是否存在满足条件的项\",{\"1\":{\"309\":1}}],[\"判断数据类型方法\",{\"0\":{\"34\":1}}],[\"判断条件放在单独一行里\",{\"0\":{\"145\":1}}],[\"组件卸载\",{\"1\":{\"457\":1}}],[\"组件的\",{\"1\":{\"448\":1}}],[\"组件的记忆\",{\"0\":{\"421\":1}}],[\"组件会执行一些清理工作\",{\"1\":{\"429\":1}}],[\"组件被重新渲染\",{\"1\":{\"429\":1}}],[\"组件完成了初始化和加载\",{\"1\":{\"429\":1}}],[\"组件需要\",{\"1\":{\"421\":1}}],[\"组件通常需要根据交互更改屏幕上显示的内容\",{\"1\":{\"421\":1}}],[\"组件那样调用\",{\"1\":{\"418\":1}}],[\"组件可以处理用户交互\",{\"1\":{\"429\":1}}],[\"组件可以包括后台脚本\",{\"1\":{\"310\":1}}],[\"组件可能会渲染不同的子组件\",{\"1\":{\"412\":1}}],[\"组件之间的嵌套关系\",{\"1\":{\"412\":1}}],[\"组件应该总是返回相同的\",{\"1\":{\"411\":1}}],[\"组件不会把\",{\"1\":{\"410\":1}}],[\"组件将接收一个被设为\",{\"1\":{\"405\":1}}],[\"组件\",{\"1\":{\"402\":1}}],[\"组件使用\",{\"1\":{\"401\":1}}],[\"组\",{\"0\":{\"145\":1}}],[\"太长或者超过最大长度限制的时候\",{\"0\":{\"145\":1}}],[\"太容易了\",{\"1\":{\"68\":1}}],[\"等其他属性或方法\",{\"1\":{\"532\":1}}],[\"等其它语言一样\",{\"1\":{\"476\":1}}],[\"等语句\",{\"1\":{\"531\":1}}],[\"等价于\",{\"1\":{\"519\":1}}],[\"等同于\",{\"1\":{\"454\":1}}],[\"等方法\",{\"1\":{\"276\":1}}],[\"等\",{\"0\":{\"145\":1,\"157\":1},\"1\":{\"274\":1,\"493\":1}}],[\"等等\",{\"0\":{\"71\":1}}],[\"分隔每个类型\",{\"1\":{\"487\":1}}],[\"分析接口的使用者\",{\"1\":{\"326\":1}}],[\"分组名\",{\"1\":{\"283\":2}}],[\"分别暴露\",{\"1\":{\"268\":1}}],[\"分到多个\",{\"0\":{\"143\":1}}],[\"分句里用大括号创建一块包含语法声明的区域\",{\"0\":{\"136\":1}}],[\"那么就必须用三斜线指令\",{\"1\":{\"550\":1}}],[\"那么他就会被视为一个\",{\"1\":{\"550\":1}}],[\"那么引入声明文件又是另一种方式了\",{\"1\":{\"523\":1}}],[\"那么十有八九是非常错误的\",{\"1\":{\"517\":1}}],[\"那么被断言为父类\",{\"1\":{\"516\":1}}],[\"那么也不难理解为什么\",{\"1\":{\"516\":1}}],[\"那么类型断言有没有什么限制呢\",{\"1\":{\"516\":1}}],[\"那么如何定义可选的参数呢\",{\"1\":{\"505\":1}}],[\"那么确定属性和可选属性的类型都必须是它的类型的子集\",{\"1\":{\"499\":1}}],[\"那么可以检查下\",{\"1\":{\"523\":1}}],[\"那么可以用\",{\"1\":{\"500\":1}}],[\"那么可以用可选属性\",{\"1\":{\"498\":1}}],[\"那么可以使用\",{\"1\":{\"276\":1}}],[\"那么值的类型必须是数字\",{\"1\":{\"492\":1}}],[\"那么我们可以组合多个声明语句\",{\"1\":{\"535\":1}}],[\"那么我们可以使用\",{\"1\":{\"477\":1}}],[\"那么我们就需要自己为它写声明文件了\",{\"1\":{\"536\":1}}],[\"那么我们就应该使用\",{\"1\":{\"531\":1}}],[\"那么我们就是在应用原型模式\",{\"1\":{\"357\":1}}],[\"那么我们是不是可以使用双重断言\",{\"1\":{\"517\":1}}],[\"那么我们在使用它时\",{\"1\":{\"515\":1}}],[\"那么这个日志应该是很清晰的\",{\"1\":{\"441\":1}}],[\"那么这个类就不得不依赖于它不需要的其他方法\",{\"1\":{\"326\":1}}],[\"那么你可以通过在事件名称末尾添加\",{\"1\":{\"419\":1}}],[\"那么请把它作为一个单独的\",{\"1\":{\"410\":1}}],[\"那么先创建它\",{\"1\":{\"354\":1}}],[\"那么首先初始化一个监听函数队列\",{\"1\":{\"338\":1}}],[\"那么会自动生成一个背景页\",{\"1\":{\"320\":1}}],[\"那么\",{\"1\":{\"277\":1,\"441\":1,\"516\":3}}],[\"那么为了解决这个问题\",{\"1\":{\"276\":1}}],[\"那么注释前面就空一行\",{\"0\":{\"149\":1}}],[\"那样就会发送多个请求\",{\"1\":{\"226\":1}}],[\"那导出的对象呢\",{\"1\":{\"197\":1}}],[\"那就是三斜线指令\",{\"1\":{\"548\":1}}],[\"那就是\",{\"1\":{\"545\":1}}],[\"那就是泛型\",{\"1\":{\"520\":1}}],[\"那就是使用\",{\"1\":{\"513\":1}}],[\"那就是它常用来表示类数组\",{\"1\":{\"492\":1}}],[\"那就不要让它在这里出现\",{\"1\":{\"191\":1}}],[\"那就用小括号把这个值包起来再换行\",{\"0\":{\"124\":1}}],[\"那就用\",{\"0\":{\"37\":1}}],[\"那后续的\",{\"0\":{\"143\":1}}],[\"别人会陷入\",{\"1\":{\"139\":1}}],[\"别忘了给表达式显示的命名\",{\"1\":{\"68\":1}}],[\"平等和javascript\",{\"0\":{\"135\":1}}],[\">+3<\",{\"1\":{\"425\":1,\"426\":1}}],[\">gregorio\",{\"1\":{\"399\":1}}],[\">4873\",{\"1\":{\"285\":2}}],[\"><\",{\"1\":{\"224\":3,\"244\":1,\"250\":1,\"251\":1,\"258\":1,\"269\":1,\"317\":3,\"319\":2,\"380\":4}}],[\">>\",{\"1\":{\"183\":1,\"184\":1,\"185\":3}}],[\">2个\",{\"0\":{\"160\":1}}],[\">\",{\"0\":{\"208\":2},\"1\":{\"134\":1,\"137\":6,\"139\":2,\"209\":1,\"224\":3,\"250\":1,\"258\":1,\"317\":3,\"319\":2,\"380\":5,\"395\":2,\"399\":2,\"400\":3,\"402\":1,\"403\":1,\"404\":1,\"405\":3,\"408\":5,\"409\":1,\"410\":5,\"415\":4,\"416\":5,\"418\":4,\"419\":3,\"420\":2,\"425\":1,\"426\":1,\"442\":2,\"448\":1,\"449\":1,\"453\":1,\"454\":1,\"550\":1,\"551\":1}}],[\">=\",{\"1\":{\"89\":1,\"307\":1}}],[\"已命名函数表达式提升他的变量名\",{\"0\":{\"129\":1}}],[\"解压缩\",{\"1\":{\"317\":1}}],[\"解决这个错误\",{\"1\":{\"514\":1}}],[\"解决上面问题\",{\"0\":{\"426\":1}}],[\"解决方法\",{\"1\":{\"283\":1,\"291\":1}}],[\"解决命名冲突\",{\"1\":{\"224\":1}}],[\"解构赋值\",{\"1\":{\"213\":1}}],[\"解构使您不必为这些属性创建临时引用\",{\"1\":{\"58\":1}}],[\"解释器把变量声明提升到作用域最前面\",{\"1\":{\"127\":1}}],[\"属性时就报错了\",{\"1\":{\"488\":1}}],[\"属性不会报错\",{\"1\":{\"488\":1}}],[\"属性访问该\",{\"1\":{\"445\":1}}],[\"属性传递一个对象\",{\"1\":{\"400\":1}}],[\"属性\",{\"1\":{\"399\":1,\"400\":1,\"401\":1,\"447\":1,\"513\":2,\"514\":2}}],[\"属性是以带\",{\"1\":{\"398\":1}}],[\"属性中的命名\",{\"1\":{\"398\":1}}],[\"属性都用驼峰式命名法表示\",{\"1\":{\"398\":1}}],[\"属性注入或服务定位器等方式将依赖的实现传递给高层次模块\",{\"1\":{\"327\":1}}],[\"属性的\",{\"1\":{\"125\":1,\"514\":1}}],[\"属性指向函数引用\",{\"1\":{\"34\":1}}],[\"现在已经不建议再使用\",{\"1\":{\"531\":1,\"549\":1}}],[\"现在要推行函数式组件\",{\"1\":{\"378\":1}}],[\"现在我们需要一个统一的方式去控制这两个不同平台的播放器播放音乐\",{\"1\":{\"367\":1}}],[\"现在知道该扩展程序包含一个\",{\"1\":{\"312\":1}}],[\"现在就是一个没有\",{\"1\":{\"125\":1}}],[\"现在不要用generator\",{\"0\":{\"111\":1}}],[\"即可给\",{\"1\":{\"544\":1}}],[\"即可将声明好的一个变量声明为全局变量\",{\"1\":{\"543\":1}}],[\"即可\",{\"1\":{\"516\":2,\"517\":1,\"519\":1}}],[\"即\",{\"1\":{\"510\":1,\"516\":1}}],[\"即获取到的对象引用永远不会改变\",{\"1\":{\"454\":1}}],[\"即当输入相同时\",{\"1\":{\"441\":1}}],[\"即便它真的有这些方法\",{\"1\":{\"477\":1}}],[\"即便它们阻止了传播\",{\"1\":{\"419\":1}}],[\"即便实际上很少达到\",{\"1\":{\"220\":1}}],[\"即不再由调用者直接创建被调用者的实例\",{\"1\":{\"327\":1}}],[\"即子类不能去掉父类已经实现的方法或者改变这些方法的预期行为\",{\"1\":{\"325\":1}}],[\"即一个类应该只负责一项任务或功能\",{\"1\":{\"323\":1}}],[\"即要返回项的起始和结束位置\",{\"1\":{\"301\":1}}],[\"即obj1\",{\"1\":{\"275\":1}}],[\"即module\",{\"1\":{\"231\":1,\"263\":1}}],[\"即使\",{\"1\":{\"480\":1}}],[\"即使它会引发数据的多个变化\",{\"1\":{\"441\":1}}],[\"即使没有任何点击\",{\"1\":{\"415\":1}}],[\"即使没有使用也可以可以被忽略\",{\"1\":{\"125\":1}}],[\"即使采用的隐式绑定规则\",{\"1\":{\"275\":1}}],[\"即使是空数组\",{\"1\":{\"133\":1}}],[\"即需要立刻执行声明的函数\",{\"1\":{\"70\":1}}],[\"写法\",{\"1\":{\"410\":1}}],[\"写成jquery会报错\",{\"1\":{\"251\":1}}],[\"写了没用\",{\"1\":{\"125\":1}}],[\"写一个定制的\",{\"0\":{\"95\":1}}],[\"附近换行容易混淆这个赋值语句\",{\"1\":{\"124\":1}}],[\"后面使用\",{\"1\":{\"550\":1}}],[\"后面的教程也都默认使用的这个选项\",{\"1\":{\"536\":1}}],[\"后面约定\",{\"1\":{\"471\":1}}],[\"后续对\",{\"1\":{\"515\":1}}],[\"后\",{\"1\":{\"450\":1}}],[\"后跟事件名称\",{\"1\":{\"415\":1}}],[\"后置条件和不变量\",{\"1\":{\"325\":1}}],[\"后台脚本必须在清单中注册\",{\"1\":{\"312\":1}}],[\"后者没有保持活动超时\",{\"1\":{\"283\":1}}],[\"后出现出现问题\",{\"0\":{\"226\":1}}],[\"后需要空格\",{\"0\":{\"169\":1}}],[\"后换行\",{\"0\":{\"124\":1}}],[\"后和\",{\"0\":{\"56\":1,\"168\":1}}],[\"前是不需要\",{\"1\":{\"538\":1}}],[\"前几次都是函数定义\",{\"1\":{\"508\":1}}],[\"前置条件\",{\"1\":{\"325\":1}}],[\"前言\",{\"0\":{\"321\":1}}],[\"前面只介绍了最简单的声明文件内容\",{\"1\":{\"525\":1}}],[\"前面提到\",{\"1\":{\"505\":1}}],[\"前面我们已经说了默认绑定和隐式绑定\",{\"1\":{\"276\":1}}],[\"前面的默认绑定规则很好理解\",{\"1\":{\"275\":1}}],[\"前端模块化详解\",{\"1\":{\"221\":1}}],[\"前不要空格\",{\"0\":{\"169\":1}}],[\"前都需要空格\",{\"0\":{\"168\":1}}],[\"前缀\",{\"0\":{\"151\":1},\"1\":{\"497\":1,\"534\":1}}],[\"前\",{\"0\":{\"124\":1}}],[\"前断行\",{\"0\":{\"56\":1}}],[\"预设\",{\"1\":{\"266\":1}}],[\"预减值\",{\"1\":{\"123\":1}}],[\"预览\",{\"1\":{\"20\":2}}],[\"变量的形状必须和接口的形状保持一致\",{\"1\":{\"497\":1}}],[\"变量的值永远不会在一次渲染的内部发生变化\",{\"0\":{\"425\":1}}],[\"变量也可能是\",{\"1\":{\"480\":1}}],[\"变量之间或在多个嵌套对象中重复时\",{\"1\":{\"431\":1}}],[\"变量中计算出一些信息\",{\"1\":{\"431\":1}}],[\"变量名称不能包含\",{\"1\":{\"398\":1}}],[\"变量呢\",{\"1\":{\"197\":1}}],[\"变量改了自己的值\",{\"1\":{\"125\":1}}],[\"变量\",{\"0\":{\"422\":1},\"1\":{\"122\":1,\"399\":1,\"422\":2,\"431\":2}}],[\"变化通常都是需要避免\",{\"1\":{\"104\":1}}],[\"链接变量分配创建隐式全局变量\",{\"1\":{\"122\":1}}],[\"调换成\",{\"1\":{\"119\":1}}],[\"调用父类的方法\",{\"1\":{\"516\":1}}],[\"调用你的组件来确定屏幕上应该显示什么\",{\"1\":{\"450\":1}}],[\"调用所有的\",{\"1\":{\"419\":2}}],[\"调用一个函数\",{\"1\":{\"415\":1}}],[\"调用公共的方法\",{\"1\":{\"346\":1}}],[\"调用了大量的\",{\"1\":{\"345\":1}}],[\"调用\",{\"1\":{\"275\":1}}],[\"调用函数时\",{\"0\":{\"171\":1}}],[\"调用或者书写一个包含多个参数的函数应该像这个指南里的其他多行代码写法一样\",{\"0\":{\"83\":1}}],[\"调用者只需要选择他想用的值就好了\",{\"1\":{\"60\":1}}],[\"调用者需要想一想返回值的顺序\",{\"1\":{\"60\":1}}],[\"调用该方法\",{\"1\":{\"34\":1}}],[\"声明合并\",{\"0\":{\"535\":1},\"1\":{\"533\":1}}],[\"声明元组\",{\"1\":{\"533\":1}}],[\"声明联合类型\",{\"1\":{\"533\":1}}],[\"声明语句中只能定义类型\",{\"1\":{\"527\":1}}],[\"声明全局枚举类型\",{\"1\":{\"522\":1,\"526\":1}}],[\"声明全局类型\",{\"1\":{\"522\":1,\"526\":1}}],[\"声明全局类\",{\"1\":{\"522\":1,\"526\":1}}],[\"声明全局方法\",{\"1\":{\"522\":1,\"526\":1}}],[\"声明全局变量\",{\"1\":{\"522\":1,\"526\":1}}],[\"声明文件中的依赖\",{\"0\":{\"548\":1}}],[\"声明文件里的内容在编译结果中会被删除\",{\"1\":{\"530\":1}}],[\"声明文件的内容和使用方式会有所区别\",{\"1\":{\"525\":1}}],[\"声明文件必需以\",{\"1\":{\"523\":1}}],[\"声明文件\",{\"0\":{\"521\":1},\"1\":{\"536\":1}}],[\"声明为\",{\"1\":{\"519\":1}}],[\"声明一个\",{\"1\":{\"479\":1}}],[\"声明effect\",{\"1\":{\"453\":1,\"454\":1}}],[\"声明\",{\"1\":{\"453\":1,\"522\":1,\"526\":1}}],[\"声明变量\",{\"0\":{\"118\":1}}],[\"声明函数的同时立即调用这个函数\",{\"1\":{\"70\":1}}],[\"取消\",{\"1\":{\"453\":1}}],[\"取决于你使用什么授权插件\",{\"1\":{\"283\":2}}],[\"取值的属性\",{\"1\":{\"125\":1}}],[\"取\",{\"0\":{\"115\":1}}],[\"请从\",{\"1\":{\"460\":1}}],[\"请将其拆分为多个\",{\"1\":{\"460\":1}}],[\"请将其包装在匿名函数中\",{\"1\":{\"415\":1}}],[\"请将该代码移至事件处理的地方\",{\"1\":{\"460\":1}}],[\"请考虑将它们合并为一个单独的\",{\"1\":{\"431\":1}}],[\"请运行\",{\"1\":{\"384\":1,\"385\":1,\"386\":1}}],[\"请在你的终端运行\",{\"1\":{\"383\":1}}],[\"请在注释中解释为什么要用移位运算和你在做什么\",{\"0\":{\"184\":1}}],[\"请务必在真实网页上试用该扩展程序\",{\"1\":{\"318\":1}}],[\"请向清单添加一个action对象并将\",{\"1\":{\"317\":1}}],[\"请访问\",{\"1\":{\"286\":1}}],[\"请看下面这个例子\",{\"1\":{\"232\":1}}],[\"请看下面示例\",{\"0\":{\"56\":1}}],[\"请求过多\",{\"1\":{\"226\":1}}],[\"请说明这个是因为性能原因\",{\"0\":{\"184\":1}}],[\"请确保它们的函数签名空格是得当的\",{\"0\":{\"112\":1}}],[\"或它的子类作为参数了\",{\"1\":{\"513\":1}}],[\"或是在你应用中的许多组件需要相同的信息\",{\"1\":{\"442\":1}}],[\"或其现有的\",{\"1\":{\"431\":1}}],[\"或三目运算符\",{\"1\":{\"408\":1}}],[\"或todo\",{\"0\":{\"151\":1}}],[\"或者直接提交到\",{\"1\":{\"536\":1}}],[\"或者有一个\",{\"1\":{\"536\":1}}],[\"或者对应的源码目录下\",{\"1\":{\"526\":1}}],[\"或者少于要求的\",{\"1\":{\"502\":1,\"505\":1}}],[\"或者清除它的效果\",{\"1\":{\"453\":1}}],[\"或者切换聊天室时执行\",{\"1\":{\"453\":1}}],[\"或者创建一份已有数组的拷贝值\",{\"1\":{\"428\":1}}],[\"或者将其拷贝一份\",{\"1\":{\"427\":1}}],[\"或者在需要调用abstractclass\",{\"1\":{\"350\":1}}],[\"或者\",{\"1\":{\"311\":2,\"319\":1,\"408\":1,\"410\":1,\"487\":1}}],[\"或者说\",{\"1\":{\"277\":1}}],[\"或者被撤销\",{\"1\":{\"214\":1}}],[\"或者您建议需要实现的问题的解决方案\",{\"0\":{\"151\":1}}],[\"或者引入一个只有标点的不同的变化\",{\"1\":{\"119\":1}}],[\"或者你忽略我们的建议\",{\"0\":{\"112\":1}}],[\"或\",{\"0\":{\"118\":1,\"119\":1,\"201\":1,\"208\":1},\"1\":{\"403\":2,\"417\":1,\"454\":1,\"458\":1,\"478\":2,\"510\":1,\"516\":2,\"517\":1,\"519\":1,\"523\":2,\"525\":1,\"527\":1,\"534\":1}}],[\"或这是一个空对象object\",{\"1\":{\"46\":1}}],[\"多个js按顺序注入\",{\"1\":{\"320\":1}}],[\"多个返回值用对象的解构\",{\"0\":{\"60\":1}}],[\"多行注释用\",{\"0\":{\"148\":1}}],[\"多行\",{\"0\":{\"107\":1}}],[\"让他们不用阅读文档就能加载模块\",{\"1\":{\"260\":1}}],[\"让你的命名可描述\",{\"0\":{\"188\":1}}],[\"让import放在最前面防止意外行为\",{\"1\":{\"106\":1}}],[\"让我们现在就开启未来吧\",{\"1\":{\"100\":1}}],[\"放到项目中时\",{\"1\":{\"523\":1}}],[\"放到它们的公共父级\",{\"1\":{\"433\":1}}],[\"放在其他所有语句之前\",{\"0\":{\"106\":1}}],[\"放大\",{\"1\":{\"20\":1}}],[\"每当你在开发环境中保存更新代码文件时\",{\"1\":{\"457\":1}}],[\"每当你修了一个bug\",{\"1\":{\"220\":1}}],[\"每轮渲染中调用\",{\"1\":{\"454\":1}}],[\"每次渲染后都会执行此处的代码\",{\"1\":{\"453\":1,\"454\":1}}],[\"每次渲染都会收到新版本的\",{\"1\":{\"406\":1}}],[\"每次更新都分为\",{\"1\":{\"450\":1}}],[\"每一次渲染的\",{\"1\":{\"425\":1}}],[\"每种模式对应一种状态\",{\"1\":{\"333\":1}}],[\"每个值的类型都具体而精确\",{\"1\":{\"514\":1}}],[\"每个从\",{\"1\":{\"481\":1}}],[\"每个\",{\"1\":{\"441\":1}}],[\"每个状态都对应唯一的数据源\",{\"0\":{\"434\":1}}],[\"每个状态都是一个策略\",{\"1\":{\"332\":1}}],[\"每个副本都会有完全隔离的\",{\"1\":{\"423\":1}}],[\"每个事件分三个阶段传播\",{\"1\":{\"419\":1}}],[\"每个父组件都可以提供\",{\"1\":{\"401\":1}}],[\"每个策略对象负责的算法被各自封装在对象内部\",{\"1\":{\"375\":1}}],[\"每个接口专注于特定的业务领域或功能\",{\"1\":{\"326\":1}}],[\"每个模块内部\",{\"1\":{\"231\":1}}],[\"每个文件就是一个模块\",{\"1\":{\"229\":1}}],[\"每个文件只做一件事情并导出\",{\"1\":{\"105\":1}}],[\"每个变量都用一个\",{\"0\":{\"119\":1}}],[\"每行逗号结尾\",{\"0\":{\"83\":1}}],[\"每行值包含一个参数\",{\"0\":{\"83\":1}}],[\"虽然可以通过编译\",{\"1\":{\"518\":1}}],[\"虽然接口也可以用来描述数组\",{\"1\":{\"492\":1}}],[\"虽然看起来很像\",{\"1\":{\"396\":1}}],[\"虽然还有其它方式可以编写组件\",{\"1\":{\"393\":1}}],[\"虽然显式绑定本身不能解决\",{\"1\":{\"276\":1}}],[\"虽然显式绑定让我们很清楚的知道了函数中的\",{\"1\":{\"276\":1}}],[\"虽然在某些场景下可能需要这种技术\",{\"1\":{\"104\":1}}],[\"虽然一行是简洁的\",{\"1\":{\"102\":1}}],[\"虽然你想这么写\",{\"1\":{\"75\":1}}],[\"模板\",{\"1\":{\"389\":1}}],[\"模板字符串\",{\"1\":{\"213\":1,\"473\":2}}],[\"模板字符串更具可读性\",{\"1\":{\"64\":1}}],[\"模式\",{\"1\":{\"336\":1}}],[\"模式和实践\",{\"1\":{\"323\":1}}],[\"模块系统中\",{\"1\":{\"540\":1}}],[\"模块插件\",{\"0\":{\"547\":1},\"1\":{\"525\":1}}],[\"模块定义方式的语义不顺畅\",{\"1\":{\"270\":1}}],[\"模块里面的变量绑定其所在的模块\",{\"1\":{\"263\":1}}],[\"模块不是对象\",{\"1\":{\"263\":1}}],[\"模块是动态引用\",{\"1\":{\"263\":1}}],[\"模块是编译时输出接口\",{\"0\":{\"263\":1}}],[\"模块是运行时加载\",{\"0\":{\"263\":1}}],[\"模块输出的是值的引用\",{\"0\":{\"262\":1}}],[\"模块输出的是一个值的拷贝\",{\"0\":{\"262\":1}}],[\"模块与\",{\"0\":{\"261\":1}}],[\"模块默认输出\",{\"1\":{\"260\":1}}],[\"模块就是对象\",{\"1\":{\"259\":1}}],[\"模块的声明文件\",{\"1\":{\"536\":1}}],[\"模块的运行机制与\",{\"1\":{\"263\":1}}],[\"模块的差异\",{\"0\":{\"261\":1}}],[\"模块的设计思想是尽量的静态化\",{\"1\":{\"259\":1}}],[\"模块的加载逻辑偏重\",{\"1\":{\"270\":1}}],[\"模块的加载是异步的\",{\"1\":{\"252\":1}}],[\"模块的加载是运行时同步加载的\",{\"1\":{\"229\":1}}],[\"模块的加载机制\",{\"0\":{\"232\":1}}],[\"模块都遵循\",{\"1\":{\"252\":1}}],[\"模块使用时才会加载执行\",{\"1\":{\"252\":1}}],[\"模块标识名\",{\"1\":{\"250\":1}}],[\"模块文件一般都已经存在于本地硬盘\",{\"1\":{\"245\":1}}],[\"模块内部的变化就影响不到这个值\",{\"1\":{\"232\":1}}],[\"模块加载的顺序\",{\"1\":{\"230\":1}}],[\"模块可以多次加载\",{\"1\":{\"230\":1}}],[\"模块需要提前编译打包处理\",{\"1\":{\"229\":1}}],[\"模块规范的\",{\"1\":{\"536\":1}}],[\"模块规范\",{\"1\":{\"229\":1,\"525\":1}}],[\"模块化规范\",{\"0\":{\"227\":1}}],[\"模块化固然有多个好处\",{\"1\":{\"226\":1}}],[\"模块化的好处\",{\"0\":{\"225\":1}}],[\"模块化的进化过程\",{\"0\":{\"224\":1}}],[\"模块化的理解\",{\"0\":{\"222\":1}}],[\"模块化是未来\",{\"1\":{\"100\":1}}],[\"模块\",{\"1\":{\"213\":1,\"246\":2,\"259\":1,\"324\":1,\"422\":1}}],[\"模块而不是无标准的模块系统\",{\"0\":{\"100\":1}}],[\"被淘汰了\",{\"1\":{\"531\":1}}],[\"被推断成了\",{\"1\":{\"488\":2}}],[\"被推断为\",{\"1\":{\"485\":1}}],[\"被保留下来\",{\"1\":{\"436\":1}}],[\"被使用\",{\"1\":{\"403\":1}}],[\"被使用了\",{\"1\":{\"98\":1}}],[\"被折断的字符串工作起来是糟糕的而且使得代码更不易被搜索\",{\"1\":{\"63\":1}}],[\"除联合类型外\",{\"1\":{\"533\":1}}],[\"除此之外\",{\"1\":{\"274\":1,\"516\":1}}],[\"除非迫不得已\",{\"1\":{\"517\":1}}],[\"除非用一个数组把他们包装起来\",{\"1\":{\"396\":1}}],[\"除非写成一个函数\",{\"1\":{\"232\":1}}],[\"除非外部库或框架需要使用特定的非静态方法\",{\"0\":{\"98\":1}}],[\"除了可以在声明文件中通过\",{\"1\":{\"548\":1}}],[\"除了可用于对类的一部分行为进行抽象以外\",{\"1\":{\"496\":1}}],[\"除了never本身之外\",{\"1\":{\"480\":1}}],[\"除了字符串\",{\"1\":{\"400\":1}}],[\"除了\",{\"1\":{\"34\":1,\"417\":1,\"523\":1}}],[\"方括号\",{\"0\":{\"490\":1},\"1\":{\"490\":1}}],[\"方括号里不要加空格\",{\"0\":{\"165\":1}}],[\"方便大家在使用这些新语法时能快速查找到对应的讲解\",{\"1\":{\"522\":1}}],[\"方便阅读\",{\"0\":{\"150\":1}}],[\"方便导航和查询\",{\"1\":{\"5\":1}}],[\"方法的具体实现则会报错\",{\"1\":{\"529\":1}}],[\"方法只允许传入\",{\"1\":{\"490\":1}}],[\"方法返回从该参数指定位置开始到当前数组末尾的所有项\",{\"1\":{\"301\":1}}],[\"方法可以调用\",{\"1\":{\"531\":1}}],[\"方法可以接受一或两个参数\",{\"1\":{\"301\":1}}],[\"方法可以返回this来实现方法链\",{\"0\":{\"94\":1}}],[\"方法传递参数的情况下\",{\"1\":{\"300\":1}}],[\"方法比较的是字符串\",{\"1\":{\"298\":1}}],[\"方法直接将\",{\"1\":{\"276\":1}}],[\"方法\",{\"1\":{\"223\":1,\"318\":1,\"357\":1,\"512\":1}}],[\"方法是\",{\"0\":{\"201\":1}}],[\"方法是可以的\",{\"0\":{\"95\":1}}],[\"它能够用来定义一个全局变量的类型\",{\"1\":{\"527\":1}}],[\"它能让你以某种步骤复现已发生的交互或响应\",{\"1\":{\"441\":1}}],[\"它编译结果是\",{\"1\":{\"523\":1,\"530\":1}}],[\"它很可能会导致运行时错误\",{\"1\":{\"517\":1}}],[\"它还是有一定的用武之地\",{\"1\":{\"549\":1}}],[\"它还有一个额外的方法\",{\"1\":{\"516\":1}}],[\"它还不是最终版\",{\"1\":{\"214\":1}}],[\"它极有可能掩盖了真正的类型错误\",{\"1\":{\"514\":1}}],[\"它在编译结果中会被删除\",{\"1\":{\"513\":1}}],[\"它在es5上支持的不好\",{\"1\":{\"111\":1}}],[\"它用来表示全局变量是一个对象\",{\"1\":{\"531\":1}}],[\"它用来判断传入的参数是不是\",{\"1\":{\"513\":1}}],[\"它用途广泛\",{\"1\":{\"383\":1}}],[\"它实际上就是\",{\"1\":{\"493\":1}}],[\"它等价于\",{\"1\":{\"484\":1}}],[\"它允许你在编译时可选择地包含或移除类型检查\",{\"1\":{\"477\":1}}],[\"它\",{\"1\":{\"460\":1}}],[\"它不会真的影响到变量的类型\",{\"1\":{\"518\":1}}],[\"它不会更改在该函数调用前就已存在的对象或变量\",{\"1\":{\"411\":1}}],[\"它不是必需的\",{\"1\":{\"460\":1}}],[\"它返回如下内容\",{\"1\":{\"439\":1}}],[\"它虽然是可变的\",{\"1\":{\"428\":1}}],[\"它向上传播\",{\"1\":{\"419\":1}}],[\"它向下传播\",{\"1\":{\"419\":1}}],[\"它执行被点击元素的\",{\"1\":{\"419\":1}}],[\"它通常被称为\",{\"1\":{\"418\":1}}],[\"它通过对算法进行封装\",{\"1\":{\"374\":1}}],[\"它仅适用于你附加到的\",{\"1\":{\"417\":1}}],[\"它从事件发生的地方开始\",{\"1\":{\"417\":1}}],[\"它为\",{\"1\":{\"386\":1}}],[\"它可以用来导入另一个声明文件\",{\"1\":{\"549\":1}}],[\"它可以用来扩展原有模块的类型\",{\"1\":{\"547\":1}}],[\"它可以帮助你找出需要添加清理函数的\",{\"1\":{\"457\":1}}],[\"它可以帮助我们规避不良的软件设计\",{\"1\":{\"322\":1}}],[\"它可以把你的应用分成嵌套部分\",{\"1\":{\"384\":1}}],[\"它是一个对象\",{\"1\":{\"531\":1}}],[\"它是一种内置的方法来继承原型功能而不打破instanceof\",{\"1\":{\"93\":1}}],[\"它是对行为的抽象\",{\"1\":{\"496\":1}}],[\"它是否处于活动状态的方式\",{\"1\":{\"442\":1}}],[\"它是作为现有的类的一个包装\",{\"1\":{\"362\":1}}],[\"它接受事件名和监听函数入参作为参数\",{\"1\":{\"338\":1}}],[\"它接受目标事件名和回调函数作为参数\",{\"1\":{\"338\":1}}],[\"它起到的是一个沟通桥梁的作用\",{\"1\":{\"338\":1}}],[\"它定义了对象间的一种一对多的依赖关系\",{\"1\":{\"336\":1}}],[\"它更强调状态变化对对象行为的影响\",{\"1\":{\"332\":1}}],[\"它让对象能够在内部状态改变时改变它的行为\",{\"1\":{\"331\":1}}],[\"它促进了模块间的解耦\",{\"1\":{\"327\":1}}],[\"它们的核心区别就在于\",{\"1\":{\"519\":1}}],[\"它们的区别\",{\"1\":{\"519\":1}}],[\"它们的本身的类型用处不是很大\",{\"1\":{\"478\":1}}],[\"它们就可以互相进行类型断言了\",{\"1\":{\"516\":1}}],[\"它们可能是由于第三方库未能定义好自己的类型\",{\"1\":{\"515\":1}}],[\"它们会不冲突的合并起来\",{\"1\":{\"535\":1}}],[\"它们会被编译为十进制数字\",{\"1\":{\"472\":1}}],[\"它们会使组件变得臃肿且难以阅读\",{\"1\":{\"440\":1}}],[\"它们应该以不可变值的方式去更新\",{\"1\":{\"441\":1}}],[\"它们不应该包含异步请求\",{\"1\":{\"441\":1}}],[\"它们能做的事情是一样的\",{\"1\":{\"440\":1}}],[\"它们经常用于建模\",{\"1\":{\"412\":1}}],[\"它们提供了获取音乐的方法\",{\"1\":{\"367\":1}}],[\"它们都应该依赖于抽象\",{\"1\":{\"327\":1}}],[\"它们有两个重大差异\",{\"1\":{\"261\":1}}],[\"它包含了各种不相关的功能\",{\"1\":{\"326\":1}}],[\"它主张客户端不应该被迫依赖它不需要的接口\",{\"1\":{\"326\":1}}],[\"它强调了在继承结构中保持行为一致性和兼容性的重要性\",{\"1\":{\"325\":1}}],[\"它指出高层次的模块不应该依赖于低层次的模块\",{\"1\":{\"327\":1}}],[\"它指出软件实体\",{\"1\":{\"324\":1}}],[\"它指向什么完全取决于函数在哪里被调用\",{\"1\":{\"272\":1}}],[\"它需要用于进一步用户交互的逻辑\",{\"1\":{\"318\":1}}],[\"它根据保存到扩展存储中的值为弹出按钮着色\",{\"1\":{\"318\":1}}],[\"它将在响应交互\",{\"1\":{\"414\":1}}],[\"它将包含提供的图标而不是默认占位符\",{\"1\":{\"317\":1}}],[\"它将使用许多扩展平台的组件来介绍它们之间的关系\",{\"1\":{\"310\":1}}],[\"它只是复制当前数组并返回副本\",{\"1\":{\"300\":1}}],[\"它只能用来作为导出变量\",{\"1\":{\"197\":1}}],[\"它的返回值是\",{\"1\":{\"515\":1}}],[\"它的参数的类型肯定得是比较抽象的父类\",{\"1\":{\"513\":1}}],[\"它的类型是\",{\"1\":{\"497\":1}}],[\"它的复制深度只有一层\",{\"1\":{\"427\":1}}],[\"它的核心思想是将一个接口转换成客户期望的另一个接口\",{\"1\":{\"366\":1}}],[\"它的执行上下文对象为\",{\"1\":{\"275\":1}}],[\"它的实际调用位置在\",{\"1\":{\"275\":1}}],[\"它的对外接口只是一种静态定义\",{\"1\":{\"263\":1}}],[\"它的模块管理遵守amd规范\",{\"1\":{\"247\":1}}],[\"它的exports属性\",{\"1\":{\"231\":1}}],[\"它会进行组件的\",{\"1\":{\"458\":3}}],[\"它会返回一个有状态的值和一个设置该状态的函数\",{\"1\":{\"439\":1}}],[\"它会更新扩展程序存储中的颜色值\",{\"1\":{\"319\":1}}],[\"它会执行自动插入分号\",{\"1\":{\"179\":1}}],[\"它会被赋值为\",{\"1\":{\"75\":1}}],[\"它后面的\",{\"0\":{\"143\":1}}],[\"它分配的值还没有提前\",{\"0\":{\"127\":1}}],[\"避免深度嵌套的\",{\"1\":{\"431\":1}}],[\"避免重复的\",{\"1\":{\"431\":1}}],[\"避免重复类成员\",{\"0\":{\"97\":1}}],[\"避免冗余的\",{\"1\":{\"431\":1}}],[\"避免互相矛盾的\",{\"1\":{\"431\":1}}],[\"避免创建一个\",{\"1\":{\"326\":1}}],[\"避免上帝接口\",{\"1\":{\"326\":1}}],[\"避免了复杂的条件分支语句\",{\"1\":{\"331\":1}}],[\"避免了\",{\"1\":{\"326\":1}}],[\"避免过度特定化\",{\"1\":{\"325\":1}}],[\"避免破坏原有的代码结构\",{\"1\":{\"323\":1}}],[\"避免命名冲突\",{\"1\":{\"225\":1}}],[\"避免用一个字母命名\",{\"0\":{\"188\":1}}],[\"避免文件被连接到一起时立即执行函数被当做变量来执行\",{\"1\":{\"179\":1}}],[\"避免出现多个空行\",{\"0\":{\"174\":1}}],[\"避免一行代码超过100个字符\",{\"0\":{\"167\":1}}],[\"避免不需要的三元表达式\",{\"0\":{\"138\":1}}],[\"避免直接操作prototype\",{\"0\":{\"92\":1}}],[\"避免箭头函数\",{\"0\":{\"89\":1}}],[\"避免使用\",{\"0\":{\"36\":1},\"1\":{\"428\":1}}],[\"万一表达式涉及多行\",{\"0\":{\"87\":1}}],[\"否则会报出如下错误\",{\"1\":{\"481\":1,\"482\":1}}],[\"否则会报错\",{\"1\":{\"410\":1}}],[\"否则不是状态模式\",{\"1\":{\"333\":1}}],[\"否则无法加载\",{\"1\":{\"260\":1}}],[\"否则类方法应该使用this或被做成静态方法\",{\"0\":{\"98\":1}}],[\"否则\",{\"0\":{\"86\":1,\"88\":1}}],[\"否则返回\",{\"1\":{\"34\":1}}],[\"缩进不要太过分\",{\"1\":{\"83\":1}}],[\"缩小\",{\"1\":{\"20\":1}}],[\"缩小选择\",{\"1\":{\"16\":1}}],[\"去实现\",{\"1\":{\"496\":1}}],[\"去判断\",{\"1\":{\"408\":2}}],[\"去调用的原始类的方式\",{\"1\":{\"370\":1}}],[\"去调用多变的函数更好\",{\"0\":{\"82\":1}}],[\"去创造你自己的accessor函数\",{\"0\":{\"200\":1}}],[\"去注释问题的解决方案\",{\"0\":{\"153\":1}}],[\"去产生一个数组\",{\"1\":{\"110\":1}}],[\"去将一个类数组对象转成一个数组\",{\"0\":{\"53\":1}}],[\"尤其是对\",{\"1\":{\"81\":1}}],[\"保留\",{\"1\":{\"445\":1}}],[\"保留参数原始值和数据结构\",{\"1\":{\"80\":1}}],[\"保持组件纯粹\",{\"0\":{\"411\":1}}],[\"保持列表项的顺序\",{\"1\":{\"410\":1}}],[\"保证\",{\"1\":{\"454\":1}}],[\"保证一个类仅有一个实例\",{\"1\":{\"353\":1}}],[\"保证不能被改变\",{\"1\":{\"197\":1}}],[\"保存清单文件的目录可以在当前状态下作为开发人员模式的扩展添加\",{\"1\":{\"311\":1}}],[\"保存\",{\"1\":{\"19\":1}}],[\"删除元素\",{\"1\":{\"428\":1}}],[\"删除\",{\"1\":{\"302\":2}}],[\"删除原数组第一项\",{\"1\":{\"296\":1}}],[\"删除包相关的权限\",{\"1\":{\"283\":1}}],[\"删除大括号和\",{\"0\":{\"86\":1}}],[\"删除空格\",{\"1\":{\"79\":1}}],[\"删除一个名字的时候不需要添加\",{\"1\":{\"79\":1}}],[\"删除行注释\",{\"1\":{\"13\":1}}],[\"删除行\",{\"1\":{\"13\":1}}],[\"以下会详细介绍如何书写声明文件\",{\"1\":{\"525\":1}}],[\"以下代码虽然没有指定类型\",{\"1\":{\"484\":1}}],[\"以减少不必要的运行时错误\",{\"1\":{\"512\":1}}],[\"以上命令会在全局环境下安装\",{\"1\":{\"468\":1}}],[\"以上两种原因就导致了很难维护\",{\"1\":{\"226\":1}}],[\"以查找像上面示例中的错误\",{\"1\":{\"456\":1}}],[\"以告诉\",{\"1\":{\"454\":1}}],[\"以匹配渲染输出\",{\"1\":{\"446\":1}}],[\"以不同用户的身份发表评论\",{\"1\":{\"442\":1}}],[\"以\",{\"1\":{\"422\":1,\"468\":1,\"524\":1}}],[\"以防止引入错误或破坏现有功能\",{\"1\":{\"324\":1}}],[\"以提供新的行为或功能\",{\"1\":{\"324\":1}}],[\"以便它在重复挂载后能正常工作\",{\"1\":{\"456\":1}}],[\"以便扩展程序知道如何使用图像\",{\"1\":{\"317\":1}}],[\"以便\",{\"1\":{\"317\":1}}],[\"以及早暴露出像条件竞争那样的问题\",{\"1\":{\"457\":1}}],[\"以及测量它的尺寸和位置\",{\"1\":{\"446\":1}}],[\"以及为什么要更新\",{\"1\":{\"440\":1}}],[\"以及因父组件的重新渲染而发生的变化\",{\"1\":{\"429\":1}}],[\"以及发现哪些捆绑代码可以被优化\",{\"1\":{\"412\":1}}],[\"以及基于\",{\"1\":{\"391\":1}}],[\"以及\",{\"1\":{\"318\":1,\"386\":1,\"533\":1}}],[\"以及该文件的行为方式\",{\"1\":{\"312\":1}}],[\"以及输入和输出的变量\",{\"1\":{\"259\":1}}],[\"以秒为单位\",{\"1\":{\"283\":1}}],[\"以jquery为例\",{\"1\":{\"269\":1}}],[\"以后再加载\",{\"1\":{\"230\":1}}],[\"以这种方式创建函数将类似于字符串\",{\"1\":{\"78\":1}}],[\"以保证对象实例的类型不被篡改\",{\"1\":{\"34\":1}}],[\"默认导出\",{\"1\":{\"522\":1,\"536\":1}}],[\"默认值将\",{\"1\":{\"403\":1}}],[\"默认值仅在缺少\",{\"1\":{\"403\":1}}],[\"默认值\",{\"1\":{\"403\":1,\"404\":1}}],[\"默认语言\",{\"1\":{\"320\":1}}],[\"默认document\",{\"1\":{\"320\":1}}],[\"默认背景颜色设置为绿色\",{\"1\":{\"316\":1}}],[\"默认有传参\",{\"1\":{\"305\":1}}],[\"默认的是逗号\",{\"1\":{\"293\":1}}],[\"默认的授权插件是内置的\",{\"1\":{\"283\":2}}],[\"默认为编译通过\",{\"1\":{\"471\":1}}],[\"默认为\",{\"1\":{\"283\":2}}],[\"默认情况下\",{\"1\":{\"317\":1,\"453\":1}}],[\"默认情况下任何人都可以注册\",{\"1\":{\"283\":2}}],[\"默认情况下所有用户\",{\"1\":{\"283\":2}}],[\"默认绑定规则下\",{\"1\":{\"274\":1}}],[\"默认绑定规则下的\",{\"1\":{\"274\":1}}],[\"默认绑定\",{\"0\":{\"274\":1},\"1\":{\"273\":1}}],[\"默认暴露\",{\"1\":{\"268\":2}}],[\"默认参数\",{\"1\":{\"213\":1}}],[\"默认参数避免副作用\",{\"0\":{\"76\":1}}],[\"默认返回当前对象的\",{\"1\":{\"34\":1}}],[\"命令了\",{\"1\":{\"468\":1}}],[\"命令\",{\"1\":{\"468\":1}}],[\"命令句柄限制暴露的api\",{\"0\":{\"449\":1}}],[\"命令注册用户\",{\"1\":{\"283\":1}}],[\"命令启动\",{\"1\":{\"282\":1}}],[\"命令行输入node\",{\"1\":{\"238\":1}}],[\"命令行\",{\"1\":{\"5\":1}}],[\"命名参数\",{\"0\":{\"73\":1}}],[\"一起使用\",{\"1\":{\"543\":1}}],[\"一种常见的方式是在\",{\"1\":{\"523\":1}}],[\"一方面不能滥用\",{\"1\":{\"514\":1}}],[\"一致\",{\"1\":{\"497\":1}}],[\"一样\",{\"1\":{\"445\":1}}],[\"一般使用\",{\"1\":{\"543\":1}}],[\"一般只用作临时测试\",{\"1\":{\"536\":1}}],[\"一般有两种方案\",{\"1\":{\"536\":1}}],[\"一般我们通过\",{\"1\":{\"536\":1}}],[\"一般来说\",{\"1\":{\"440\":1,\"523\":1,\"527\":1,\"536\":1}}],[\"一般偷懒全部用一个尺寸的也没问题\",{\"1\":{\"320\":1}}],[\"一开始只需要编写少量代码\",{\"1\":{\"440\":1}}],[\"一旦出现了\",{\"1\":{\"550\":1}}],[\"一旦传入的参数是\",{\"1\":{\"512\":1}}],[\"一旦定义了任意属性\",{\"1\":{\"499\":1}}],[\"一旦逻辑变得复杂起来\",{\"1\":{\"440\":1}}],[\"一旦软件组件被测试并发布\",{\"1\":{\"324\":1}}],[\"一旦安装\",{\"1\":{\"314\":1}}],[\"一旦输出一个值\",{\"1\":{\"232\":1}}],[\"一旦用webpack语法在import里会把代码耦合到模块绑定器\",{\"1\":{\"108\":1}}],[\"一\",{\"0\":{\"222\":1,\"280\":1,\"463\":1}}],[\"一元增量和减量语句受到自动分号插入的影响\",{\"1\":{\"123\":1}}],[\"一次性导出\",{\"1\":{\"538\":1}}],[\"一次\",{\"0\":{\"103\":1}}],[\"一个声明文件有时会依赖另一个声明文件中的类型\",{\"1\":{\"548\":1}}],[\"一个声明了但未使用的变量更像是由于重构未完成产生的错误\",{\"1\":{\"125\":1}}],[\"一个函数有输入和输出\",{\"1\":{\"502\":1}}],[\"一个接口中只能定义一个任意属性\",{\"1\":{\"499\":1}}],[\"一个比较常见的做法是\",{\"1\":{\"494\":1}}],[\"一个组件可以指定将它的\",{\"1\":{\"448\":1}}],[\"一个组件必须是纯粹的\",{\"1\":{\"411\":1}}],[\"一个有状态的值\",{\"1\":{\"439\":1}}],[\"一个初始的\",{\"1\":{\"439\":1}}],[\"一个\",{\"0\":{\"425\":1},\"1\":{\"439\":2,\"441\":1,\"442\":1}}],[\"一个常见的错误是\",{\"1\":{\"408\":1}}],[\"一个类或模块应该有且只有一个职责\",{\"1\":{\"323\":1}}],[\"一个新字段\",{\"1\":{\"316\":1}}],[\"一个对象的时候做了什么\",{\"1\":{\"277\":1}}],[\"一个bug修复了\",{\"1\":{\"220\":1}}],[\"一个路径只\",{\"0\":{\"103\":1}}],[\"一个空的构造函数或只是代表父类的构造函数是不需要写的\",{\"0\":{\"96\":1}}],[\"一个立即调用的函数表达式是一个单元\",{\"1\":{\"69\":1}}],[\"一直用圆括号也是没问题\",{\"0\":{\"88\":1}}],[\"一系列的语句\",{\"0\":{\"72\":1}}],[\"块的内部数据与实现是私有的\",{\"1\":{\"223\":1}}],[\"块中也包含了\",{\"0\":{\"143\":1}}],[\"块中包含\",{\"0\":{\"143\":1}}],[\"块\",{\"0\":{\"72\":1}}],[\"块注释\",{\"1\":{\"13\":1}}],[\"但语法不同\",{\"1\":{\"533\":1}}],[\"但由于后来\",{\"1\":{\"531\":1}}],[\"但有的时候\",{\"1\":{\"514\":1}}],[\"但在运行时会报错\",{\"1\":{\"512\":1}}],[\"但在底层其实被转化为了\",{\"1\":{\"396\":1}}],[\"但没有特定的事件可以执行此操作\",{\"1\":{\"450\":1}}],[\"但又不想让这些信息\",{\"1\":{\"445\":1}}],[\"但对于复杂的状态更新逻辑\",{\"1\":{\"440\":1}}],[\"但将它们视为关于组件需求的无条件声明会很有帮助\",{\"1\":{\"422\":1}}],[\"但你可能不会在应用程序代码中使用它们\",{\"1\":{\"419\":1}}],[\"但你可以通过它们传递任何\",{\"1\":{\"401\":1}}],[\"但它充分释放了\",{\"1\":{\"411\":1}}],[\"但它们与特定上下文\",{\"1\":{\"332\":1}}],[\"但一个组件必须返回一些东西\",{\"1\":{\"409\":1}}],[\"但实际上很好理解\",{\"1\":{\"550\":1}}],[\"但实际上还有其他方式可以解决这个问题\",{\"1\":{\"519\":1}}],[\"但实际上却渲染了\",{\"1\":{\"408\":1}}],[\"但实现各自的方法\",{\"1\":{\"346\":1}}],[\"但\",{\"1\":{\"398\":1,\"514\":1}}],[\"但大部分\",{\"1\":{\"393\":1}}],[\"但接口不同\",{\"1\":{\"367\":1}}],[\"但自身不能被实例化\",{\"1\":{\"350\":1}}],[\"但只使用了其中一部分方法\",{\"1\":{\"326\":1}}],[\"但不包括结束位置的项\",{\"1\":{\"301\":1}}],[\"但如果不是独立函数调用\",{\"1\":{\"275\":1}}],[\"但包含commonjs语法\",{\"1\":{\"269\":1}}],[\"但移位运算常常返回的是32为整形source\",{\"0\":{\"185\":1}}],[\"但总的来说应该导出常量\",{\"1\":{\"104\":1}}],[\"但是还是需要再强调下\",{\"1\":{\"541\":1}}],[\"但是interface无法定义\",{\"1\":{\"533\":1}}],[\"但是更推荐的是使用\",{\"1\":{\"524\":1}}],[\"但是在声明文件中\",{\"1\":{\"531\":1,\"549\":1}}],[\"但是在\",{\"1\":{\"523\":1}}],[\"但是若直接声明\",{\"1\":{\"519\":1}}],[\"但是若使用双重断言\",{\"1\":{\"517\":1}}],[\"但是并没有什么用\",{\"1\":{\"518\":1}}],[\"但是有的情况下\",{\"1\":{\"513\":1}}],[\"但是有一些情况比较特殊\",{\"1\":{\"275\":1}}],[\"但是由于父类\",{\"1\":{\"513\":1}}],[\"但是可选属性\",{\"1\":{\"499\":1}}],[\"但是我们一般不会这么做\",{\"1\":{\"492\":1}}],[\"但是我们可以通过变通的方式来解决这个问题\",{\"1\":{\"276\":1}}],[\"但是不能是其他类型\",{\"1\":{\"487\":1}}],[\"但是这个数组里没有对象是\",{\"1\":{\"485\":1}}],[\"但是这个会带来一些细微的bug\",{\"1\":{\"75\":1}}],[\"但是会在编译的时候报错\",{\"1\":{\"484\":1}}],[\"但是却传了一个\",{\"1\":{\"490\":1}}],[\"但是却没有一个类型能做为所有候选类型的类型\",{\"1\":{\"485\":1}}],[\"但是却不能够在它上面调用任意的方法\",{\"1\":{\"477\":1}}],[\"但是却应该被视为不可变\",{\"1\":{\"428\":1}}],[\"但是速度比babel更快\",{\"1\":{\"464\":1}}],[\"但是组件的\",{\"1\":{\"457\":1}}],[\"但是如果你想在下次渲染之前多次更新同一个\",{\"1\":{\"426\":1}}],[\"但是如果你传递了\",{\"1\":{\"403\":1}}],[\"但是你可以将任何\",{\"1\":{\"402\":1}}],[\"但是当你需要内联样式的时候\",{\"1\":{\"400\":1}}],[\"但是css的注意就要千万小心了\",{\"1\":{\"320\":1}}],[\"但是相对的部署起来会更快捷\",{\"1\":{\"286\":1}}],[\"但是最终结果却是没有用的\",{\"1\":{\"276\":1}}],[\"但是它还是无法结局我们\",{\"1\":{\"276\":1}}],[\"但是事实上\",{\"1\":{\"275\":1}}],[\"但是严格模式下\",{\"1\":{\"274\":1}}],[\"但是\",{\"1\":{\"245\":1,\"275\":1,\"318\":1,\"399\":2,\"427\":1,\"440\":2,\"442\":1,\"445\":1,\"446\":1,\"477\":1,\"519\":1,\"536\":1}}],[\"但是只会在第一次加载时运行一次\",{\"1\":{\"230\":1}}],[\"但是只有当其被分配后才会初始化\",{\"1\":{\"136\":1}}],[\"但是要一起用\",{\"0\":{\"202\":1}}],[\"但是要放在合理的位置\",{\"0\":{\"121\":1}}],[\"但是函数声明不是一个语句\",{\"0\":{\"72\":1}}],[\"但浏览器解析方式不同\",{\"0\":{\"71\":1}}],[\"但引用类型中的数组\",{\"1\":{\"34\":1}}],[\"使我们的代码向着高可维护性的目标发展\",{\"1\":{\"515\":1}}],[\"使原生部分更容易使用\",{\"1\":{\"386\":1}}],[\"使它们之间可用相互替换\",{\"1\":{\"374\":1}}],[\"使它们可以相互替换\",{\"1\":{\"374\":1}}],[\"使其执行完毕自动被移除\",{\"1\":{\"338\":1}}],[\"使pm2在服务器重新启动时自动启动\",{\"1\":{\"286\":1}}],[\"使得原本不兼容的接口可以协同工作\",{\"1\":{\"366\":1}}],[\"使得concreteclass实例可以继承abstractclass的属性和方法\",{\"1\":{\"350\":1}}],[\"使得对象在不同状态下的行为可以被封装和管理\",{\"1\":{\"331\":1}}],[\"使得系统更易于扩展和维护\",{\"1\":{\"326\":1}}],[\"使得系统能够容易地适应需求变化\",{\"1\":{\"324\":1}}],[\"使得客户端仅依赖于它们真正需要的方法\",{\"1\":{\"326\":1}}],[\"使得编译时就能确定模块的依赖关系\",{\"1\":{\"259\":1}}],[\"使得js编译器不再认为这是一个函数声明\",{\"1\":{\"70\":1}}],[\"使用方可以用\",{\"1\":{\"540\":1}}],[\"使用全局变量的声明文件时\",{\"1\":{\"526\":1}}],[\"使用类型断言时一定要格外小心\",{\"1\":{\"512\":1}}],[\"使用类实现单例模式\",{\"1\":{\"354\":1}}],[\"使用枚举类型可以为一组数值赋予友好的名字\",{\"1\":{\"476\":1}}],[\"使用构造函数\",{\"1\":{\"471\":1}}],[\"使用usereducer你必须给它传递一个初始状态\",{\"1\":{\"439\":1}}],[\"使用不同的属性值\",{\"1\":{\"412\":1}}],[\"使用条件渲染\",{\"1\":{\"412\":1}}],[\"使用驼峰命名法编写\",{\"1\":{\"400\":1}}],[\"使用驼峰式命名法给\",{\"0\":{\"398\":1}}],[\"使用react\",{\"0\":{\"379\":1}}],[\"使用require\",{\"0\":{\"247\":1}}],[\"使用适配器\",{\"1\":{\"367\":2}}],[\"使用模块模式实现单例模式\",{\"1\":{\"354\":1}}],[\"使用闭包实现单例模式\",{\"1\":{\"354\":1}}],[\"使用静态属性实现单例模式\",{\"1\":{\"354\":1}}],[\"使用对象字面量实现单例模式\",{\"1\":{\"354\":1}}],[\"使用对象属性来实现\",{\"1\":{\"346\":1}}],[\"使用抽象工厂模式\",{\"1\":{\"350\":1}}],[\"使用抽象类的实现方式代理模式\",{\"1\":{\"333\":1}}],[\"使用抽象类或接口定义一个稳定的合同\",{\"1\":{\"324\":1}}],[\"使用es5实现抽象工厂模式\",{\"1\":{\"350\":1}}],[\"使用原型来实现\",{\"1\":{\"346\":2}}],[\"使用函数封闭\",{\"1\":{\"346\":1}}],[\"使用ioc\",{\"1\":{\"327\":1}}],[\"使用import命令的时候\",{\"1\":{\"260\":1}}],[\"使用接口或抽象类\",{\"1\":{\"327\":1}}],[\"使用基类的地方\",{\"1\":{\"325\":1}}],[\"使用以下代码在扩展的目录中创建一个名为\",{\"1\":{\"319\":1}}],[\"使用以下代码创建一个名为\",{\"1\":{\"317\":1}}],[\"使用编程注入允许用户调用内容脚本\",{\"1\":{\"318\":1}}],[\"使用\",{\"0\":{\"400\":1,\"404\":1,\"422\":1,\"442\":1,\"443\":1,\"445\":1,\"446\":1,\"447\":1,\"449\":1,\"452\":1},\"1\":{\"277\":1,\"400\":1,\"414\":1,\"437\":1,\"442\":2,\"459\":1,\"463\":1,\"472\":1,\"473\":1,\"499\":1,\"500\":1,\"527\":3,\"530\":1,\"531\":2,\"537\":1,\"540\":1,\"541\":1,\"544\":1,\"546\":1}}],[\"使用browserify编译js\",{\"1\":{\"269\":1}}],[\"使用browserify编译打包js\",{\"1\":{\"264\":1}}],[\"使用babel将es6编译为es5代码\",{\"1\":{\"264\":1,\"269\":1}}],[\"使用m1\",{\"1\":{\"246\":1}}],[\"使用num\",{\"1\":{\"123\":1}}],[\"使用一对\",{\"1\":{\"70\":1}}],[\"使用字面值创建对象\",{\"0\":{\"40\":1}}],[\"也会去\",{\"1\":{\"536\":1}}],[\"也会重新挂载\",{\"1\":{\"457\":1}}],[\"也应该加上\",{\"1\":{\"534\":1}}],[\"也使用了\",{\"1\":{\"531\":1}}],[\"也兼容\",{\"1\":{\"519\":1}}],[\"也能被断言为\",{\"1\":{\"516\":3}}],[\"也有可能是历史遗留的或其他人编写的烂代码\",{\"1\":{\"515\":1}}],[\"也可用于在一个文件中一次性声明多个模块的类型\",{\"1\":{\"547\":1}}],[\"也可能是表示一个泛型\",{\"1\":{\"510\":1}}],[\"也可以用在普通的\",{\"1\":{\"541\":1}}],[\"也可以用来封装一系列的\",{\"1\":{\"374\":1}}],[\"也可以使用\",{\"1\":{\"531\":1,\"544\":1}}],[\"也可以赋值给任何类型\",{\"1\":{\"480\":1}}],[\"也可以返回一个\",{\"1\":{\"471\":1}}],[\"也可以是复杂的动态应用\",{\"1\":{\"383\":1}}],[\"也可以根据需要动态加载模块\",{\"1\":{\"251\":1}}],[\"也常用于对\",{\"1\":{\"496\":1}}],[\"也约束了它还有\",{\"1\":{\"493\":1}}],[\"也许在某处你想传入一个\",{\"1\":{\"478\":1}}],[\"也需要\",{\"1\":{\"453\":1}}],[\"也是开发中最常用的\",{\"1\":{\"328\":1}}],[\"也是如此\",{\"1\":{\"122\":1}}],[\"也限制了未来的灵活性\",{\"1\":{\"326\":1}}],[\"也被称作硬绑定\",{\"1\":{\"276\":1}}],[\"也让复杂逻辑更容易看清楚\",{\"1\":{\"145\":1}}],[\"也没有用这个变量\",{\"1\":{\"125\":1}}],[\"也就是说很容易因为不了解他们之间的依赖关系导致加载先后顺序出错\",{\"1\":{\"226\":1}}],[\"也就是说\",{\"1\":{\"70\":2,\"232\":1,\"245\":1,\"274\":1,\"478\":1}}],[\"也返回\",{\"1\":{\"34\":1}}],[\"意为立即调用的函数表达式\",{\"1\":{\"70\":1}}],[\"你应该始终避免它\",{\"1\":{\"460\":1}}],[\"你将学习如何使用\",{\"1\":{\"453\":1}}],[\"你将从事件处理器访问\",{\"1\":{\"450\":1}}],[\"你\",{\"1\":{\"450\":1}}],[\"你会通过\",{\"1\":{\"442\":1}}],[\"你必须单步执行更多的代码\",{\"1\":{\"440\":1}}],[\"你必须用另一对额外的大括号包裹对象\",{\"1\":{\"400\":1}}],[\"你就知道问题出在了\",{\"1\":{\"440\":1}}],[\"你就可能为此会留下隐患\",{\"1\":{\"431\":1}}],[\"你很难发现具体原因以及为什么\",{\"1\":{\"440\":1}}],[\"你希望两个组件的状态始终同步更改\",{\"1\":{\"433\":1}}],[\"你需要向\",{\"1\":{\"460\":1}}],[\"你需要编辑的是代码\",{\"1\":{\"460\":1}}],[\"你需要避免使用左列的方法\",{\"1\":{\"428\":1}}],[\"你需要创建一个新的数组\",{\"1\":{\"428\":1}}],[\"你需要创建一个新的对象\",{\"1\":{\"427\":1}}],[\"你需要从你更新的位置开始自底向上为每一层都创建新的拷贝\",{\"1\":{\"427\":1}}],[\"你需要像下面\",{\"1\":{\"418\":1}}],[\"你点击了\",{\"1\":{\"418\":1}}],[\"你点击了我\",{\"1\":{\"415\":2}}],[\"你通常希望在事件处理程序中进行\",{\"1\":{\"411\":1}}],[\"你自己的\",{\"1\":{\"402\":1}}],[\"你甚至可以在\",{\"1\":{\"400\":1}}],[\"你都需要写测试\",{\"1\":{\"220\":1}}],[\"你不应该直接修改存放在\",{\"1\":{\"427\":1}}],[\"你不应该改变任何用于组件渲染的输入\",{\"1\":{\"411\":1}}],[\"你不想显示已经打包好的物品\",{\"1\":{\"409\":1}}],[\"你不想有任何东西进行渲染\",{\"1\":{\"409\":1}}],[\"你不能在条件语句\",{\"1\":{\"422\":1}}],[\"你不能在一个函数中返回多个对象\",{\"1\":{\"396\":1}}],[\"你不能改变\",{\"1\":{\"406\":1}}],[\"你不用去考虑把\",{\"1\":{\"119\":1}}],[\"你不必提供上下文\",{\"1\":{\"82\":1}}],[\"你可能认为\",{\"1\":{\"477\":1}}],[\"你可能需要一个\",{\"1\":{\"450\":1}}],[\"你可能需要捕获子元素上的所有事件\",{\"1\":{\"419\":1}}],[\"你可能也会这么做\",{\"1\":{\"442\":1}}],[\"你可能想对每次点击进行埋点记录\",{\"1\":{\"419\":1}}],[\"你可能想要在标签中添加一些\",{\"1\":{\"399\":1}}],[\"你可能在\",{\"1\":{\"400\":1}}],[\"你可能会把这个逻辑移出到他自己的函数声明里\",{\"1\":{\"85\":1}}],[\"你可以定义一对值分别为\",{\"1\":{\"475\":1}}],[\"你可以通过\",{\"1\":{\"445\":1}}],[\"你可以随时在\",{\"1\":{\"440\":1}}],[\"你可以随时转到你喜欢的模块系统\",{\"0\":{\"100\":1}}],[\"你可以将组件的所有状态更新逻辑整合到一个外部函数中\",{\"1\":{\"438\":1}}],[\"你可以像\",{\"1\":{\"426\":1}}],[\"你可以调用事件对象中的\",{\"1\":{\"420\":1}}],[\"你可以使用联合类型\",{\"1\":{\"478\":1}}],[\"你可以使用这样的\",{\"1\":{\"427\":1}}],[\"你可以使用此对象来读取有关事件的信息\",{\"1\":{\"418\":1}}],[\"你可以使用\",{\"1\":{\"411\":1,\"445\":1}}],[\"你可以设置\",{\"1\":{\"406\":1}}],[\"你可以给\",{\"1\":{\"400\":1}}],[\"你可以在应用顶层放一个\",{\"1\":{\"442\":1}}],[\"你可以在\",{\"1\":{\"399\":1,\"440\":1}}],[\"你可以在后期添加新的属性或者变换变量的顺序而不会打破原有的调用\",{\"1\":{\"60\":1}}],[\"你可以\",{\"1\":{\"398\":1}}],[\"你可以直接返回\",{\"1\":{\"409\":1}}],[\"你可以直接在concreteclass中定义一个同名的静态方法\",{\"1\":{\"350\":1}}],[\"你可以直接获取到基本类型的值\",{\"0\":{\"32\":1}}],[\"你可以选择不同的排序算法\",{\"1\":{\"332\":1}}],[\"你可以指定\",{\"1\":{\"283\":2}}],[\"你可以用\",{\"0\":{\"200\":1},\"1\":{\"408\":1}}],[\"你可以用全大写字母设置静态变量\",{\"0\":{\"197\":1}}],[\"你几乎用不着\",{\"1\":{\"69\":1}}],[\"圆括号里不要加空格\",{\"0\":{\"164\":1}}],[\"圆括号\",{\"1\":{\"69\":1}}],[\"把变更应用于\",{\"1\":{\"450\":1}}],[\"把使用算法的责任和算法的实现分割开来\",{\"1\":{\"374\":1}}],[\"把回调函数推入目标事件的监听函数队列里去\",{\"1\":{\"338\":1}}],[\"把里面的内容添加到数组末尾\",{\"1\":{\"294\":1}}],[\"把数组转换成字符串\",{\"1\":{\"293\":1}}],[\"把逻辑操作符放在行首是让操作符的对齐方式和链式函数保持一致\",{\"1\":{\"145\":1}}],[\"把每一个\",{\"0\":{\"145\":1}}],[\"把他包裹在圆括号里更可读\",{\"0\":{\"87\":1}}],[\"把默认参数赋值放在最后\",{\"0\":{\"77\":1}}],[\"把这个函数分配给一个变量\",{\"0\":{\"71\":1}}],[\"把它和他的调用者\",{\"1\":{\"69\":1}}],[\"把立即执行函数包裹在圆括号里\",{\"0\":{\"69\":1}}],[\"不仅可以用在声明文件中\",{\"1\":{\"541\":1}}],[\"不再会声明一个全局变量\",{\"1\":{\"537\":1}}],[\"不管采用了以上两种方式中的哪一种\",{\"1\":{\"536\":1}}],[\"不管之后有没有赋值\",{\"1\":{\"484\":1}}],[\"不同的选项会影响模块的导入导出模式\",{\"1\":{\"536\":1}}],[\"不同处\",{\"1\":{\"533\":1}}],[\"不同品牌的手机\",{\"1\":{\"350\":1}}],[\"不确定一个联合类型的变量到底是哪个类型的时候\",{\"1\":{\"488\":1,\"512\":1}}],[\"不涉及其他\",{\"1\":{\"466\":1}}],[\"不应该包含任何像修改\",{\"1\":{\"452\":1}}],[\"不应分解\",{\"1\":{\"167\":1}}],[\"不希望\",{\"1\":{\"450\":1}}],[\"不允许再去修改它的值了\",{\"1\":{\"527\":1}}],[\"不允许将\",{\"1\":{\"519\":1}}],[\"不允许组件访问其他组件的\",{\"1\":{\"448\":1}}],[\"不允许有未使用的变量\",{\"0\":{\"125\":1}}],[\"不会被调用\",{\"1\":{\"457\":1}}],[\"不会\",{\"1\":{\"445\":1}}],[\"不会继承创建对象的属性\",{\"1\":{\"350\":1}}],[\"不会污染全局环境\",{\"1\":{\"251\":1}}],[\"不会污染全局作用域\",{\"1\":{\"230\":1}}],[\"不需要知道集合对象的底层表示\",{\"1\":{\"342\":1}}],[\"不需要使用属性的访问器函数\",{\"0\":{\"199\":1}}],[\"不改变接口定义\",{\"1\":{\"324\":1}}],[\"不然注册时会报错\",{\"1\":{\"285\":1}}],[\"不过如果只是临时的增加\",{\"1\":{\"514\":1}}],[\"不过事实上\",{\"1\":{\"503\":1}}],[\"不过有一种情况例外\",{\"1\":{\"492\":1}}],[\"不过这两种行为都仅限于开发环境\",{\"1\":{\"457\":1}}],[\"不过\",{\"1\":{\"270\":2}}],[\"不一致\",{\"1\":{\"431\":1}}],[\"不一样\",{\"1\":{\"263\":1}}],[\"不一定要使用this\",{\"1\":{\"98\":1}}],[\"不用考虑非同步加载的方式\",{\"1\":{\"245\":1}}],[\"不用管这个名字是不是由一个确定的变量推断出来的\",{\"1\":{\"68\":1}}],[\"不能用来定义具体的实现\",{\"1\":{\"529\":1}}],[\"不能用普通的数组的方式来描述\",{\"1\":{\"493\":1}}],[\"不能实例化抽象类\",{\"1\":{\"350\":1}}],[\"不能是js文件\",{\"1\":{\"320\":1}}],[\"不能有中文和大写\",{\"1\":{\"235\":1}}],[\"不能访问模块内部数据\",{\"1\":{\"224\":1}}],[\"不论是dom事件还是像backbone事件的很多属性\",{\"0\":{\"204\":1}}],[\"不必要的大写键\",{\"1\":{\"197\":1}}],[\"不保证返回string\",{\"1\":{\"182\":1}}],[\"不是一个真正的值\",{\"1\":{\"513\":1}}],[\"不是一个真正的类\",{\"1\":{\"513\":1}}],[\"不是数组类型\",{\"1\":{\"493\":1}}],[\"不是\",{\"1\":{\"488\":1,\"499\":1}}],[\"不是修改的模块内部的data\",{\"1\":{\"224\":1}}],[\"不是为了适应电脑的算法的\",{\"1\":{\"196\":1}}],[\"不是函数名或函数体\",{\"0\":{\"129\":1}}],[\"不是function的修饰符\",{\"1\":{\"112\":1}}],[\"不这样做会导致全局变量\",{\"0\":{\"118\":1}}],[\"不好吗\",{\"1\":{\"378\":1}}],[\"不好\",{\"1\":{\"86\":1}}],[\"不\",{\"1\":{\"75\":1,\"403\":1}}],[\"不采用iife时的函数声明和函数调用\",{\"1\":{\"70\":1}}],[\"不要求你使用内联样式\",{\"1\":{\"400\":1}}],[\"不要浪费了这个免费广告位\",{\"1\":{\"320\":1}}],[\"不要保存引用this\",{\"0\":{\"192\":1}}],[\"不要前置逗号\",{\"0\":{\"176\":1}}],[\"不要导出可变的东西\",{\"0\":{\"104\":1}}],[\"不要直接修改一个对象\",{\"1\":{\"427\":1}}],[\"不要直接从\",{\"0\":{\"102\":1}}],[\"不要直接调用\",{\"0\":{\"46\":1}}],[\"不要对参数重新赋值\",{\"0\":{\"81\":1}}],[\"不要改参数\",{\"0\":{\"80\":1}}],[\"不要使用javascript的\",{\"0\":{\"200\":1}}],[\"不要使用一元自增自减运算符\",{\"0\":{\"123\":1}}],[\"不要使用链接变量分配\",{\"0\":{\"122\":1}}],[\"不要使用\",{\"0\":{\"74\":1}}],[\"不要使用不必要的转义字符\",{\"0\":{\"66\":1}}],[\"不要用tc39\",{\"0\":{\"214\":1}}],[\"不要用前置或后置下划线\",{\"0\":{\"191\":1}}],[\"不要用空白行填充块\",{\"0\":{\"162\":1}}],[\"不要用选择操作符代替控制语句\",{\"0\":{\"146\":1}}],[\"不要用遍历器\",{\"0\":{\"110\":1}}],[\"不要用import通配符\",{\"0\":{\"101\":1}}],[\"不要用函数构造器创建函数\",{\"0\":{\"78\":1}}],[\"不要用\",{\"0\":{\"73\":1}}],[\"不要在非函数块\",{\"0\":{\"71\":1}}],[\"函数重载也是支持的\",{\"1\":{\"528\":1}}],[\"函数添加了一个泛型\",{\"1\":{\"520\":1}}],[\"函数接受的参数是\",{\"1\":{\"512\":1}}],[\"函数会返回\",{\"1\":{\"481\":1}}],[\"函数中通过打印日志的方式来观察每个状态的更新\",{\"1\":{\"440\":1}}],[\"函数中调用\",{\"1\":{\"275\":1}}],[\"函数和需要调度的\",{\"1\":{\"440\":1}}],[\"函数作为\",{\"1\":{\"415\":1}}],[\"函数等\",{\"1\":{\"324\":1}}],[\"函数是不是创建一个新的函数\",{\"1\":{\"276\":1}}],[\"函数是可以的\",{\"0\":{\"202\":1}}],[\"函数就是一个硬绑定\",{\"1\":{\"276\":1}}],[\"函数立即执行了\",{\"1\":{\"276\":1}}],[\"函数内部的\",{\"1\":{\"276\":1}}],[\"函数调用位置\",{\"1\":{\"275\":1,\"276\":2}}],[\"函数别名\",{\"1\":{\"275\":1}}],[\"函数的类型\",{\"0\":{\"501\":1}}],[\"函数的\",{\"1\":{\"276\":1}}],[\"函数的这种调用方式就被称为默认绑定\",{\"1\":{\"274\":1}}],[\"函数的声明和iife的区别在于\",{\"1\":{\"70\":1}}],[\"函数库\",{\"0\":{\"195\":1}}],[\"函数名用小驼峰\",{\"0\":{\"194\":1}}],[\"函数名和小括号之间不要空格\",{\"0\":{\"171\":1}}],[\"函数名和变量名一样是也如此\",{\"1\":{\"129\":1}}],[\"函数\",{\"0\":{\"189\":1,\"455\":1},\"1\":{\"229\":1,\"277\":1,\"422\":2,\"426\":1,\"439\":3,\"453\":1,\"455\":2,\"533\":1}}],[\"函数签名部分要有空格\",{\"0\":{\"79\":1}}],[\"函数声明则提升了函数名和函数体\",{\"0\":{\"130\":1}}],[\"函数声明时作用域被提前了\",{\"1\":{\"68\":1}}],[\"函数声明\",{\"0\":{\"502\":1},\"1\":{\"68\":1,\"502\":2}}],[\"函数表达式是一个语句\",{\"0\":{\"72\":1}}],[\"函数表达式名和声明的函数名是不一样的\",{\"1\":{\"68\":1}}],[\"函数表达式\",{\"0\":{\"503\":1},\"1\":{\"68\":1,\"502\":1}}],[\"函数只有一个语句\",{\"1\":{\"55\":1}}],[\"所实现的功能跟babel一样\",{\"1\":{\"464\":1}}],[\"所产生的引用对象时\",{\"1\":{\"454\":1}}],[\"所以对于\",{\"1\":{\"545\":1}}],[\"所以声明文件也就不得不用到\",{\"1\":{\"541\":1}}],[\"所以声明文件存放的位置也有所约束\",{\"1\":{\"536\":1}}],[\"所以这里就不详细介绍了\",{\"1\":{\"541\":1}}],[\"所以这也可以换一种说法\",{\"1\":{\"516\":1}}],[\"所以只能由其他人将声明文件发布到\",{\"1\":{\"536\":1}}],[\"所以以后我们自己创建\",{\"1\":{\"536\":1}}],[\"所以也可以用\",{\"1\":{\"528\":1}}],[\"所以大部分情况都应该使用\",{\"1\":{\"527\":1}}],[\"所以当我们将\",{\"1\":{\"523\":1}}],[\"所以为了增加代码的质量\",{\"1\":{\"519\":1}}],[\"所以类型断言不是类型转换\",{\"1\":{\"518\":1}}],[\"所以它与\",{\"1\":{\"516\":1}}],[\"所以它不会导致重新运行\",{\"1\":{\"454\":1}}],[\"所以如果不是非常确定\",{\"1\":{\"514\":1}}],[\"所以多个函数定义如果有包含关系\",{\"1\":{\"508\":1}}],[\"所以我们通过声明合并\",{\"1\":{\"541\":1}}],[\"所以我们可以用数组的类型来定义它\",{\"1\":{\"507\":1}}],[\"所以我们函数中的\",{\"1\":{\"275\":1}}],[\"所以报错了\",{\"1\":{\"490\":1,\"499\":1,\"500\":2}}],[\"所以会报错\",{\"1\":{\"488\":1}}],[\"所以此时\",{\"1\":{\"457\":1}}],[\"所以读取它们还为时过早\",{\"1\":{\"450\":1}}],[\"所以需要一个指向\",{\"1\":{\"446\":1}}],[\"所以你只能要么把生成的节点用一个\",{\"1\":{\"410\":1}}],[\"所以在\",{\"1\":{\"398\":1}}],[\"所以没有关闭注册\",{\"1\":{\"289\":1}}],[\"所以\",{\"1\":{\"275\":2,\"332\":1}}],[\"所以commonjs规范比较适用\",{\"1\":{\"245\":1}}],[\"所以加载起来比较快\",{\"1\":{\"245\":1}}],[\"所以必须先引入jquery库\",{\"1\":{\"224\":1}}],[\"所以他们只在必须使用时才出现哦\",{\"1\":{\"66\":1}}],[\"所有的依赖项都是相同的\",{\"1\":{\"457\":1}}],[\"所有的赋值都用\",{\"0\":{\"36\":1}}],[\"所有跟计算奖金有关的逻辑不再放在环境类context中\",{\"1\":{\"375\":1}}],[\"所有依赖于它的对象都会得到通知并被自动更新\",{\"1\":{\"336\":1}}],[\"所有\",{\"1\":{\"252\":1}}],[\"所有代码都运行在模块作用域\",{\"1\":{\"230\":1}}],[\"所有注释开头空一个\",{\"0\":{\"150\":1}}],[\"他可能还有很多变化\",{\"1\":{\"214\":1}}],[\"他需要满足三个条件\",{\"0\":{\"197\":1}}],[\"他的子属性都是不能被改变的\",{\"1\":{\"197\":1}}],[\"他的初始化时当这个case被执行时才产生\",{\"1\":{\"136\":1}}],[\"他的优先级高于每个函数作用域自带的\",{\"0\":{\"73\":1}}],[\"他会正常输出是因为变量作用域上升\",{\"1\":{\"127\":1}}],[\"他会令人迷惑不解\",{\"1\":{\"76\":1}}],[\"他创建了一个this的当前执行上下文的函数的版本\",{\"1\":{\"85\":1}}],[\"他就是潘多拉盒子\",{\"0\":{\"65\":1}}],[\"他优化了代码高亮\",{\"1\":{\"45\":1}}],[\"语法更加优雅\",{\"1\":{\"519\":1}}],[\"语法的\",{\"1\":{\"510\":1}}],[\"语法的简写形式\",{\"1\":{\"410\":1}}],[\"语法\",{\"0\":{\"510\":1},\"1\":{\"510\":1}}],[\"语法扩展\",{\"1\":{\"393\":1}}],[\"语法声明在整个switch的代码块里都可见\",{\"1\":{\"136\":1}}],[\"语法糖\",{\"1\":{\"86\":1}}],[\"语法简洁\",{\"1\":{\"64\":1}}],[\"语句导入的模块\",{\"1\":{\"536\":1}}],[\"语句也只能用来定义类型\",{\"1\":{\"529\":1}}],[\"语句块中\",{\"0\":{\"143\":1}}],[\"语句中总是需要用\",{\"0\":{\"143\":1}}],[\"语句使用强制`toboolean\",{\"0\":{\"133\":1}}],[\"语句\",{\"0\":{\"55\":1,\"86\":1},\"1\":{\"408\":1,\"543\":1}}],[\"串联成多行\",{\"0\":{\"63\":1}}],[\"超过100个字符的字符串不应该用\",{\"0\":{\"63\":1}}],[\"奇迹又发生了\",{\"1\":{\"60\":1}}],[\"yfeoqp2\",{\"1\":{\"405\":1}}],[\"yilijishu\",{\"1\":{\"318\":1}}],[\"yarnpkg\",{\"1\":{\"287\":1}}],[\"yarn\",{\"1\":{\"287\":1}}],[\"yaml文件作为配置\",{\"1\":{\"285\":1}}],[\"yaml\",{\"1\":{\"282\":1,\"285\":1}}],[\"years\",{\"1\":{\"473\":2}}],[\"year\",{\"1\":{\"156\":2}}],[\"yup\",{\"0\":{\"179\":1,\"219\":1},\"1\":{\"72\":1,\"190\":1}}],[\"your\",{\"1\":{\"482\":1}}],[\"yourusername\",{\"1\":{\"289\":2,\"290\":3}}],[\"you\",{\"1\":{\"63\":6,\"64\":4,\"167\":2,\"482\":1}}],[\"y\",{\"1\":{\"55\":2,\"79\":1,\"85\":4,\"88\":4,\"125\":7,\"136\":2,\"143\":9,\"158\":1,\"174\":2,\"399\":2,\"502\":10,\"503\":5,\"533\":4}}],[\"<reference\",{\"1\":{\"550\":1,\"551\":1}}],[\"<t>\",{\"1\":{\"520\":1}}],[\"<title>hello\",{\"1\":{\"380\":1}}],[\"<title>modular\",{\"1\":{\"250\":1}}],[\"<类型>值\",{\"1\":{\"510\":1}}],[\"<levelcontext\",{\"1\":{\"442\":1}}],[\"<li\",{\"1\":{\"408\":4,\"409\":1,\"410\":2}}],[\"<li>work\",{\"1\":{\"400\":1}}],[\"<li>prepare\",{\"1\":{\"400\":1}}],[\"<li>improve\",{\"1\":{\"400\":1}}],[\"<link\",{\"1\":{\"317\":2,\"319\":1}}],[\"<context创建名称\",{\"1\":{\"442\":1}}],[\"<card>\",{\"1\":{\"405\":1}}],[\"<input\",{\"1\":{\"420\":1,\"448\":1,\"449\":1}}],[\"<img>\",{\"1\":{\"402\":1}}],[\"<img\",{\"1\":{\"399\":1}}],[\"<foo>\",{\"1\":{\"510\":1}}],[\"<form\",{\"1\":{\"420\":1}}],[\"<fragment\",{\"1\":{\"410\":1}}],[\"<fragment>\",{\"1\":{\"410\":1}}],[\"<uploadbutton\",{\"1\":{\"416\":1}}],[\"<ul>\",{\"1\":{\"410\":2}}],[\"<ul\",{\"1\":{\"400\":3}}],[\"<>\",{\"1\":{\"395\":2,\"410\":1,\"425\":1,\"426\":1}}],[\"<playbutton\",{\"1\":{\"416\":1}}],[\"<profile\",{\"1\":{\"410\":1}}],[\"<projectname>\",{\"1\":{\"390\":1}}],[\"<p>\",{\"1\":{\"410\":1}}],[\"<p>new\",{\"1\":{\"408\":2}}],[\"<p><\",{\"1\":{\"395\":1}}],[\"<p>choose\",{\"1\":{\"319\":1}}],[\"<myapp\",{\"1\":{\"380\":1}}],[\"<meta\",{\"1\":{\"380\":1}}],[\"<avatar\",{\"1\":{\"402\":1,\"403\":1,\"404\":1,\"405\":2}}],[\"<all\",{\"1\":{\"320\":2}}],[\"<app\",{\"1\":{\"286\":1}}],[\"<div>\",{\"1\":{\"319\":1,\"395\":1,\"410\":1,\"416\":1}}],[\"<div\",{\"1\":{\"319\":1,\"380\":1,\"405\":1,\"418\":1,\"419\":1,\"453\":1,\"454\":1}}],[\"<button>发送<\",{\"1\":{\"420\":1}}],[\"<button\",{\"1\":{\"317\":2,\"415\":4,\"416\":3,\"418\":3,\"419\":2,\"425\":1,\"426\":1}}],[\"<body>\",{\"1\":{\"250\":1,\"317\":2,\"319\":1,\"380\":1}}],[\"<h1>\",{\"1\":{\"399\":1,\"410\":1,\"425\":1,\"426\":1}}],[\"<h1>hello\",{\"1\":{\"380\":1}}],[\"<head>\",{\"1\":{\"250\":1,\"317\":2,\"319\":1,\"380\":1}}],[\"<html>\",{\"1\":{\"250\":1,\"317\":2,\"319\":1,\"380\":1}}],[\"<script>\",{\"1\":{\"523\":1,\"525\":4,\"526\":1,\"542\":1}}],[\"<script\",{\"1\":{\"224\":5,\"250\":1,\"251\":1,\"258\":2,\"269\":1,\"317\":1,\"319\":1,\"380\":4}}],[\"<=\",{\"1\":{\"89\":3}}],[\"<\",{\"1\":{\"51\":1,\"110\":1,\"123\":1,\"139\":2,\"224\":3,\"250\":5,\"258\":1,\"308\":2,\"309\":2,\"317\":9,\"319\":7,\"380\":8,\"395\":2,\"399\":1,\"400\":1,\"405\":2,\"408\":3,\"409\":1,\"410\":8,\"415\":1,\"416\":4,\"418\":4,\"419\":1,\"420\":1,\"425\":2,\"426\":2,\"442\":1,\"486\":2}}],[\"类无法实现联合类型\",{\"1\":{\"533\":1}}],[\"类可以实现interface\",{\"1\":{\"533\":1}}],[\"类数组\",{\"0\":{\"493\":1},\"1\":{\"493\":1}}],[\"类似于声明文件中的\",{\"1\":{\"549\":1}}],[\"类似于在文件顶部\",{\"1\":{\"422\":1}}],[\"类似\",{\"1\":{\"539\":1,\"549\":1}}],[\"类似的\",{\"1\":{\"531\":1}}],[\"类似上面的对象浅拷贝\",{\"0\":{\"51\":1}}],[\"类就能满足大部分情况\",{\"1\":{\"400\":1}}],[\"类与类之间的依赖关系更简单\",{\"1\":{\"323\":1}}],[\"类\",{\"0\":{\"195\":1},\"1\":{\"213\":1,\"229\":1,\"324\":1}}],[\"类有默认的构造方法\",{\"0\":{\"96\":1}}],[\"类型了\",{\"1\":{\"550\":1}}],[\"类型别名可以继承接口\",{\"1\":{\"533\":1}}],[\"类型声明\",{\"0\":{\"519\":1}}],[\"类型转换\",{\"0\":{\"518\":1}}],[\"类型之间的对比只会比较它们最终的结构\",{\"1\":{\"516\":1}}],[\"类型兼容性\",{\"1\":{\"516\":1}}],[\"类型系统的限制而无法精确定义类型的场景\",{\"1\":{\"515\":1}}],[\"类型断言语句在编译结果中会被删除\",{\"1\":{\"518\":1}}],[\"类型断言只会影响\",{\"1\":{\"518\":1}}],[\"类型断言只能够\",{\"1\":{\"512\":1}}],[\"类型断言也是很常见的\",{\"1\":{\"513\":1}}],[\"类型断言的限制\",{\"0\":{\"516\":1}}],[\"类型断言的常见用途有以下几种\",{\"1\":{\"511\":1}}],[\"类型断言的用途\",{\"0\":{\"511\":1}}],[\"类型断言\",{\"0\":{\"509\":1,\"518\":1,\"519\":1,\"520\":1},\"1\":{\"486\":1,\"509\":1}}],[\"类型检查器使用window\",{\"1\":{\"486\":1}}],[\"类型推断的结果为联合数组类型\",{\"1\":{\"485\":1}}],[\"类型推论也可能按照相反的方向进行\",{\"1\":{\"486\":1}}],[\"类型推论会帮助提供类型\",{\"1\":{\"484\":1}}],[\"类型推论\",{\"0\":{\"483\":1}}],[\"类型而完全不被类型检查\",{\"1\":{\"484\":1}}],[\"类型的依赖\",{\"1\":{\"550\":1}}],[\"类型的兼容性\",{\"1\":{\"516\":1}}],[\"类型的参数\",{\"1\":{\"490\":2}}],[\"类型的\",{\"1\":{\"485\":1,\"516\":2,\"519\":3}}],[\"类型的值\",{\"1\":{\"481\":1,\"499\":1}}],[\"类型的变量时\",{\"1\":{\"515\":1}}],[\"类型的变量上\",{\"1\":{\"514\":1}}],[\"类型的变量没有什么用\",{\"1\":{\"479\":1}}],[\"类型的变量\",{\"1\":{\"478\":2,\"512\":1,\"515\":1}}],[\"类型\",{\"0\":{\"490\":1},\"1\":{\"34\":1,\"471\":1,\"475\":2,\"485\":1,\"490\":1,\"510\":3,\"513\":1,\"514\":1,\"515\":1,\"519\":4,\"527\":2,\"544\":1}}],[\"类型外\",{\"1\":{\"34\":1}}],[\"浅拷贝\",{\"1\":{\"47\":1}}],[\"ಠ\",{\"1\":{\"47\":2}}],[\"89757\",{\"1\":{\"500\":2}}],[\"8\",{\"0\":{\"47\":1,\"55\":1,\"56\":1,\"76\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"107\":1,\"125\":1,\"139\":1,\"162\":1,\"195\":1,\"460\":1},\"1\":{\"82\":2,\"307\":3,\"320\":1,\"380\":1,\"490\":4,\"500\":1,\"514\":1}}],[\"如之前所说\",{\"1\":{\"545\":1}}],[\"如之前所学\",{\"1\":{\"527\":1}}],[\"如此配置之后\",{\"1\":{\"536\":1}}],[\"如在开发环境中\",{\"1\":{\"456\":1}}],[\"如在生产环境中\",{\"1\":{\"456\":1}}],[\"如何只运行一次\",{\"1\":{\"456\":1}}],[\"如何修复\",{\"1\":{\"456\":1}}],[\"如何处理在开发环境中\",{\"0\":{\"456\":1}}],[\"如何编写\",{\"0\":{\"453\":1}}],[\"如何使用\",{\"1\":{\"448\":1}}],[\"如何引入呢\",{\"1\":{\"269\":1}}],[\"如点击\",{\"1\":{\"414\":1}}],[\"如咖啡机\",{\"1\":{\"332\":1}}],[\"如spring框架\",{\"1\":{\"327\":1}}],[\"如业务逻辑\",{\"1\":{\"327\":1}}],[\"如将数据访问\",{\"1\":{\"323\":1}}],[\"如下所示\",{\"1\":{\"415\":1}}],[\"如下\",{\"1\":{\"282\":1}}],[\"如上例所示\",{\"1\":{\"260\":1}}],[\"如\",{\"0\":{\"46\":1},\"1\":{\"46\":1,\"493\":1,\"533\":1}}],[\"如果导入此库之后会扩展全局变量\",{\"1\":{\"545\":1}}],[\"如果对象拥有深层的层级\",{\"1\":{\"532\":1}}],[\"如果对象和函数是在不同时间创建的\",{\"1\":{\"460\":1}}],[\"如果需要引用另一个库的类型\",{\"1\":{\"550\":1}}],[\"如果需要我们手动给\",{\"1\":{\"503\":1}}],[\"如果需要添加新功能\",{\"1\":{\"323\":1}}],[\"如果要我们现在写一个对函数表达式\",{\"1\":{\"503\":1}}],[\"如果接口中有多个类型的属性\",{\"1\":{\"499\":1}}],[\"如果上下文类型表达式包含了明确的类型信息\",{\"1\":{\"486\":1}}],[\"如果定义的时候没有赋值\",{\"1\":{\"484\":1}}],[\"如果某些代码是为了响应特定交互\",{\"1\":{\"460\":1}}],[\"如果开发环境中\",{\"1\":{\"456\":1}}],[\"如果用户在一个由\",{\"1\":{\"441\":1}}],[\"如果所有\",{\"1\":{\"440\":1}}],[\"如果可能的话\",{\"1\":{\"431\":1}}],[\"如果左侧是\",{\"1\":{\"408\":1}}],[\"如果想要在一个组件中包含多个元素\",{\"1\":{\"395\":1}}],[\"如果这个唯一的实例已经存在\",{\"1\":{\"354\":1}}],[\"如果已经创建了实例\",{\"1\":{\"354\":1}}],[\"如果有返回当前实例\",{\"1\":{\"346\":1}}],[\"如果有\",{\"1\":{\"338\":1}}],[\"如果有两个参数\",{\"1\":{\"301\":1}}],[\"如果一个类实现了大而全的接口\",{\"1\":{\"326\":1}}],[\"如果一个数组有很多行\",{\"0\":{\"56\":1}}],[\"如果子类没有正确实现lsp\",{\"1\":{\"325\":1}}],[\"如果2个都写\",{\"1\":{\"320\":1}}],[\"如果不设置是无法直接访问的\",{\"1\":{\"320\":1}}],[\"如果指定js\",{\"1\":{\"320\":1}}],[\"如果在此阶段重新加载扩展程序\",{\"1\":{\"317\":1}}],[\"如果数组为空则返回undefined\",{\"1\":{\"296\":1}}],[\"如果本地和外部都不能访问verdaccio网页\",{\"1\":{\"285\":1}}],[\"如果私有包服务不可用在本地\",{\"1\":{\"283\":2}}],[\"如果函数表达式不是在上下文类型的位置\",{\"1\":{\"486\":1}}],[\"如果函数没有返回其它对象\",{\"1\":{\"277\":1}}],[\"如果函数体由一个没有副作用的表达式语句组成\",{\"0\":{\"86\":1}}],[\"如果函数体由一条返回一个表达式的语句组成\",{\"0\":{\"55\":1}}],[\"如果我们不想通过\",{\"1\":{\"276\":1}}],[\"如果我们调用函数时有多个引用调用\",{\"1\":{\"275\":1}}],[\"如果直接在index\",{\"1\":{\"242\":1}}],[\"如果没有生效\",{\"1\":{\"526\":1}}],[\"如果没有找到最佳通用类型的话\",{\"1\":{\"485\":1}}],[\"如果没有权限\",{\"1\":{\"371\":1}}],[\"如果没有\",{\"1\":{\"338\":1}}],[\"如果没有发现指定模块\",{\"1\":{\"231\":1}}],[\"如果没有具体说明\",{\"0\":{\"96\":1}}],[\"如果参数字符串以\",{\"1\":{\"231\":1}}],[\"如果是type的话\",{\"1\":{\"533\":1}}],[\"如果是将声明文件直接存放于当前项目中\",{\"1\":{\"526\":1}}],[\"如果是以\",{\"1\":{\"526\":1}}],[\"如果是浏览器环境\",{\"1\":{\"245\":1}}],[\"如果是自定义模块\",{\"1\":{\"231\":1}}],[\"如果是第三方模块\",{\"1\":{\"231\":1}}],[\"如果当前这个模块依赖另一个模块怎么办\",{\"1\":{\"224\":1}}],[\"如果属性\",{\"0\":{\"201\":1}}],[\"如果javascript在你的断行里错误的插入了分号\",{\"1\":{\"179\":1}}],[\"如果注释不是在第一行\",{\"0\":{\"149\":1}}],[\"如果你多次声明一个同名的接口\",{\"1\":{\"533\":1}}],[\"如果你创建自己的路由库\",{\"1\":{\"442\":1}}],[\"如果你必须通过许多中间组件向下传递\",{\"1\":{\"442\":1}}],[\"如果你在一个\",{\"1\":{\"441\":1}}],[\"如果你能在渲染期间从组件的\",{\"1\":{\"431\":1}}],[\"如果你总是同时更新两个或更多的\",{\"1\":{\"431\":1}}],[\"如果你渲染同一个组件两次\",{\"1\":{\"423\":1}}],[\"如果你不想在标签中增加一个额外的\",{\"1\":{\"395\":1}}],[\"如果你想读取最新值而不\",{\"1\":{\"460\":1}}],[\"如果你想根据以前的状态更新一些状态\",{\"1\":{\"460\":1}}],[\"如果你想使用\",{\"1\":{\"450\":1}}],[\"如果你想阻止一个事件到达父组件\",{\"1\":{\"418\":1}}],[\"如果你想要定义内联事件处理函数\",{\"1\":{\"415\":1}}],[\"如果你想要什么东西变成\",{\"1\":{\"191\":1}}],[\"如果你想用这个功能\",{\"1\":{\"216\":1}}],[\"如果你的应用允许用户更改其外观\",{\"1\":{\"442\":1}}],[\"如果你的组件需要一个\",{\"1\":{\"410\":1}}],[\"如果你的赋值语句超出\",{\"0\":{\"124\":1}}],[\"如果你的函数只有一个参数并且函数体没有大括号\",{\"0\":{\"88\":1}}],[\"如果你一定要用\",{\"0\":{\"112\":1}}],[\"如果你一定要对参数重新赋值\",{\"0\":{\"37\":1}}],[\"如果你有一个相当复杂的函数\",{\"1\":{\"85\":1}}],[\"如果你发现一个函数又大又复杂\",{\"1\":{\"68\":1}}],[\"如果\",{\"0\":{\"143\":1},\"1\":{\"34\":1,\"75\":1,\"454\":1,\"460\":1}}],[\"如果自定义对象\",{\"1\":{\"34\":1}}],[\"7vqd0fps\",{\"1\":{\"399\":1}}],[\"7\",{\"0\":{\"46\":1,\"55\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":2,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"98\":1,\"106\":1,\"124\":1,\"138\":1,\"161\":1,\"194\":1,\"428\":1,\"459\":1},\"1\":{\"300\":3,\"301\":6,\"302\":4,\"303\":2,\"304\":2,\"307\":2,\"484\":3,\"487\":1,\"488\":1,\"499\":1}}],[\"6370614359172\",{\"1\":{\"358\":1}}],[\"65533\",{\"1\":{\"291\":1}}],[\"6aac1ea8707a\",{\"1\":{\"285\":1}}],[\"666\",{\"1\":{\"285\":1}}],[\"60\",{\"1\":{\"283\":1}}],[\"6+\",{\"0\":{\"212\":1}}],[\"647\",{\"0\":{\"185\":1}}],[\"6\",{\"0\":{\"45\":1,\"54\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"74\":1,\"90\":1,\"97\":1,\"105\":1,\"123\":1,\"137\":1,\"153\":1,\"160\":1,\"186\":1,\"193\":1,\"239\":1,\"420\":1,\"427\":1,\"458\":1},\"1\":{\"231\":1,\"302\":5,\"307\":1,\"472\":2,\"475\":1,\"476\":3,\"497\":1}}],[\"404\",{\"1\":{\"552\":1}}],[\"40\",{\"1\":{\"505\":1}}],[\"400\",{\"1\":{\"375\":1}}],[\"4688f1\",{\"1\":{\"319\":1}}],[\"4px\",{\"1\":{\"317\":1}}],[\"4|3|true\",{\"1\":{\"305\":1}}],[\"484\",{\"1\":{\"472\":1}}],[\"48\",{\"1\":{\"313\":1,\"317\":3,\"320\":1}}],[\"4873\",{\"1\":{\"282\":1,\"283\":1,\"285\":4,\"286\":1,\"287\":2,\"289\":2,\"290\":2,\"291\":1}}],[\"483\",{\"0\":{\"185\":1}}],[\"42\",{\"1\":{\"125\":1,\"172\":3,\"193\":1}}],[\"4\",{\"0\":{\"43\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":2,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"65\":1,\"72\":1,\"88\":1,\"95\":1,\"103\":1,\"121\":1,\"130\":1,\"135\":1,\"151\":1,\"158\":1,\"184\":1,\"191\":1,\"202\":1,\"209\":1,\"226\":1,\"232\":1,\"259\":1,\"277\":1,\"399\":1,\"405\":1,\"418\":1,\"425\":1,\"456\":1},\"1\":{\"44\":2,\"45\":2,\"55\":2,\"56\":2,\"59\":1,\"82\":2,\"110\":1,\"136\":1,\"183\":1,\"263\":1,\"277\":1,\"286\":1,\"301\":2,\"302\":7,\"305\":1,\"306\":2,\"307\":2,\"308\":1,\"309\":1,\"476\":1,\"477\":3,\"486\":1,\"502\":2}}],[\"5|4|true\",{\"1\":{\"305\":1}}],[\"51\",{\"1\":{\"298\":3,\"299\":3}}],[\"500ml\",{\"1\":{\"333\":2}}],[\"500\",{\"1\":{\"291\":1}}],[\"580mb\",{\"1\":{\"285\":1}}],[\"5\",{\"0\":{\"44\":1,\"53\":1,\"58\":1,\"59\":1,\"60\":1,\"66\":1,\"73\":1,\"89\":1,\"96\":1,\"104\":1,\"122\":1,\"136\":1,\"152\":1,\"159\":1,\"185\":1,\"192\":1,\"233\":1,\"400\":1,\"406\":1,\"419\":1,\"426\":1,\"457\":1},\"1\":{\"41\":2,\"45\":2,\"55\":2,\"56\":2,\"82\":4,\"110\":1,\"125\":1,\"139\":2,\"158\":1,\"231\":2,\"282\":1,\"294\":1,\"296\":1,\"300\":3,\"301\":6,\"302\":4,\"303\":3,\"304\":4,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"400\":2,\"475\":1,\"476\":1,\"488\":2,\"490\":3,\"491\":1,\"492\":1,\"497\":1,\"498\":1,\"499\":2,\"500\":3,\"514\":1,\"519\":1}}],[\"$anonymous\",{\"1\":{\"283\":4}}],[\"$all\",{\"1\":{\"283\":4}}],[\"$authenticated\",{\"1\":{\"283\":16}}],[\"$sidebarbtn\",{\"1\":{\"206\":1}}],[\"$sidebar\",{\"1\":{\"206\":1,\"207\":3,\"209\":1}}],[\"$\",{\"0\":{\"208\":1},\"1\":{\"41\":1,\"58\":3,\"64\":2,\"66\":1,\"86\":3,\"88\":1,\"95\":1,\"160\":7,\"167\":2,\"204\":4,\"206\":3,\"207\":3,\"209\":4,\"224\":8,\"251\":2,\"269\":2,\"285\":5,\"286\":7,\"287\":4,\"289\":1,\"290\":2,\"291\":1,\"314\":1,\"319\":1,\"337\":1,\"346\":3,\"367\":4,\"416\":1,\"456\":1,\"473\":2,\"523\":3,\"526\":1,\"529\":1}}],[\"用接口定义函数的形状\",{\"0\":{\"504\":1}}],[\"用接口表示数组\",{\"0\":{\"492\":1}}],[\"用来告诉编译器这是一个模块的声明文件\",{\"1\":{\"546\":1}}],[\"用来导出默认值的类型\",{\"1\":{\"540\":1}}],[\"用来导出一个拥有子属性的对象\",{\"1\":{\"539\":1}}],[\"用来定义全局函数的类型\",{\"1\":{\"528\":1}}],[\"用来表示函数的定义\",{\"1\":{\"503\":1}}],[\"用来\",{\"1\":{\"439\":1}}],[\"用作紧跟在\",{\"1\":{\"399\":1}}],[\"用作\",{\"1\":{\"399\":1}}],[\"用户不应该感受到\",{\"1\":{\"456\":1}}],[\"用户操作给\",{\"1\":{\"439\":1}}],[\"用户名\",{\"1\":{\"283\":2,\"289\":1}}],[\"用户需要知道所要加载的变量名或函数名\",{\"1\":{\"260\":1}}],[\"用户设置\",{\"1\":{\"12\":1}}],[\"用于保存渲染间的数据\",{\"1\":{\"422\":1}}],[\"用于原生应用\",{\"0\":{\"386\":1}}],[\"用于构建\",{\"1\":{\"378\":1}}],[\"用于适配两种不同的播放器接口\",{\"1\":{\"367\":1}}],[\"用于存储事件与回调之间的对应关系\",{\"1\":{\"338\":1}}],[\"用于数组去重\",{\"1\":{\"236\":1}}],[\"用于暴露有函数\",{\"1\":{\"224\":4}}],[\"用npm\",{\"1\":{\"235\":1}}],[\"用jquery对象查询作用域的find方法查询\",{\"0\":{\"209\":1}}],[\"用javascript高级函数代替for\",{\"0\":{\"110\":1}}],[\"用箭头函数或函数绑定\",{\"0\":{\"192\":1}}],[\"用大驼峰式命名类\",{\"0\":{\"190\":1}}],[\"用大括号包裹多行代码块\",{\"0\":{\"141\":1}}],[\"用小驼峰式命名你的对象\",{\"0\":{\"189\":1}}],[\"用移位运算要小心\",{\"0\":{\"185\":1}}],[\"用bitshifting将字符串转成数字使代码运行效率大幅增长\",{\"1\":{\"184\":1}}],[\"用点开头强调该行是一个方法调用\",{\"0\":{\"160\":1}}],[\"用空格来隔开运算符\",{\"0\":{\"158\":1}}],[\"用圆括号来混合这些操作符\",{\"0\":{\"139\":1}}],[\"用数组的这些迭代方法\",{\"1\":{\"110\":1}}],[\"用数组解构\",{\"0\":{\"59\":1}}],[\"用extends实现继承\",{\"0\":{\"93\":1}}],[\"用spread操作符\",{\"0\":{\"82\":1}}],[\"用默认参数语法而不是在函数里对参数重新赋值\",{\"0\":{\"75\":1}}],[\"用rest语法\",{\"0\":{\"74\":1}}],[\"用命名函数表达式而不是函数声明\",{\"0\":{\"68\":1}}],[\"用字符串模板而不是字符串拼接来组织可编程字符串\",{\"0\":{\"64\":1}}],[\"用字面量赋值\",{\"0\":{\"49\":1}}],[\"用单引号\",{\"0\":{\"62\":1}}],[\"用扩展运算符做数组浅拷贝\",{\"0\":{\"51\":1}}],[\"用\",{\"0\":{\"50\":1,\"52\":1,\"53\":1,\"54\":1,\"100\":1,\"105\":1,\"118\":1,\"132\":1,\"152\":1,\"153\":1,\"183\":1,\"201\":1,\"202\":1,\"216\":1,\"217\":1,\"451\":1},\"1\":{\"127\":1,\"378\":1,\"426\":1,\"468\":1,\"494\":1}}],[\"用对象的这些方法\",{\"1\":{\"110\":1}}],[\"用对象的解构赋值来获取和使用对象某个或多个属性值\",{\"0\":{\"58\":1}}],[\"用对象的rest解构运算符\",{\"0\":{\"47\":1}}],[\"用对象方法简写\",{\"0\":{\"42\":1}}],[\"用属性值缩写\",{\"0\":{\"43\":1}}],[\"用计算后属性名\",{\"0\":{\"41\":1}}],[\"当且仅当在以下几个场景下\",{\"1\":{\"549\":1}}],[\"当全局变量是一个类的时候\",{\"1\":{\"529\":1}}],[\"当一个第三方库没有提供声明文件时\",{\"1\":{\"525\":1}}],[\"当一个对象的状态发生改变时\",{\"1\":{\"336\":1}}],[\"当我们需要依赖一个全局变量的声明文件时\",{\"1\":{\"551\":1}}],[\"当我们在书写一个全局变量的声明文件时\",{\"1\":{\"549\":2}}],[\"当我们引用一个在此类型上不存在的属性或方法时\",{\"1\":{\"514\":1}}],[\"当我们想要创建一个对象时\",{\"1\":{\"357\":1}}],[\"当类之间有继承关系时\",{\"1\":{\"513\":1}}],[\"当类的职责单一时\",{\"1\":{\"323\":1}}],[\"当然也就必须使用三斜线指令来引入了\",{\"1\":{\"551\":1}}],[\"当然也包含以\",{\"1\":{\"523\":1}}],[\"当然它也可以与\",{\"1\":{\"543\":1}}],[\"当然不能将父类的实例赋值给类型为子类的变量\",{\"1\":{\"519\":1}}],[\"当然就无法使用\",{\"1\":{\"513\":1}}],[\"当然\",{\"1\":{\"486\":1}}],[\"当然这与函数调用位置有关\",{\"1\":{\"274\":1}}],[\"当候选类型不能使用的时候我们需要明确的指出类型\",{\"1\":{\"485\":1}}],[\"当它们被永不为真的类型保护所约束时\",{\"1\":{\"480\":1}}],[\"当访问一个越界的元素\",{\"1\":{\"475\":1}}],[\"当访问一个已知索引的元素\",{\"1\":{\"475\":1}}],[\"当组件从屏幕上移除时\",{\"1\":{\"458\":1}}],[\"当组件接收到新的\",{\"1\":{\"458\":1}}],[\"当组件被添加到屏幕上时\",{\"1\":{\"458\":1}}],[\"当使用第三方库时\",{\"1\":{\"521\":1}}],[\"当使用\",{\"1\":{\"440\":1}}],[\"当状态更新逻辑足够简单时\",{\"1\":{\"440\":1}}],[\"当同一数据在多个\",{\"1\":{\"431\":1}}],[\"当前账户\",{\"1\":{\"442\":1}}],[\"当前图片\",{\"1\":{\"421\":1}}],[\"当前输入值\",{\"1\":{\"421\":1}}],[\"当前页面\",{\"1\":{\"318\":1}}],[\"当作\",{\"1\":{\"410\":1}}],[\"当您将内容嵌套在\",{\"1\":{\"405\":1}}],[\"当您重新加载扩展程序时\",{\"1\":{\"312\":1}}],[\"当对象状态改变时\",{\"1\":{\"331\":1}}],[\"当高层次模块直接依赖于低层次模块的具体实现\",{\"1\":{\"327\":1}}],[\"当需要从几个表达式中推断类型时候\",{\"1\":{\"485\":1}}],[\"当需要设置\",{\"1\":{\"447\":1}}],[\"当需要更换数据库或更改数据库访问方式时\",{\"1\":{\"327\":1}}],[\"当需要更换或添加新实现时\",{\"1\":{\"327\":1}}],[\"当需要添加支付宝支付功能时\",{\"1\":{\"324\":1}}],[\"当需求变化时\",{\"1\":{\"323\":1}}],[\"当某些特定页面打开才显示的图标\",{\"1\":{\"320\":1}}],[\"当用户单击按钮时\",{\"1\":{\"319\":1}}],[\"当函数不带用任何修饰进行调用时\",{\"1\":{\"274\":1}}],[\"当函数被定义时候\",{\"1\":{\"34\":1}}],[\"当新的功能加到javascript里后\",{\"1\":{\"179\":1}}],[\"当\",{\"1\":{\"179\":1,\"431\":1,\"488\":1,\"512\":1,\"516\":1}}],[\"当出现长的方法链\",{\"0\":{\"160\":1}}],[\"当你指定了\",{\"1\":{\"478\":1}}],[\"当你对依赖不满意时\",{\"1\":{\"460\":1}}],[\"当你希望组件\",{\"1\":{\"445\":1}}],[\"当你操作\",{\"1\":{\"428\":1}}],[\"当你想要更新存储于\",{\"1\":{\"428\":1}}],[\"当你想要更新一个对象时\",{\"1\":{\"427\":1}}],[\"当你在\",{\"1\":{\"427\":1}}],[\"当你需要\",{\"1\":{\"411\":1}}],[\"当你需要交互性时\",{\"1\":{\"406\":1}}],[\"当你export一个结构体\",{\"0\":{\"195\":1}}],[\"当你export\",{\"0\":{\"194\":1}}],[\"当你的控制语句\",{\"0\":{\"145\":1}}],[\"当你一定要用函数表达式\",{\"0\":{\"85\":1}}],[\"当多个事件处理程序以相似的方式修改\",{\"1\":{\"440\":1}}],[\"当多个case分句试图定义同一个事情时就出问题了\",{\"1\":{\"136\":1}}],[\"当多个函数链在一起的时候好读\",{\"1\":{\"86\":1}}],[\"当获取的属性是变量时用方括号\",{\"0\":{\"115\":1}}],[\"当创建一个带有动态属性名的对象时\",{\"0\":{\"41\":1}}],[\"都可以继承\",{\"1\":{\"533\":1}}],[\"都可以查看和发布任意包\",{\"1\":{\"283\":2}}],[\"都会被推断成\",{\"1\":{\"484\":1}}],[\"都会被保留\",{\"1\":{\"457\":1}}],[\"都有\",{\"1\":{\"475\":1}}],[\"都描述了一个单一的用户交互\",{\"1\":{\"441\":1}}],[\"都没问题\",{\"1\":{\"440\":1}}],[\"都应该存在且只存在于一个指定的组件中作为\",{\"1\":{\"434\":1}}],[\"都视为不可直接修改的\",{\"1\":{\"427\":1}}],[\"都用于浏览器编程\",{\"1\":{\"270\":1}}],[\"都只能在运行时确定这些东西\",{\"1\":{\"259\":1}}],[\"都只存在于它定义的那个块级作用域\",{\"1\":{\"38\":1}}],[\"都要写一个回归测试\",{\"1\":{\"220\":1}}],[\"都变成了全局变量\",{\"1\":{\"122\":1}}],[\"都是先有了\",{\"1\":{\"543\":1}}],[\"都是\",{\"1\":{\"541\":1}}],[\"都是同一个层面的解决方案\",{\"1\":{\"391\":1}}],[\"都是私有的\",{\"1\":{\"229\":1}}],[\"都是声明了一个函数foo并且随后调用函数foo\",{\"1\":{\"70\":1}}],[\"都是块级作用域而不是函数级作用域\",{\"1\":{\"121\":1}}],[\"都是块级作用域\",{\"0\":{\"38\":1}}],[\"因为你只能将它赋值为\",{\"1\":{\"479\":1}}],[\"因为可以轻松替换依赖项以进行单元测试\",{\"1\":{\"327\":1}}],[\"因为它们的行为更专注\",{\"1\":{\"323\":1}}],[\"因为它们是可操作的\",{\"0\":{\"151\":1}}],[\"因为一不小心就可能影响全局样式\",{\"1\":{\"320\":1}}],[\"因为回调函数是在\",{\"1\":{\"276\":1}}],[\"因为我们使用了\",{\"1\":{\"275\":1}}],[\"因为我们不能直接看出函数的调用位置\",{\"1\":{\"275\":1}}],[\"因为我们的函数执行上下文就是全局作用域\",{\"1\":{\"275\":1}}],[\"因为同步意味着阻塞加载\",{\"1\":{\"270\":1}}],[\"因为他们会产生副作用\",{\"0\":{\"200\":1}}],[\"因为在第一次迭代后acc\",{\"1\":{\"55\":1}}],[\"因为这种方式比前两种方式复杂多了\",{\"1\":{\"492\":1}}],[\"因为这里不会使用到上下文类型\",{\"1\":{\"486\":1}}],[\"因为这个有一个\",{\"1\":{\"125\":1}}],[\"因为这个确保你不会改变你的初始值\",{\"1\":{\"36\":1}}],[\"因为这样可以避免创建一个临时数组\",{\"0\":{\"54\":1}}],[\"因为\",{\"1\":{\"37\":1,\"513\":1,\"517\":1}}],[\"因此组件通常不需要操作\",{\"1\":{\"446\":1}}],[\"因此组件不应依赖于彼此的渲染顺序\",{\"1\":{\"411\":1}}],[\"因此无论你调用多少次\",{\"1\":{\"425\":1}}],[\"因此不能推断出这个结果\",{\"1\":{\"485\":1}}],[\"因此不能通过子类实例访问\",{\"1\":{\"350\":1}}],[\"因此不需要更新其他值\",{\"1\":{\"319\":1}}],[\"因此有了amd\",{\"1\":{\"270\":1}}],[\"因此浏览器端一般采用amd规范\",{\"1\":{\"245\":1}}],[\"因此这部分也是你的api的内容\",{\"1\":{\"191\":1}}],[\"因此\",{\"1\":{\"34\":2,\"400\":1,\"450\":1,\"486\":1}}],[\"因此重写\",{\"1\":{\"34\":1}}],[\"只是在实现形式上\",{\"1\":{\"533\":1}}],[\"只是定义了全局变量\",{\"1\":{\"523\":1}}],[\"只是向外部暴露一些接口\",{\"1\":{\"223\":1}}],[\"只读的约束存在于第一次给对象赋值的时候\",{\"1\":{\"500\":1}}],[\"只读属性\",{\"0\":{\"500\":1}}],[\"只在\",{\"1\":{\"459\":1,\"479\":1}}],[\"只执行一次\",{\"1\":{\"456\":1}}],[\"只暴露\",{\"1\":{\"449\":1}}],[\"只会显示发送了一条获取请求\",{\"1\":{\"456\":1}}],[\"只会为下一次渲染变更\",{\"0\":{\"425\":1}}],[\"只会传一个字符串\",{\"1\":{\"399\":1}}],[\"只负责自己的任务\",{\"1\":{\"411\":1}}],[\"只能赋值给\",{\"1\":{\"478\":1}}],[\"只能在组件或自定义\",{\"1\":{\"422\":1}}],[\"只能在以下两种场景中使用大括号\",{\"1\":{\"399\":1}}],[\"只能返回一个根元素\",{\"0\":{\"395\":1}}],[\"只能设置一个关键字\",{\"1\":{\"320\":1}}],[\"只能用来判断两个对象是否属于实例关系\",{\"1\":{\"34\":1}}],[\"只要索引的类型是数字时\",{\"1\":{\"492\":1}}],[\"只要这些业务规则指向的目标一致\",{\"1\":{\"374\":1}}],[\"只要我们还在借助prototype来实现对象的创建和原型的继承\",{\"1\":{\"357\":1}}],[\"只要有一项满足条件\",{\"1\":{\"309\":1}}],[\"只要搞清楚这四种绑定规则\",{\"1\":{\"273\":1}}],[\"只要保证它是可以正常工作且没有副作用的\",{\"0\":{\"95\":1}}],[\"只需修改低层次的实现\",{\"1\":{\"327\":1}}],[\"只需调整依赖的抽象接口实现\",{\"1\":{\"327\":1}}],[\"只需创建一个新的alipaypayment类实现paymentmethod接口\",{\"1\":{\"324\":1}}],[\"只需要满足\",{\"1\":{\"519\":1}}],[\"只需要\",{\"1\":{\"516\":2,\"517\":1}}],[\"只需要改动相关联的单一职责类\",{\"1\":{\"323\":1}}],[\"只需要配置\",{\"0\":{\"88\":1}}],[\"只需指定\",{\"1\":{\"302\":1}}],[\"只需提供\",{\"1\":{\"302\":1}}],[\"只需在上面代码的基础稍作修改\",{\"1\":{\"251\":1}}],[\"只有\",{\"1\":{\"540\":1,\"545\":1}}],[\"只有在声明文件中使用\",{\"1\":{\"537\":1}}],[\"只有所有人都参与进来\",{\"1\":{\"536\":1}}],[\"只有var声明的才会\",{\"1\":{\"274\":1}}],[\"只有加载完成\",{\"1\":{\"245\":1}}],[\"只有当标准的算术运算符\",{\"0\":{\"139\":1}}],[\"只对变量\",{\"1\":{\"122\":1}}],[\"只对那些无效的标示使用引号\",{\"0\":{\"45\":1}}],[\"只返回了处于其原型链最顶端的\",{\"1\":{\"34\":1}}],[\"间接指向\",{\"1\":{\"34\":1}}],[\"则需要使用另一种语法在声明文件中扩展全局变量的类型\",{\"1\":{\"545\":1}}],[\"则需要用嵌套的\",{\"1\":{\"532\":1}}],[\"则需要通过\",{\"1\":{\"34\":1}}],[\"则建议和其他源码一起放到\",{\"1\":{\"526\":1}}],[\"则不需要任何配置\",{\"1\":{\"526\":1}}],[\"则不应将这些信息放入该组件的\",{\"1\":{\"431\":1}}],[\"则会报错\",{\"1\":{\"519\":1}}],[\"则会代理请求到\",{\"1\":{\"283\":2}}],[\"则可以不需要嵌套\",{\"1\":{\"532\":1}}],[\"则可以打破\",{\"1\":{\"517\":1}}],[\"则可以在任意属性中使用联合类型\",{\"1\":{\"499\":1}}],[\"则应该是这样\",{\"1\":{\"503\":1}}],[\"则它们被认为是不同的\",{\"1\":{\"460\":1}}],[\"则必须在依赖项数组中指定它\",{\"1\":{\"454\":1}}],[\"则输出相同\",{\"1\":{\"411\":1}}],[\"则直接返回\",{\"1\":{\"354\":1}}],[\"则逐个调用队列里的回调函数\",{\"1\":{\"338\":1}}],[\"则表示加载的是一个位于相对路径\",{\"1\":{\"231\":1}}],[\"则这个文件名也叫a\",{\"0\":{\"193\":1}}],[\"则默认取数组第一个值为初始值\",{\"1\":{\"55\":1}}],[\"则返回\",{\"1\":{\"34\":1}}],[\"开闭原则\",{\"1\":{\"325\":1,\"327\":1}}],[\"开放封闭原则鼓励设计者在面对需求变化时\",{\"1\":{\"324\":1}}],[\"开放封闭原则是面向对象设计的另一基本原则\",{\"1\":{\"324\":1}}],[\"开放封闭原则\",{\"0\":{\"324\":1},\"1\":{\"322\":1}}],[\"开放远程访问\",{\"1\":{\"283\":1}}],[\"开启权限\",{\"1\":{\"315\":1}}],[\"开发者更喜欢\",{\"1\":{\"393\":1}}],[\"开发者可以结合自身的功能诉求以及最佳实践做选择\",{\"1\":{\"391\":1}}],[\"开发者重写\",{\"1\":{\"34\":1}}],[\"开发技术创建的\",{\"1\":{\"310\":1}}],[\"开头的函数\",{\"1\":{\"422\":1}}],[\"开头\",{\"1\":{\"231\":1,\"415\":1}}],[\"开始递增的数字\",{\"1\":{\"476\":1}}],[\"开始向后查找\",{\"1\":{\"303\":1,\"304\":1}}],[\"开始\",{\"1\":{\"21\":1}}],[\"这很容易理解\",{\"1\":{\"519\":1}}],[\"这和类型断言是非常相似的\",{\"1\":{\"519\":1}}],[\"这段代码隐藏了\",{\"1\":{\"512\":1}}],[\"这时\",{\"1\":{\"508\":1,\"523\":1}}],[\"这时仍然不允许添加未定义的属性\",{\"1\":{\"498\":1}}],[\"这时就必须采用非同步模式\",{\"1\":{\"245\":1}}],[\"这被叫做\",{\"1\":{\"486\":1}}],[\"这被称为\",{\"1\":{\"433\":1}}],[\"这能避免\",{\"1\":{\"478\":1}}],[\"这使你可以维护自己的数组或\",{\"1\":{\"447\":1}}],[\"这使得后续的贡献者\",{\"0\":{\"204\":1}}],[\"这称为声明合并\",{\"1\":{\"533\":1}}],[\"这称为\",{\"1\":{\"447\":1}}],[\"这对代码调试很有帮助\",{\"1\":{\"441\":1}}],[\"这就意味着\",{\"1\":{\"441\":1}}],[\"这就意味着你可以单独对它进行测试\",{\"1\":{\"440\":1}}],[\"这就是声明文件\",{\"1\":{\"523\":1}}],[\"这就是每个链接\",{\"1\":{\"442\":1}}],[\"这就是为什么在\",{\"1\":{\"398\":1}}],[\"这就是为什么多个\",{\"1\":{\"396\":1}}],[\"这就是我们将要将的第\",{\"1\":{\"277\":1}}],[\"这就是我们的隐式绑定规则\",{\"1\":{\"275\":1}}],[\"这就是显式绑定\",{\"1\":{\"276\":1}}],[\"这就是所谓的显式绑定规则\",{\"1\":{\"276\":1}}],[\"这就是所谓的隐式绑定\",{\"1\":{\"275\":1}}],[\"这就是现代模块实现的基石\",{\"1\":{\"224\":1}}],[\"这一个属性\",{\"1\":{\"532\":1}}],[\"这一点和\",{\"1\":{\"441\":1}}],[\"这一原则也被称为拥有\",{\"1\":{\"434\":1}}],[\"这一概念可能会导致开发者误以为更改这个不会导致崩溃或者不需要测试\",{\"1\":{\"191\":1}}],[\"这包括\",{\"1\":{\"411\":1}}],[\"这也同时去除掉了代码中的\",{\"1\":{\"520\":1}}],[\"这也比类型断言的\",{\"1\":{\"519\":1}}],[\"这也适用于保存\",{\"1\":{\"450\":1}}],[\"这也是为了在类型断言时的安全考虑\",{\"1\":{\"516\":1}}],[\"这也是\",{\"1\":{\"398\":1,\"514\":1,\"541\":1}}],[\"这也会导致程序出现意外行为\",{\"1\":{\"123\":1}}],[\"这也会导致优化问题\",{\"1\":{\"81\":1}}],[\"这本书\",{\"1\":{\"328\":1}}],[\"这增加了维护成本\",{\"1\":{\"326\":1}}],[\"这有助于实现ocp\",{\"1\":{\"324\":1}}],[\"这有助于其他开发人员快速理解你指出的需要重新访问的问题\",{\"0\":{\"151\":1}}],[\"这将使页面的背景颜色与按钮的颜色相同\",{\"1\":{\"318\":1}}],[\"这将使用一个popup\",{\"1\":{\"317\":1}}],[\"这将允许多个扩展组件访问该值并更新它\",{\"1\":{\"314\":1}}],[\"这里我们使用了\",{\"1\":{\"536\":1}}],[\"这里我们使用了简化的父类子类的关系来表达类型的兼容性\",{\"1\":{\"516\":1}}],[\"这里只演示了全局变量这种模式的声明文件\",{\"1\":{\"523\":1}}],[\"这里的\",{\"1\":{\"487\":1}}],[\"这里的代码只会在每次渲染后\",{\"1\":{\"454\":1}}],[\"这里的代码只会在组件挂载后执行\",{\"1\":{\"454\":1}}],[\"这里的代码会在每次渲染后执行\",{\"1\":{\"454\":1}}],[\"这里\",{\"1\":{\"485\":1,\"490\":1}}],[\"这里有两种选择\",{\"1\":{\"485\":1}}],[\"这里大家要注意的依然是浅拷贝和深拷贝的问题\",{\"1\":{\"358\":1}}],[\"这里使用了内置的object\",{\"1\":{\"358\":1}}],[\"这里需要对\",{\"1\":{\"338\":1}}],[\"这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑\",{\"1\":{\"333\":1}}],[\"这里仅仅是为了演示content\",{\"1\":{\"320\":1}}],[\"这里因为方便演示\",{\"1\":{\"289\":1}}],[\"这里可用设置为淘宝\",{\"1\":{\"283\":1}}],[\"这里提一点\",{\"1\":{\"276\":1}}],[\"这里才是函数的实际调用位置\",{\"1\":{\"275\":1}}],[\"这说明我们\",{\"1\":{\"274\":1}}],[\"这并不适合在浏览器环境\",{\"1\":{\"270\":1}}],[\"这点与es6模块化有重大差异\",{\"1\":{\"232\":1}}],[\"这意味着应避免在类中混合不同的业务逻辑\",{\"1\":{\"323\":1}}],[\"这意味着你不必担心旧版浏览器中的结尾逗号问题\",{\"1\":{\"177\":1}}],[\"这意味着在一个文件里函数很容易\",{\"1\":{\"68\":1}}],[\"这导致git\",{\"1\":{\"177\":1}}],[\"这些场景听上去很拗口\",{\"1\":{\"550\":1}}],[\"这些值可能来自于动态的内容\",{\"1\":{\"477\":1}}],[\"这些图像在清单manifest\",{\"1\":{\"317\":1}}],[\"这些属性是完全公有的\",{\"1\":{\"191\":1}}],[\"这些规则会变得更复杂难懂\",{\"1\":{\"179\":1}}],[\"这些不同于常规注释\",{\"0\":{\"151\":1}}],[\"这些方法可能会被屏蔽掉\",{\"1\":{\"46\":1}}],[\"这提高了可读性\",{\"1\":{\"139\":1,\"145\":1}}],[\"这是符合\",{\"1\":{\"536\":1}}],[\"这是可以通过编译的\",{\"1\":{\"503\":1}}],[\"这是联合类型和接口的结合\",{\"1\":{\"499\":1}}],[\"这是故意的\",{\"1\":{\"448\":1}}],[\"这是个人偏好问题\",{\"1\":{\"440\":1}}],[\"这是编写\",{\"1\":{\"433\":1}}],[\"这是组件从\",{\"1\":{\"429\":1}}],[\"这是组件第一次在\",{\"1\":{\"429\":1}}],[\"这是一种告诉\",{\"1\":{\"426\":1}}],[\"这是一个不常见的用例\",{\"1\":{\"426\":1}}],[\"这是一个附加工具\",{\"1\":{\"197\":1}}],[\"这是一个坏消息\",{\"0\":{\"71\":1}}],[\"这是一个内部属性\",{\"1\":{\"34\":1}}],[\"这是它跟装饰器模式最大的不同\",{\"1\":{\"370\":1}}],[\"这是\",{\"1\":{\"277\":1}}],[\"这是因为在\",{\"1\":{\"415\":1}}],[\"这是因为我们在\",{\"1\":{\"275\":1}}],[\"这是因为counter是一个原始类型的值\",{\"1\":{\"232\":1}}],[\"这是需要注意的\",{\"1\":{\"274\":1}}],[\"这是收集到的各种es6特性的链接\",{\"0\":{\"213\":1}}],[\"这是从对象中抽取一个忽略特殊字段的对象的一种形式\",{\"1\":{\"125\":1}}],[\"这强调了我们不可变的规则\",{\"1\":{\"110\":1}}],[\"这确保你有单个默认的导出\",{\"1\":{\"101\":1}}],[\"这种语法了\",{\"1\":{\"541\":2}}],[\"这种错误提示显然是非常有用的\",{\"1\":{\"514\":1}}],[\"这种组件特有的记忆被称为\",{\"1\":{\"421\":1}}],[\"这种情况下\",{\"1\":{\"399\":1,\"409\":1,\"477\":1,\"533\":1}}],[\"这种情况会return\",{\"1\":{\"86\":1}}],[\"这种类型的设计模式属于结构型模式\",{\"1\":{\"362\":1}}],[\"这种模式一般是由于\",{\"1\":{\"536\":1}}],[\"这种模式不需要额外安装其他包\",{\"1\":{\"536\":1}}],[\"这种模式用于顺序访问集合对象的元素\",{\"1\":{\"342\":1}}],[\"这种模式也被称为发布\",{\"1\":{\"336\":1}}],[\"这种模式通过将状态相关的操作封装到各自独立的状态类中\",{\"1\":{\"331\":1}}],[\"这种形式来调用函数的\",{\"1\":{\"276\":1}}],[\"这种写法就很容易造成\",{\"1\":{\"275\":1}}],[\"这种在代码中出现的变量会使阅读者迷惑\",{\"1\":{\"125\":1}}],[\"这种做法是有帮助的\",{\"1\":{\"120\":1}}],[\"这种做法也可以是你在调试的时候单步每个声明语句\",{\"1\":{\"119\":1}}],[\"这种方式需要配置下\",{\"1\":{\"536\":1}}],[\"这种方式不需要额外的配置\",{\"1\":{\"536\":1}}],[\"这种方式就是遵循隐式绑定规则\",{\"1\":{\"275\":1}}],[\"这种方式很容易去声明新的变量\",{\"1\":{\"119\":1}}],[\"这种方式\",{\"0\":{\"101\":1}}],[\"这种方法判断不了\",{\"1\":{\"34\":1}}],[\"这种构造函数是不需要写的\",{\"1\":{\"96\":1}}],[\"这通常就是你想要的\",{\"1\":{\"85\":1}}],[\"这会很难保持它们同步\",{\"1\":{\"431\":1}}],[\"这会首先执行\",{\"1\":{\"419\":1}}],[\"这会让\",{\"1\":{\"415\":1}}],[\"这会让你的测试变得脆弱\",{\"1\":{\"220\":1}}],[\"这会增加耦合\",{\"1\":{\"327\":1}}],[\"这会降低代码的可预测性和稳定性\",{\"1\":{\"325\":1}}],[\"这会将页面的背景颜色变为与按钮相同的颜色\",{\"1\":{\"318\":1}}],[\"这会触发以编程方式注入的内容脚本\",{\"1\":{\"318\":1}}],[\"这会打开漏洞\",{\"1\":{\"78\":1}}],[\"这会导致函数自带的\",{\"0\":{\"73\":1}}],[\"这在现代浏览器和类似babel编译器中很常见\",{\"1\":{\"68\":1}}],[\"这消除了由匿名函数在错误调用栈产生的所有假设\",{\"1\":{\"68\":1}}],[\"这可能就是时候把这个函数单独抽成一个模块了\",{\"1\":{\"68\":1}}],[\"这可以使你将定义的所有属性放在对象的一个地方\",{\"1\":{\"41\":1}}],[\"这个类型\",{\"1\":{\"548\":1}}],[\"这个最常用的选项\",{\"1\":{\"536\":1}}],[\"这个前面已经学习过了\",{\"1\":{\"516\":1}}],[\"这个例子里\",{\"1\":{\"486\":1}}],[\"这个例子会得到一个类型错误\",{\"1\":{\"486\":1}}],[\"这个特殊的\",{\"1\":{\"459\":1}}],[\"这个\",{\"1\":{\"442\":1}}],[\"这个函数表达式有明确的参数类型注解\",{\"1\":{\"486\":1}}],[\"这个函数叫作\",{\"1\":{\"438\":1}}],[\"这个函数妨碍这个文件其他部分的理解性\",{\"1\":{\"68\":1}}],[\"这个事件对象还允许你阻止传播\",{\"1\":{\"418\":1}}],[\"这个空标签被称作\",{\"1\":{\"395\":1}}],[\"这个很重要\",{\"1\":{\"320\":1}}],[\"这个必须写\",{\"1\":{\"320\":1}}],[\"这个弹出窗口的\",{\"1\":{\"317\":1}}],[\"这个方法没有返回值\",{\"1\":{\"305\":1}}],[\"这个方法会先创建当前数组一个副本\",{\"1\":{\"300\":1}}],[\"这个新对象会绑定到函数调用的\",{\"1\":{\"277\":1}}],[\"这个新对象会被执行原型连接\",{\"1\":{\"277\":1}}],[\"这个变量是一个对象\",{\"1\":{\"231\":1}}],[\"这个变量是可信的\",{\"1\":{\"197\":1}}],[\"这个是不必要的\",{\"1\":{\"197\":1}}],[\"这个时候\",{\"1\":{\"276\":1}}],[\"这个时候函数\",{\"1\":{\"275\":1}}],[\"这个时候的\",{\"1\":{\"274\":1}}],[\"这个时候就可以把\",{\"0\":{\"143\":1}}],[\"这个时候可以忽略\",{\"0\":{\"55\":1}}],[\"这个需要想一下\",{\"1\":{\"76\":1}}],[\"这样就可以在声明文件中使用\",{\"1\":{\"550\":1}}],[\"这样就可以解决访问\",{\"1\":{\"512\":1}}],[\"这样就方便了后续的操作\",{\"1\":{\"515\":1}}],[\"这样也不会报错了\",{\"1\":{\"486\":1}}],[\"这样也不会报错\",{\"1\":{\"478\":1}}],[\"这样也是为了更方便的知道有哪些属性用了缩写\",{\"1\":{\"44\":1}}],[\"这样不会报错\",{\"1\":{\"478\":1}}],[\"这样传入\",{\"1\":{\"426\":1}}],[\"这样传入一个根据队列中的前一个\",{\"1\":{\"426\":1}}],[\"这样的设计其实也很容易就能理解\",{\"1\":{\"516\":1}}],[\"这样的话明确了\",{\"1\":{\"515\":1}}],[\"这样的话这个函数就能接受\",{\"1\":{\"513\":1}}],[\"这样的话就不报错了\",{\"1\":{\"486\":1}}],[\"这样的语法\",{\"1\":{\"510\":1}}],[\"这样的保留字\",{\"1\":{\"398\":1}}],[\"这样的模式就叫做单例模式\",{\"1\":{\"353\":1}}],[\"这样的操作就是工厂模式\",{\"1\":{\"345\":1}}],[\"这样的写法会暴露所有模块成员\",{\"1\":{\"224\":1}}],[\"这样\",{\"1\":{\"327\":1,\"408\":1,\"497\":1}}],[\"这样我们就完成了verdaccio在docker上的部署\",{\"1\":{\"285\":1}}],[\"这样做除了保证模块的独立性\",{\"1\":{\"224\":1}}],[\"这样确保可读性和可维护性\",{\"1\":{\"167\":1}}],[\"这样你就能去遍历对象了\",{\"1\":{\"110\":1}}],[\"这样可读性和可维护性更好\",{\"1\":{\"105\":1}}],[\"这样少一些混乱\",{\"1\":{\"88\":1}}],[\"这样清晰的显示函数的开始和结束\",{\"1\":{\"87\":1}}],[\"这样更清晰\",{\"1\":{\"82\":1}}],[\"这样伤害了代码可读性和可维护性\",{\"1\":{\"68\":1}}],[\"无法回溯版本\",{\"1\":{\"536\":1}}],[\"无法对联合类型person进行实现\",{\"1\":{\"533\":1}}],[\"无法避免运行时的错误\",{\"1\":{\"512\":1}}],[\"无法接受\",{\"1\":{\"410\":1}}],[\"无效\",{\"1\":{\"399\":1}}],[\"无需修改原有高层模块\",{\"1\":{\"327\":1}}],[\"无需修改原有的信用卡支付代码\",{\"1\":{\"324\":1}}],[\"无所不能\",{\"1\":{\"326\":1}}],[\"无论用那个测试框架\",{\"1\":{\"220\":1}}],[\"无论你做什么狂野的事\",{\"0\":{\"184\":1}}],[\"无\",{\"1\":{\"34\":1}}],[\"和函数表达式\",{\"1\":{\"502\":1}}],[\"和它们各自\",{\"1\":{\"478\":1}}],[\"和执行\",{\"1\":{\"456\":1}}],[\"和服务整合到一个网站的过程\",{\"1\":{\"385\":1}}],[\"和原生交互界面的库\",{\"1\":{\"378\":1}}],[\"和依赖反转原则\",{\"1\":{\"327\":1}}],[\"和各种逻辑文件\",{\"1\":{\"310\":1}}],[\"和要插入的项\",{\"1\":{\"302\":1}}],[\"和比较操作符\",{\"0\":{\"89\":1}}],[\"和代码难以理解\",{\"1\":{\"36\":1}}],[\"和\",{\"0\":{\"127\":1,\"132\":2,\"136\":1,\"200\":1,\"202\":1,\"400\":1,\"440\":1,\"443\":1,\"478\":1,\"533\":1,\"538\":1},\"1\":{\"34\":1,\"38\":1,\"112\":1,\"121\":1,\"122\":1,\"220\":1,\"259\":1,\"270\":1,\"310\":1,\"328\":1,\"342\":1,\"367\":1,\"395\":1,\"398\":2,\"411\":1,\"415\":1,\"440\":1,\"441\":1,\"470\":1,\"472\":1,\"475\":1,\"478\":5,\"479\":1,\"488\":2,\"493\":1,\"503\":1,\"513\":1,\"516\":1,\"517\":1,\"522\":1,\"523\":1,\"526\":3,\"527\":1,\"533\":1,\"536\":1,\"540\":1,\"541\":2}}],[\"中有\",{\"1\":{\"536\":1}}],[\"中通过\",{\"1\":{\"523\":1}}],[\"中通过大括号使用\",{\"0\":{\"399\":1}}],[\"中更专业的说法\",{\"1\":{\"516\":1}}],[\"中类型问题的最后一个手段\",{\"1\":{\"514\":1}}],[\"中没有\",{\"1\":{\"513\":1}}],[\"中除了表示类型断言之外\",{\"1\":{\"510\":1}}],[\"中表示的是一个\",{\"1\":{\"510\":1}}],[\"中表达你的组件逻辑\",{\"1\":{\"411\":1}}],[\"中必须使用前者\",{\"1\":{\"510\":1}}],[\"中函数参数的默认值\",{\"1\":{\"506\":1}}],[\"中对其进行约束\",{\"1\":{\"502\":1}}],[\"中定义好了的类型\",{\"1\":{\"493\":1}}],[\"中配置\",{\"1\":{\"481\":1,\"482\":1}}],[\"中提取出一个\",{\"1\":{\"460\":1}}],[\"中提取非响应式逻辑\",{\"1\":{\"459\":1}}],[\"中提出\",{\"1\":{\"323\":1}}],[\"中是专有定义\",{\"1\":{\"452\":1}}],[\"中会很方便\",{\"1\":{\"442\":1}}],[\"中可以方便地在树中的任何位置读取它\",{\"1\":{\"442\":1}}],[\"中可以保存任意类型的\",{\"1\":{\"427\":1}}],[\"中打印了所有的\",{\"1\":{\"441\":1}}],[\"中点击了\",{\"1\":{\"441\":1}}],[\"中删除的过程\",{\"1\":{\"429\":1}}],[\"中存放对象时\",{\"1\":{\"427\":1}}],[\"中所有的\",{\"1\":{\"427\":1}}],[\"中所有事件都会传播\",{\"1\":{\"417\":1}}],[\"中最后的\",{\"1\":{\"415\":1}}],[\"中添加\",{\"1\":{\"414\":1}}],[\"中渲染\",{\"1\":{\"405\":1}}],[\"中接收到该内容\",{\"1\":{\"405\":1}}],[\"中传递\",{\"1\":{\"400\":1}}],[\"中传递对象\",{\"1\":{\"400\":1}}],[\"中需要用\",{\"1\":{\"398\":1}}],[\"中间方\",{\"1\":{\"370\":1}}],[\"中间件\",{\"1\":{\"283\":1}}],[\"中获取按钮并从存储中请求颜色值\",{\"1\":{\"317\":1}}],[\"中的三斜线指令来声明模块之间的依赖关系了\",{\"1\":{\"549\":1}}],[\"中的语法类似\",{\"1\":{\"537\":1}}],[\"中的所有属性\",{\"1\":{\"516\":1}}],[\"中的箭头函数\",{\"1\":{\"503\":1}}],[\"中的接口是一个非常灵活的概念\",{\"1\":{\"496\":1}}],[\"中的二进制和八进制表示法\",{\"1\":{\"472\":1}}],[\"中的二进制表示法\",{\"1\":{\"472\":2}}],[\"中的八进制表示法\",{\"1\":{\"472\":2}}],[\"中的新类型\",{\"0\":{\"481\":1,\"482\":1},\"1\":{\"470\":2}}],[\"中的位置\",{\"1\":{\"436\":1}}],[\"中的数组时\",{\"1\":{\"428\":2}}],[\"中的数组\",{\"0\":{\"428\":1}}],[\"中的对象\",{\"0\":{\"427\":1},\"1\":{\"427\":1}}],[\"中的属性也会变成\",{\"1\":{\"398\":1}}],[\"中的\",{\"0\":{\"400\":1},\"1\":{\"275\":1,\"315\":1,\"428\":1,\"503\":2,\"507\":1,\"523\":1,\"526\":1,\"531\":1,\"536\":1}}],[\"中使用this\",{\"1\":{\"274\":1}}],[\"中直接\",{\"0\":{\"102\":1}}],[\"中强制约束函数体的位置\",{\"0\":{\"90\":1}}],[\"中\",{\"1\":{\"34\":1,\"252\":1,\"275\":1,\"317\":1,\"398\":1,\"399\":1,\"421\":1,\"427\":1,\"431\":1,\"450\":1,\"452\":1,\"460\":1,\"479\":1,\"489\":1,\"495\":1,\"502\":1,\"503\":1,\"506\":1,\"507\":1,\"523\":2,\"536\":1,\"541\":1}}],[\"中文称为命名空间\",{\"1\":{\"531\":1}}],[\"中文\",{\"1\":{\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"引用\",{\"1\":{\"525\":1}}],[\"引用值\",{\"0\":{\"445\":1}}],[\"引用了一个名为\",{\"1\":{\"317\":1}}],[\"引用模块\",{\"1\":{\"260\":1}}],[\"引用类型\",{\"1\":{\"34\":1}}],[\"引入用户界面\",{\"0\":{\"317\":1}}],[\"引入require\",{\"1\":{\"250\":1}}],[\"引入使用模块\",{\"1\":{\"246\":1,\"253\":1}}],[\"引入第三方库\",{\"1\":{\"237\":1}}],[\"引入模块\",{\"1\":{\"231\":1}}],[\"引入多个\",{\"0\":{\"226\":1}}],[\"引入的js必须有一定顺序\",{\"1\":{\"224\":1}}],[\"引入依赖模块\",{\"1\":{\"253\":2,\"257\":2}}],[\"引入依赖\",{\"1\":{\"224\":1}}],[\"引擎压缩\",{\"1\":{\"45\":1}}],[\"引擎会为函数添加原型\",{\"1\":{\"34\":1}}],[\"就需要使用到\",{\"1\":{\"541\":1}}],[\"就应该在力所能及的时候给出一些回馈\",{\"1\":{\"536\":1}}],[\"就知道了类型声明是比类型断言更加严格的\",{\"1\":{\"519\":1}}],[\"就能推断出\",{\"1\":{\"486\":1}}],[\"就能返回\",{\"1\":{\"34\":1}}],[\"就意味着\",{\"1\":{\"411\":1}}],[\"就像面向对象编程中我们可以将子类的实例赋值给类型为父类的变量\",{\"1\":{\"516\":1}}],[\"就像它在其它语言中那样\",{\"1\":{\"477\":1}}],[\"就像\",{\"1\":{\"408\":1}}],[\"就像多行数组和对象字面量\",{\"0\":{\"107\":1}}],[\"就直接返回\",{\"1\":{\"354\":1}}],[\"就直接读取缓存结果\",{\"1\":{\"230\":1}}],[\"就不再是全局变量的声明文件了\",{\"1\":{\"550\":1}}],[\"就不能再单个导出\",{\"1\":{\"541\":1}}],[\"就不会有任何问题\",{\"1\":{\"516\":1}}],[\"就不会在这里进行任何渲染\",{\"1\":{\"408\":1}}],[\"就不要使用\",{\"1\":{\"514\":1}}],[\"就不应该再因为新增功能而对其进行修改\",{\"1\":{\"324\":1}}],[\"就不需要写了\",{\"0\":{\"143\":1}}],[\"就会导致类型不完整\",{\"1\":{\"547\":1}}],[\"就会导致\",{\"1\":{\"544\":1}}],[\"就会导致运行时错误了\",{\"1\":{\"512\":1}}],[\"就会报错\",{\"1\":{\"514\":1}}],[\"就会返回true\",{\"1\":{\"309\":1}}],[\"就会出现以上这些问题\",{\"1\":{\"226\":1}}],[\"就会出现一些古怪的行为\",{\"1\":{\"179\":1}}],[\"就必须使用一个排序函数\",{\"1\":{\"298\":1}}],[\"就比如下面这种写法\",{\"1\":{\"276\":1}}],[\"就绑定到\",{\"1\":{\"275\":1}}],[\"就绑定谁\",{\"1\":{\"275\":1}}],[\"就要用到export\",{\"1\":{\"260\":1}}],[\"就把这个库当作参数传入\",{\"1\":{\"224\":1}}],[\"就显式的用它\",{\"1\":{\"216\":1}}],[\"就写在箭头后面\",{\"0\":{\"90\":1}}],[\"就保持一个风格\",{\"1\":{\"88\":1}}],[\"就删除圆括号\",{\"0\":{\"88\":1}}],[\"就是不能够精确的表达\",{\"1\":{\"508\":1}}],[\"就是不要改参数的数据结构\",{\"1\":{\"80\":1}}],[\"就是策略模式准备了一组算法\",{\"1\":{\"374\":1}}],[\"就是通过类的抽象使得业务适用于一个产品类簇的创建\",{\"1\":{\"349\":1}}],[\"就是一个对象可以被其他对象继承\",{\"1\":{\"350\":1}}],[\"就是一个对象\",{\"1\":{\"272\":1}}],[\"就是\",{\"0\":{\"101\":1}}],[\"就是对象的类型\",{\"1\":{\"34\":1}}],[\"就变成undefined了\",{\"1\":{\"55\":1}}],[\"对应的导入和使用模块应该是这样\",{\"1\":{\"537\":1}}],[\"对应环境类`calculatebonuscontext\",{\"1\":{\"375\":1}}],[\"对等号左侧进行类型限制\",{\"1\":{\"504\":1}}],[\"对组件外部有影响的操作\",{\"1\":{\"441\":1}}],[\"对比\",{\"0\":{\"440\":1}}],[\"对变量的命名有限制\",{\"1\":{\"398\":1}}],[\"对回调函数进行包装\",{\"1\":{\"338\":1}}],[\"对扩展开放\",{\"1\":{\"324\":1}}],[\"对修改封闭\",{\"1\":{\"324\":2}}],[\"对数组中的每一项运行给定函数\",{\"1\":{\"305\":1,\"306\":1}}],[\"对数组进行遍历循环\",{\"1\":{\"305\":1}}],[\"对其他文件不可见\",{\"1\":{\"229\":1}}],[\"对\",{\"0\":{\"62\":1,\"435\":1}}],[\"对象成员和数组字面量和返回值语句\",{\"1\":{\"486\":1}}],[\"对象的形状\",{\"1\":{\"496\":1}}],[\"对象的类型\",{\"0\":{\"495\":1}}],[\"对象的展开语法是浅层的\",{\"1\":{\"427\":1}}],[\"对象的方法\",{\"1\":{\"42\":1}}],[\"对象展开语法来创建对象的拷贝\",{\"1\":{\"427\":1}}],[\"对象也用大括号表示\",{\"1\":{\"400\":1}}],[\"对象中的键值对\",{\"1\":{\"398\":1}}],[\"对象中引用了函数\",{\"1\":{\"275\":1}}],[\"对象会委托给对应状态的对象来处理行为\",{\"1\":{\"331\":1}}],[\"对象会计算成true\",{\"1\":{\"133\":1}}],[\"对象看起来似乎修改了它的类\",{\"1\":{\"331\":1}}],[\"对象里面\",{\"1\":{\"275\":1}}],[\"对象上去即可\",{\"1\":{\"276\":1}}],[\"对象上\",{\"1\":{\"274\":1,\"275\":1,\"276\":1}}],[\"对象计算属性\",{\"1\":{\"213\":1}}],[\"对象简写\",{\"1\":{\"213\":1}}],[\"对象缩写\",{\"1\":{\"213\":1}}],[\"对象浅拷贝时\",{\"0\":{\"47\":1}}],[\"对象\",{\"0\":{\"73\":1,\"195\":1,\"400\":1},\"1\":{\"34\":1,\"125\":1,\"275\":2,\"276\":1,\"396\":1,\"428\":1,\"441\":1,\"471\":1,\"522\":1,\"533\":1,\"536\":1}}],[\"对于一个\",{\"1\":{\"545\":1}}],[\"对于这种使用\",{\"1\":{\"541\":1}}],[\"对于这种情况\",{\"1\":{\"438\":1}}],[\"对于这些类型的处理\",{\"1\":{\"34\":1}}],[\"对于拥有许多状态更新逻辑的组件来说\",{\"1\":{\"438\":1}}],[\"对于每个独特的状态\",{\"1\":{\"434\":1}}],[\"对于我们提供的每种颜色\",{\"1\":{\"319\":1}}],[\"对于所有的\",{\"1\":{\"197\":1}}],[\"对于上面\",{\"1\":{\"167\":1}}],[\"对于\",{\"1\":{\"34\":1}}],[\"其原本是想当\",{\"1\":{\"408\":1}}],[\"其丰富的插件生态系统和\",{\"1\":{\"385\":1}}],[\"其它很多模式有很多也是基于prototype的\",{\"1\":{\"358\":1}}],[\"其实前四种情况都是最后一个的特例\",{\"1\":{\"516\":1}}],[\"其实就是一个函数\",{\"1\":{\"528\":1}}],[\"其实就是指二十年前\",{\"1\":{\"328\":1}}],[\"其实就是obj\",{\"1\":{\"275\":1}}],[\"其实我们的\",{\"1\":{\"276\":1}}],[\"其实思路也比较简单\",{\"1\":{\"276\":1}}],[\"其实不管引用链多长\",{\"1\":{\"275\":1}}],[\"其实是加载该模块的module\",{\"1\":{\"231\":1}}],[\"其实没啥语法上的讲究\",{\"1\":{\"88\":1}}],[\"其他的变量需要先定义出来\",{\"1\":{\"540\":1}}],[\"其他所有\",{\"1\":{\"523\":1}}],[\"其他模块加载该模块时\",{\"1\":{\"260\":1}}],[\"其他\",{\"1\":{\"133\":2}}],[\"其他都返回\",{\"1\":{\"34\":1}}],[\"其中函数声明的类型定义较简单\",{\"1\":{\"502\":1}}],[\"其中事件处理函数为自定义函数\",{\"1\":{\"414\":1}}],[\"其中带\",{\"1\":{\"328\":1}}],[\"其中显示一个显示默认颜色的按钮\",{\"1\":{\"317\":1}}],[\"其中我们将~\",{\"1\":{\"285\":1}}],[\"其中隐式绑定我们通常是以\",{\"1\":{\"276\":1}}],[\"其中\",{\"1\":{\"34\":1,\"303\":1,\"304\":1,\"472\":1,\"493\":1,\"530\":1}}],[\"其格式为\",{\"1\":{\"34\":1}}],[\"是错误的语法\",{\"1\":{\"540\":1}}],[\"是什么意思呢\",{\"1\":{\"533\":1}}],[\"是什么东西\",{\"1\":{\"523\":1}}],[\"是由第三方库定义好的全局变量\",{\"1\":{\"530\":1}}],[\"是最为推荐的\",{\"1\":{\"536\":1}}],[\"是最简单的\",{\"1\":{\"527\":1}}],[\"是最优的一个解决方案\",{\"1\":{\"520\":1}}],[\"是因为既然子类拥有父类的属性和方法\",{\"1\":{\"516\":1}}],[\"是因为\",{\"1\":{\"516\":1}}],[\"是等价的\",{\"1\":{\"516\":1}}],[\"是结构类型系统\",{\"1\":{\"516\":1}}],[\"是通过赋值操作进行类型推论而推断出来的\",{\"1\":{\"503\":1}}],[\"是不允许出现\",{\"1\":{\"550\":1}}],[\"是不允许的\",{\"1\":{\"505\":1}}],[\"是不是任何一个类型都可以被断言为任何另一个类型呢\",{\"1\":{\"516\":1}}],[\"是不是就和我们下面这段代码的效果一样\",{\"1\":{\"276\":1}}],[\"是不被允许的\",{\"1\":{\"502\":1}}],[\"是所有类型的子类型\",{\"1\":{\"478\":1}}],[\"是添加了类型系统的\",{\"1\":{\"467\":1}}],[\"是从父组件传递的\",{\"1\":{\"454\":1}}],[\"是相似的\",{\"1\":{\"441\":1}}],[\"是屏幕上组件实例内部的状态\",{\"1\":{\"423\":1}}],[\"是隔离且私有的\",{\"0\":{\"423\":1}}],[\"是函数\",{\"1\":{\"422\":1}}],[\"是函数级作用域\",{\"1\":{\"37\":1}}],[\"是只读的时间快照\",{\"1\":{\"406\":1}}],[\"是预定义的\",{\"1\":{\"402\":1}}],[\"是有效的\",{\"1\":{\"399\":1}}],[\"是一种脱围机制\",{\"1\":{\"448\":1}}],[\"是一种行为设计模式\",{\"1\":{\"331\":1,\"336\":1}}],[\"是一个全局变量\",{\"1\":{\"531\":1}}],[\"是一个全栈式的\",{\"1\":{\"383\":1}}],[\"是一个数组\",{\"1\":{\"507\":1}}],[\"是一个很重要的概念\",{\"1\":{\"496\":1}}],[\"是一个字符串字面量类型\",{\"1\":{\"490\":1}}],[\"是一个不依赖于组件的纯函数\",{\"1\":{\"440\":1}}],[\"是一个保留字\",{\"1\":{\"398\":1}}],[\"是一个\",{\"1\":{\"386\":1,\"513\":1}}],[\"是一个快速的支持\",{\"1\":{\"385\":1}}],[\"是一个具有嵌套路由的全栈式\",{\"1\":{\"384\":1}}],[\"是确保软件模块间松耦合\",{\"1\":{\"325\":1}}],[\"是面向对象设计的五大原则之一\",{\"1\":{\"325\":1}}],[\"是否是它的实例\",{\"1\":{\"513\":1}}],[\"是否启用暗黑模式\",{\"1\":{\"283\":1}}],[\"是否为\",{\"1\":{\"34\":1}}],[\"是在函数被调用时发生的绑定\",{\"1\":{\"272\":1}}],[\"是对外的接口\",{\"1\":{\"231\":1}}],[\"是对象\",{\"1\":{\"133\":1}}],[\"是你的性能瓶颈导致你一定要用移位运算\",{\"0\":{\"184\":1}}],[\"是同一概念关键字\",{\"1\":{\"112\":1}}],[\"是动态属性名\",{\"1\":{\"41\":1}}],[\"是块级作用域\",{\"1\":{\"37\":1}}],[\"是用来判断\",{\"1\":{\"34\":1}}],[\"是原型\",{\"1\":{\"34\":1}}],[\"是\",{\"1\":{\"34\":2,\"197\":1,\"274\":1,\"275\":1,\"342\":1,\"393\":1,\"472\":1,\"493\":1,\"519\":1,\"523\":1,\"531\":1}}],[\"是全局对象\",{\"1\":{\"34\":1}}],[\"的格式添加了对\",{\"1\":{\"550\":1}}],[\"的例子中\",{\"1\":{\"548\":1}}],[\"的语法与普通的\",{\"1\":{\"537\":1}}],[\"的语法在\",{\"1\":{\"510\":1}}],[\"的声明文件放到\",{\"1\":{\"536\":1}}],[\"的使用了\",{\"1\":{\"531\":1}}],[\"的使用场景\",{\"1\":{\"442\":1}}],[\"的模块化方案了\",{\"1\":{\"531\":1}}],[\"的广泛应用\",{\"1\":{\"531\":1,\"549\":1}}],[\"的元素\",{\"1\":{\"523\":1}}],[\"的父类\",{\"1\":{\"519\":1}}],[\"的限制\",{\"1\":{\"517\":1}}],[\"的限制了\",{\"1\":{\"506\":1}}],[\"的访问时就有了代码补全\",{\"1\":{\"515\":1}}],[\"的设计理念之一\",{\"1\":{\"514\":1}}],[\"的类\",{\"1\":{\"513\":1}}],[\"的类型定义了\",{\"1\":{\"523\":1}}],[\"的类型定义中\",{\"1\":{\"503\":1}}],[\"的类型系统运转良好\",{\"1\":{\"514\":1}}],[\"的类型被推断成了\",{\"1\":{\"499\":1}}],[\"的类型是\",{\"1\":{\"487\":1}}],[\"的类型\",{\"1\":{\"485\":1,\"514\":1,\"515\":1,\"523\":1}}],[\"的情况\",{\"1\":{\"512\":1}}],[\"的函数类型\",{\"1\":{\"508\":1}}],[\"的定义\",{\"1\":{\"503\":1}}],[\"的定义是\",{\"0\":{\"72\":1}}],[\"的子属性\",{\"1\":{\"499\":1}}],[\"的形状必须和接口\",{\"1\":{\"497\":1}}],[\"的形式调用函数\",{\"1\":{\"276\":1}}],[\"的共有属性是没问题的\",{\"1\":{\"488\":1}}],[\"的共有属性\",{\"1\":{\"488\":1}}],[\"的含义是\",{\"1\":{\"487\":1}}],[\"的概念\",{\"1\":{\"479\":1}}],[\"的区别是\",{\"1\":{\"478\":1,\"549\":1}}],[\"的命令行工具安装方法如下\",{\"1\":{\"468\":1}}],[\"的不同部分因不同原因需要重新运行\",{\"1\":{\"460\":1}}],[\"的局限性在于你如何使用他们\",{\"1\":{\"459\":1}}],[\"的生命周期\",{\"0\":{\"458\":1}}],[\"的标识\",{\"1\":{\"454\":1}}],[\"的标签\",{\"1\":{\"393\":1}}],[\"的第二个参数\",{\"1\":{\"454\":1}}],[\"的副作用\",{\"1\":{\"452\":1}}],[\"的渲染必须是纯粹操作\",{\"1\":{\"452\":1}}],[\"的当前值\",{\"1\":{\"445\":1}}],[\"的可读性还行\",{\"1\":{\"440\":1}}],[\"的原则\",{\"0\":{\"431\":1}}],[\"的原型指向\",{\"1\":{\"34\":1}}],[\"的原型方法\",{\"1\":{\"34\":1}}],[\"的值却是\",{\"1\":{\"499\":1}}],[\"的值与上次渲染不一致时执行\",{\"1\":{\"454\":1}}],[\"的值\",{\"0\":{\"425\":1},\"1\":{\"427\":1}}],[\"的值为\",{\"1\":{\"75\":1}}],[\"的最顶层调用\",{\"1\":{\"422\":1}}],[\"的最后一步是为按钮添加颜色\",{\"1\":{\"317\":1}}],[\"的存在只对\",{\"1\":{\"410\":1}}],[\"的一部分包裹到具有不同账户数据的\",{\"1\":{\"442\":1}}],[\"的一部分\",{\"1\":{\"410\":1}}],[\"的一个属性\",{\"1\":{\"34\":1}}],[\"的时候会报错\",{\"1\":{\"512\":1}}],[\"的时候\",{\"1\":{\"508\":2,\"531\":1,\"534\":1,\"536\":1}}],[\"的时候不进行渲染\",{\"1\":{\"408\":1}}],[\"的时候就用箭头表达式吧\",{\"0\":{\"85\":1}}],[\"的内联\",{\"1\":{\"400\":1}}],[\"的大括号内来编写\",{\"1\":{\"399\":1}}],[\"的简洁性\",{\"1\":{\"393\":1}}],[\"的应用\",{\"1\":{\"386\":1}}],[\"的网站的\",{\"1\":{\"385\":1}}],[\"的对象\",{\"1\":{\"357\":1}}],[\"的消息`\",{\"1\":{\"337\":1}}],[\"的状态紧密相关\",{\"1\":{\"332\":1}}],[\"的关键\",{\"1\":{\"327\":1}}],[\"的接口\",{\"1\":{\"326\":1,\"513\":1}}],[\"的重要手段\",{\"1\":{\"325\":1}}],[\"的文件\",{\"1\":{\"319\":1}}],[\"的文件并将其添加到扩展的目录中\",{\"1\":{\"317\":2}}],[\"的文件并添加以下代码\",{\"1\":{\"314\":1}}],[\"的文件并包含以下代码\",{\"1\":{\"311\":1}}],[\"的目录中创建一个文件并包含以下代码\",{\"1\":{\"319\":1}}],[\"的外部\",{\"1\":{\"317\":1}}],[\"的配置文件位置\",{\"1\":{\"282\":1}}],[\"的操作中就有\",{\"1\":{\"277\":1}}],[\"的过程还需要大家自行下来好好学学\",{\"1\":{\"277\":1}}],[\"的方式获取函数中的剩余参数\",{\"1\":{\"507\":1}}],[\"的方式\",{\"1\":{\"275\":1}}],[\"的方式调用了该函数\",{\"1\":{\"275\":1}}],[\"的\",{\"1\":{\"275\":1,\"276\":1,\"318\":1,\"350\":1,\"391\":1,\"405\":2,\"426\":1,\"431\":1,\"441\":2,\"510\":1,\"538\":1}}],[\"的绑定\",{\"1\":{\"277\":1}}],[\"的绑定都由最顶层调用位置确定\",{\"1\":{\"275\":1}}],[\"的绑定规则称为隐式绑定规则\",{\"1\":{\"275\":1}}],[\"的绑定与函数调用位置无关\",{\"1\":{\"274\":1}}],[\"的绑定就是默认绑定规则\",{\"1\":{\"274\":1}}],[\"的变量都返回\",{\"1\":{\"216\":1}}],[\"的圆括号前空一格\",{\"0\":{\"157\":1}}],[\"的迷惑中\",{\"1\":{\"139\":1}}],[\"的实例\",{\"1\":{\"34\":2}}],[\"的引用\",{\"1\":{\"34\":1}}],[\"的选择\",{\"1\":{\"16\":3}}],[\"而插件模块没有类型声明文件\",{\"1\":{\"547\":1}}],[\"而推荐使用\",{\"1\":{\"531\":1}}],[\"而当我们使用\",{\"1\":{\"527\":1}}],[\"而真正书写一个声明文件并不是一件简单的事\",{\"1\":{\"525\":1}}],[\"而在前一个例子中\",{\"1\":{\"519\":1}}],[\"而实际上\",{\"1\":{\"516\":1}}],[\"而只会在当前文件中声明一个局部变量\",{\"1\":{\"537\":1}}],[\"而只会看它们最终的结构有什么关系\",{\"1\":{\"516\":1}}],[\"而只是一个\",{\"1\":{\"513\":1}}],[\"而会忽略它们定义时的关系\",{\"1\":{\"516\":1}}],[\"而有时候\",{\"1\":{\"512\":1}}],[\"而等号左边的\",{\"1\":{\"503\":1}}],[\"而具体如何行动需要由类\",{\"1\":{\"496\":1}}],[\"而应该用接口\",{\"1\":{\"493\":1}}],[\"而应该依赖于一个数据库访问的接口\",{\"1\":{\"327\":1}}],[\"而第四行的\",{\"1\":{\"488\":1}}],[\"而更改\",{\"1\":{\"445\":1}}],[\"而无需通过\",{\"1\":{\"442\":1}}],[\"而无需改动业务逻辑层\",{\"1\":{\"327\":1}}],[\"而使用\",{\"1\":{\"440\":1}}],[\"而首选右列的方法\",{\"1\":{\"428\":1}}],[\"而要为它创建一个\",{\"1\":{\"427\":1}}],[\"而非调用\",{\"1\":{\"415\":1}}],[\"而非加强功能\",{\"1\":{\"370\":1}}],[\"而叶子组件通常会频繁重新渲染\",{\"1\":{\"412\":1}}],[\"而是把这个职责委托给了某个策略对象\",{\"1\":{\"375\":1}}],[\"而是分布在各个策略对象中\",{\"1\":{\"375\":1}}],[\"而是通过依赖注入等方式来实现\",{\"1\":{\"327\":1}}],[\"而是具体实现应该依赖于抽象\",{\"1\":{\"327\":1}}],[\"而是一个iife\",{\"1\":{\"70\":1}}],[\"而这些方案基本都有受\",{\"1\":{\"391\":1}}],[\"而这些算法通常不包含上下文的状态\",{\"1\":{\"332\":1}}],[\"而这些问题可以通过模块化规范来解决\",{\"1\":{\"226\":1}}],[\"而这个变量依赖之前分配过的变量的时候\",{\"1\":{\"120\":1}}],[\"而字符串和数字要明确比较对象\",{\"0\":{\"134\":1}}],[\"而且产生的结果也几乎是一样的\",{\"1\":{\"519\":1}}],[\"而且必须是2或3\",{\"1\":{\"320\":1}}],[\"而且实现得相当简单\",{\"1\":{\"270\":1}}],[\"而且可以并行加载多个模块\",{\"1\":{\"270\":1}}],[\"而且模块成员之间看不出直接关系\",{\"1\":{\"224\":1}}],[\"而且箭头函数是更简洁的语法\",{\"1\":{\"85\":1}}],[\"而且你不能轻易地用apply来组成new\",{\"1\":{\"82\":1}}],[\"而且在你添加\",{\"1\":{\"79\":1}}],[\"而且rest参数是真数组\",{\"1\":{\"74\":1}}],[\"而iife我们首先看到的是左边的\",{\"1\":{\"70\":1}}],[\"而不要改变预先存在的对象\",{\"1\":{\"411\":1}}],[\"而不会在\",{\"1\":{\"395\":1}}],[\"而不负责某一类产品的实例\",{\"1\":{\"349\":1}}],[\"而不影响程序的正确性\",{\"1\":{\"325\":1}}],[\"而不需要修改现有的\",{\"1\":{\"324\":1}}],[\"而不是使用\",{\"1\":{\"531\":1}}],[\"而不是具体的值\",{\"1\":{\"530\":1}}],[\"而不是具体实现\",{\"1\":{\"327\":1}}],[\"而不是第一次给只读属性赋值的时候\",{\"1\":{\"500\":1}}],[\"而不是在每次渲染后都执行\",{\"1\":{\"453\":1}}],[\"而不是在\",{\"1\":{\"436\":1}}],[\"而不是仅仅替换它的方法\",{\"1\":{\"426\":1}}],[\"而不是像\",{\"1\":{\"426\":1}}],[\"而不是不进行渲染\",{\"1\":{\"408\":1}}],[\"而不是原型链的一部分\",{\"1\":{\"350\":1}}],[\"而不是依赖于抽象\",{\"1\":{\"327\":1}}],[\"而不是创建一个包含所有可能方法的大接口\",{\"1\":{\"326\":1}}],[\"而不是显式的类型检查\",{\"1\":{\"325\":1}}],[\"而不是自动将不需要的代码插入网页\",{\"1\":{\"318\":1}}],[\"而不是一个全局变量的声明文件\",{\"1\":{\"546\":1}}],[\"而不是一个新的语句\",{\"0\":{\"160\":1}}],[\"而不是一下跳过所有声明\",{\"1\":{\"119\":1}}],[\"而不是类似数组的arguments\",{\"1\":{\"74\":1}}],[\"而不是数组解构\",{\"0\":{\"60\":1}}],[\"而不是\",{\"0\":{\"37\":1,\"47\":1,\"54\":1,\"132\":1},\"1\":{\"456\":1,\"527\":1,\"540\":1}}],[\"而不能判断一个对象实例具体属于哪种类型\",{\"1\":{\"34\":1}}],[\"而对于其他对象\",{\"1\":{\"34\":1}}],[\"而\",{\"1\":{\"34\":1,\"37\":1,\"263\":1,\"398\":1,\"440\":1,\"512\":1}}],[\"返回值的约束\",{\"1\":{\"520\":1}}],[\"返回值为\",{\"1\":{\"518\":3}}],[\"返回值类型不变\",{\"1\":{\"504\":1}}],[\"返回never的函数必须存在无法达到的终点\",{\"1\":{\"480\":2}}],[\"返回的\",{\"1\":{\"481\":1}}],[\"返回的是一个\",{\"1\":{\"471\":1}}],[\"返回的特定状态会很有帮助\",{\"1\":{\"440\":1}}],[\"返回false\",{\"1\":{\"409\":1}}],[\"返回实例\",{\"1\":{\"354\":1}}],[\"返回满足过滤条件组成的数组\",{\"1\":{\"307\":1,\"308\":1}}],[\"返回每次函数调用的结果组成的数组\",{\"1\":{\"306\":1}}],[\"返回从原数组中指定开始下标到结束下标之间的项组成的新数组\",{\"1\":{\"301\":1}}],[\"返回移除的那个值\",{\"1\":{\"295\":1}}],[\"返回\",{\"0\":{\"143\":1},\"1\":{\"34\":2}}],[\"复杂类型赋值是获取到他的引用的值\",{\"0\":{\"33\":1}}],[\"复杂类型\",{\"0\":{\"33\":1}}],[\"复制到活动终端\",{\"1\":{\"22\":1}}],[\"复制活动文件的路径\",{\"1\":{\"19\":1}}],[\"复制\",{\"1\":{\"13\":1}}],[\"9527\",{\"1\":{\"500\":1}}],[\"9007199254740991\",{\"1\":{\"482\":1}}],[\"99\",{\"1\":{\"260\":1}}],[\"9不要在代码之间使用多个空白行填充\",{\"0\":{\"163\":1}}],[\"9\",{\"0\":{\"77\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"108\":1,\"196\":1},\"1\":{\"32\":2,\"33\":3,\"182\":1,\"300\":2,\"301\":4,\"302\":4,\"306\":1,\"307\":2,\"498\":1,\"513\":1}}],[\"风格指南\",{\"0\":{\"30\":1}}],[\"站点导航\",{\"0\":{\"28\":1}}],[\"学习路线图\",{\"0\":{\"27\":1}}],[\"更名为命名空间\",{\"1\":{\"531\":1}}],[\"更加合适\",{\"1\":{\"513\":1}}],[\"更加合理\",{\"1\":{\"441\":1}}],[\"更细粒度的接口可以更好地适应不同场景\",{\"1\":{\"326\":1}}],[\"更具体的接口\",{\"1\":{\"326\":1}}],[\"更新起来不是很方便\",{\"1\":{\"431\":1}}],[\"更新阶段\",{\"1\":{\"429\":1}}],[\"更新为此对象\",{\"1\":{\"427\":1}}],[\"更新\",{\"0\":{\"427\":1,\"428\":1},\"1\":{\"450\":1,\"458\":1}}],[\"更新变量并触发\",{\"1\":{\"422\":1}}],[\"更新后的代码向按钮添加了一个单击事件侦听器\",{\"1\":{\"318\":1}}],[\"更新清单manifest\",{\"1\":{\"317\":1}}],[\"更高复用性\",{\"1\":{\"225\":1}}],[\"更好的分离\",{\"1\":{\"225\":1}}],[\"更好\",{\"0\":{\"47\":1,\"105\":1}}],[\"更推荐使用扩展运算符\",{\"0\":{\"47\":1}}],[\"更多是不同团队有不同的最佳实践以及设计原则\",{\"1\":{\"391\":1}}],[\"更多信息请见angus\",{\"0\":{\"135\":1}}],[\"更多\",{\"0\":{\"25\":1},\"2\":{\"26\":1}}],[\"更改文件语言\",{\"1\":{\"17\":1}}],[\"`hello\",{\"1\":{\"473\":1}}],[\"`how\",{\"1\":{\"64\":2}}],[\"`正在播放\",{\"1\":{\"416\":1}}],[\"`playing\",{\"1\":{\"367\":4}}],[\"`i\",{\"1\":{\"346\":1}}],[\"`bar\",{\"1\":{\"224\":3}}],[\"`foo\",{\"1\":{\"224\":3}}],[\"`translate\",{\"1\":{\"160\":2}}],[\"`color\",{\"1\":{\"314\":1}}],[\"`const`\",{\"1\":{\"122\":1}}],[\"`capt\",{\"1\":{\"62\":1}}],[\"`jedi\",{\"1\":{\"95\":1}}],[\"`my\",{\"1\":{\"66\":1,\"529\":1}}],[\"`$\",{\"1\":{\"58\":3,\"337\":1,\"346\":2}}],[\"`original`\",{\"1\":{\"47\":1}}],[\"`a\",{\"1\":{\"41\":1,\"86\":3,\"88\":1}}],[\"`\",{\"1\":{\"22\":2,\"41\":1,\"58\":3,\"64\":2,\"66\":1,\"86\":3,\"88\":1,\"95\":1,\"160\":2,\"224\":6,\"314\":1,\"319\":2,\"346\":3,\"416\":1,\"456\":1,\"473\":1,\"529\":1}}],[\"底部\",{\"1\":{\"22\":1}}],[\"向地址栏注册一个关键字以提供搜索建议\",{\"1\":{\"320\":1}}],[\"向外暴露\",{\"1\":{\"257\":1}}],[\"向这个事件装载更多的数据时不用去找或者更新每个处理器\",{\"0\":{\"204\":1}}],[\"向下滚动页面\",{\"1\":{\"22\":1}}],[\"向下滚动\",{\"1\":{\"22\":1}}],[\"向上\",{\"1\":{\"13\":2,\"22\":2}}],[\"粘贴到活动终端\",{\"1\":{\"22\":1}}],[\"跨步\",{\"1\":{\"21\":1}}],[\"步入\",{\"1\":{\"21\":1}}],[\"停止应用程序\",{\"1\":{\"286\":1}}],[\"停止\",{\"1\":{\"21\":1}}],[\"侧边打开\",{\"1\":{\"20\":1}}],[\"批量文件替换\",{\"1\":{\"20\":1}}],[\"===\",{\"0\":{\"132\":1},\"1\":{\"55\":4,\"75\":1,\"86\":1,\"110\":3,\"121\":4,\"134\":1,\"139\":2,\"145\":14,\"305\":1,\"307\":1,\"319\":1,\"337\":1,\"350\":3,\"354\":5,\"476\":8,\"508\":4,\"512\":2,\"513\":2}}],[\"==\",{\"0\":{\"132\":2},\"1\":{\"34\":9,\"134\":1,\"319\":1,\"338\":1,\"346\":2,\"354\":1,\"359\":2,\"371\":1,\"504\":1}}],[\"=>\",{\"1\":{\"32\":1,\"33\":1,\"34\":35,\"47\":3,\"55\":6,\"72\":1,\"85\":1,\"86\":6,\"87\":2,\"88\":5,\"89\":4,\"90\":5,\"94\":2,\"110\":4,\"123\":1,\"127\":5,\"128\":2,\"129\":5,\"130\":1,\"167\":4,\"179\":1,\"182\":1,\"185\":3,\"192\":1,\"204\":2,\"268\":1,\"314\":1,\"317\":1,\"318\":2,\"319\":1,\"337\":2,\"338\":2,\"375\":1,\"410\":3,\"415\":1,\"416\":1,\"418\":4,\"419\":3,\"420\":1,\"425\":1,\"426\":5,\"448\":1,\"449\":1,\"453\":1,\"454\":6,\"455\":2,\"459\":1,\"503\":5,\"516\":1,\"523\":2,\"527\":2,\"528\":1,\"533\":1}}],[\"=\",{\"0\":{\"124\":1,\"132\":1,\"541\":1},\"1\":{\"20\":1,\"32\":3,\"33\":3,\"36\":4,\"37\":2,\"38\":2,\"40\":2,\"41\":3,\"42\":2,\"43\":3,\"44\":4,\"45\":2,\"46\":1,\"47\":7,\"49\":2,\"50\":2,\"51\":5,\"52\":3,\"53\":3,\"54\":2,\"55\":7,\"56\":6,\"58\":3,\"59\":4,\"60\":2,\"62\":3,\"63\":3,\"66\":3,\"68\":3,\"69\":1,\"70\":2,\"72\":1,\"74\":1,\"75\":3,\"76\":2,\"77\":2,\"78\":2,\"79\":5,\"80\":2,\"81\":4,\"82\":2,\"85\":2,\"86\":7,\"88\":2,\"89\":5,\"92\":7,\"93\":2,\"94\":8,\"95\":2,\"96\":1,\"100\":2,\"104\":2,\"110\":8,\"112\":5,\"114\":3,\"115\":2,\"116\":2,\"118\":2,\"119\":9,\"120\":6,\"121\":2,\"122\":9,\"123\":12,\"124\":5,\"125\":8,\"127\":3,\"128\":1,\"129\":2,\"136\":4,\"137\":5,\"138\":6,\"139\":5,\"149\":5,\"150\":2,\"152\":1,\"153\":1,\"158\":1,\"160\":3,\"161\":4,\"163\":10,\"165\":2,\"166\":2,\"167\":2,\"168\":2,\"169\":6,\"170\":2,\"172\":3,\"174\":4,\"176\":4,\"177\":6,\"179\":3,\"182\":5,\"183\":7,\"184\":1,\"186\":4,\"189\":3,\"190\":4,\"191\":4,\"192\":2,\"195\":1,\"196\":4,\"197\":7,\"202\":3,\"206\":3,\"207\":1,\"224\":7,\"231\":7,\"232\":4,\"237\":8,\"250\":2,\"251\":1,\"253\":6,\"257\":9,\"260\":3,\"263\":1,\"274\":2,\"275\":3,\"276\":8,\"277\":2,\"293\":1,\"294\":2,\"295\":1,\"296\":2,\"297\":1,\"298\":2,\"299\":1,\"300\":2,\"301\":5,\"302\":4,\"303\":1,\"304\":1,\"305\":1,\"306\":2,\"307\":2,\"308\":3,\"309\":3,\"314\":1,\"317\":2,\"318\":2,\"319\":9,\"333\":11,\"337\":6,\"338\":6,\"346\":36,\"350\":19,\"354\":19,\"358\":10,\"359\":8,\"363\":8,\"367\":13,\"371\":7,\"375\":2,\"380\":2,\"399\":3,\"402\":1,\"403\":1,\"410\":3,\"422\":1,\"425\":4,\"426\":4,\"428\":1,\"442\":2,\"445\":1,\"448\":1,\"449\":1,\"454\":2,\"455\":1,\"456\":1,\"459\":1,\"471\":4,\"472\":12,\"473\":6,\"474\":2,\"475\":4,\"476\":15,\"477\":5,\"478\":4,\"479\":1,\"481\":1,\"482\":1,\"484\":6,\"485\":3,\"486\":2,\"487\":3,\"488\":2,\"490\":3,\"491\":1,\"492\":1,\"493\":3,\"494\":1,\"497\":2,\"498\":3,\"499\":3,\"500\":4,\"502\":1,\"503\":2,\"504\":1,\"505\":4,\"506\":6,\"507\":2,\"512\":1,\"513\":4,\"514\":4,\"515\":1,\"516\":2,\"519\":8,\"520\":2,\"522\":1,\"527\":3,\"529\":1,\"530\":2,\"531\":1,\"532\":2,\"533\":10,\"534\":1,\"536\":1,\"537\":4,\"541\":14,\"543\":1}}],[\"垂直\",{\"1\":{\"20\":1}}],[\"水平\",{\"1\":{\"20\":1}}],[\"vs\",{\"0\":{\"518\":1,\"519\":1,\"520\":1}}],[\"vscode快捷键\",{\"0\":{\"10\":1}}],[\"vlissides\",{\"1\":{\"328\":1}}],[\"vite\",{\"1\":{\"462\":1,\"463\":2}}],[\"videoplayer\",{\"1\":{\"454\":2}}],[\"videophone<\",{\"1\":{\"400\":1}}],[\"viplevel\",{\"1\":{\"375\":2}}],[\"views\",{\"1\":{\"316\":1}}],[\"visibility\",{\"1\":{\"20\":1}}],[\"vue\",{\"1\":{\"291\":1}}],[\"void类型\",{\"0\":{\"479\":1},\"1\":{\"470\":1}}],[\"void\",{\"1\":{\"75\":1,\"478\":3,\"479\":5,\"508\":2,\"512\":8,\"515\":1,\"516\":3,\"517\":2,\"519\":4,\"520\":2,\"531\":3,\"532\":3,\"533\":8,\"534\":1,\"535\":1}}],[\"verdaccio在启动时会自动寻找\",{\"1\":{\"285\":1}}],[\"verdaccio这个文件夹挂载到docker的\",{\"1\":{\"285\":1}}],[\"verdaccio添加读写权限\",{\"1\":{\"285\":1}}],[\"verdaccio目录挂载到docker的\",{\"1\":{\"285\":1}}],[\"verdaccio目录\",{\"1\":{\"285\":1}}],[\"verdaccio提供了docker和全局包2种方式进行安装\",{\"1\":{\"284\":1}}],[\"verdaccio\",{\"0\":{\"279\":1},\"1\":{\"281\":1,\"282\":9,\"283\":2,\"285\":17,\"286\":2,\"287\":3,\"291\":1}}],[\"version\",{\"1\":{\"235\":1,\"240\":1,\"265\":1,\"311\":2,\"312\":2,\"315\":2,\"317\":6,\"320\":2,\"531\":2}}],[\"very\",{\"1\":{\"47\":1,\"112\":2}}],[\"vertical\",{\"1\":{\"20\":1}}],[\"vanillalattestate\",{\"1\":{\"333\":1}}],[\"vanillalatte\",{\"1\":{\"333\":1}}],[\"val\",{\"1\":{\"86\":2,\"183\":6,\"184\":1,\"202\":2}}],[\"value=\",{\"1\":{\"442\":2}}],[\"value或exports\",{\"1\":{\"231\":1}}],[\"valueof\",{\"1\":{\"182\":1}}],[\"value2\",{\"1\":{\"137\":3}}],[\"value1\",{\"1\":{\"137\":3}}],[\"values\",{\"1\":{\"110\":1}}],[\"value\",{\"1\":{\"42\":8,\"92\":4,\"123\":3,\"133\":1,\"197\":2,\"200\":2,\"231\":3,\"253\":3,\"354\":4,\"359\":4,\"371\":2,\"513\":1}}],[\"var声明会被提前到他的作用域的最前面\",{\"0\":{\"127\":1}}],[\"variables\",{\"0\":{\"117\":1},\"1\":{\"197\":1}}],[\"variable\",{\"1\":{\"68\":1,\"197\":2}}],[\"var\",{\"0\":{\"527\":1},\"1\":{\"36\":2,\"37\":2,\"70\":2,\"76\":1,\"78\":2,\"125\":7,\"127\":1,\"128\":1,\"129\":2,\"169\":4,\"170\":2,\"172\":3,\"174\":4,\"231\":3,\"232\":3,\"253\":3,\"257\":4,\"260\":2,\"274\":2,\"293\":1,\"294\":2,\"295\":1,\"296\":2,\"297\":1,\"298\":1,\"299\":1,\"300\":2,\"301\":5,\"302\":4,\"303\":1,\"304\":1,\"305\":1,\"306\":2,\"307\":2,\"308\":3,\"309\":3,\"358\":2,\"472\":6,\"473\":3,\"476\":1,\"522\":1,\"523\":5,\"526\":1,\"527\":3,\"530\":1}}],[\"v\",{\"1\":{\"20\":2,\"22\":1,\"285\":2}}],[\"重载允许一个函数接受不同数量或类型的参数时\",{\"1\":{\"508\":1}}],[\"重载\",{\"0\":{\"508\":1}}],[\"重写上面的例子\",{\"1\":{\"486\":1}}],[\"重置按钮\",{\"1\":{\"441\":1}}],[\"重置\",{\"1\":{\"436\":1}}],[\"重构技巧\",{\"1\":{\"323\":1}}],[\"重启一下docker服务\",{\"1\":{\"285\":1}}],[\"重要的是要知道为什么\",{\"0\":{\"127\":1}}],[\"重复\",{\"1\":{\"533\":1}}],[\"重复使用person是会报错的\",{\"1\":{\"533\":1}}],[\"重复本身也是一个bug\",{\"1\":{\"97\":1}}],[\"重复类成员会默默的执行最后一个\",{\"1\":{\"97\":1}}],[\"重复引用会导致\",{\"1\":{\"36\":1}}],[\"重新加载扩展并右键单击工具栏中的扩展图标\",{\"1\":{\"319\":1}}],[\"重新加载扩展程序\",{\"1\":{\"318\":1}}],[\"重新加载扩展程序以查看绿色按钮\",{\"1\":{\"317\":1}}],[\"重新打开关闭编辑器\",{\"1\":{\"19\":1}}],[\"重新\",{\"1\":{\"19\":1}}],[\"重命名符号\",{\"1\":{\"17\":1}}],[\"全局变量都是禁止修改的常量\",{\"1\":{\"527\":1}}],[\"全局变量的声明文件主要有以下几种语法\",{\"1\":{\"526\":1}}],[\"全局变量是最简单的一种场景\",{\"1\":{\"526\":1}}],[\"全局变量\",{\"0\":{\"526\":1},\"1\":{\"525\":1}}],[\"全局对象\",{\"1\":{\"522\":1,\"526\":1}}],[\"全局安装nrm\",{\"1\":{\"287\":1}}],[\"全局安装verdaccio和pm2\",{\"1\":{\"286\":1}}],[\"全局function模式\",{\"1\":{\"224\":1}}],[\"全局\",{\"1\":{\"216\":1,\"241\":1}}],[\"全屏\",{\"1\":{\"20\":1}}],[\"全部保存\",{\"1\":{\"19\":1}}],[\"全字匹配\",{\"1\":{\"15\":1}}],[\"移除\",{\"0\":{\"460\":1}}],[\"移除某个事件回调队列里的指定回调函数\",{\"1\":{\"338\":1}}],[\"移除订阅者\",{\"1\":{\"337\":1}}],[\"移除数组最后一项\",{\"1\":{\"295\":1}}],[\"移位运算对大于32位的整数会导致意外行为\",{\"0\":{\"185\":1}}],[\"移动活动编辑器组\",{\"1\":{\"18\":1}}],[\"移至定义区\",{\"1\":{\"17\":1}}],[\"左边是输入类型\",{\"1\":{\"503\":1}}],[\"左侧\",{\"1\":{\"408\":1}}],[\"左\",{\"1\":{\"18\":1}}],[\"关于声明合并的更多用法\",{\"1\":{\"535\":1}}],[\"关于\",{\"1\":{\"507\":1}}],[\"关于默认参数\",{\"1\":{\"506\":1}}],[\"关于内置对象\",{\"1\":{\"493\":1}}],[\"关于泛型\",{\"1\":{\"491\":1}}],[\"关键字的\",{\"1\":{\"550\":1}}],[\"关键字\",{\"1\":{\"531\":1}}],[\"关键字表示内部模块\",{\"1\":{\"531\":1}}],[\"关键字来定义\",{\"1\":{\"476\":1}}],[\"关键词调用了\",{\"1\":{\"277\":1}}],[\"关键词会做哪些操作\",{\"1\":{\"277\":1}}],[\"关键词相信大家都知道或者使用过吧\",{\"1\":{\"277\":1}}],[\"关注咖啡机状态切换函数\",{\"1\":{\"333\":1}}],[\"关注的是对象的行为随着内部状态的改变而改变\",{\"1\":{\"332\":1}}],[\"关注的是算法族\",{\"1\":{\"332\":1}}],[\"关注点分离\",{\"1\":{\"326\":1}}],[\"关注上个\",{\"1\":{\"18\":1}}],[\"关注第一\",{\"1\":{\"18\":1}}],[\"关闭全部\",{\"1\":{\"19\":1}}],[\"关闭\",{\"1\":{\"19\":1}}],[\"关闭文件夹\",{\"1\":{\"18\":1}}],[\"关闭编辑器\",{\"1\":{\"18\":1}}],[\"关闭窗口\",{\"1\":{\"12\":1}}],[\"314\",{\"1\":{\"358\":1}}],[\"321\",{\"1\":{\"508\":1}}],[\"32\",{\"1\":{\"317\":3}}],[\"32713721fda5\",{\"1\":{\"285\":1}}],[\"3aa757\",{\"1\":{\"314\":1,\"319\":1}}],[\"3|2|true\",{\"1\":{\"305\":1}}],[\"30px\",{\"1\":{\"317\":2}}],[\"30\",{\"0\":{\"219\":1,\"220\":1},\"1\":{\"488\":1}}],[\"3rd\",{\"1\":{\"18\":1}}],[\"3\",{\"0\":{\"34\":1,\"38\":1,\"40\":1,\"41\":1,\"42\":2,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"51\":1,\"60\":1,\"64\":1,\"71\":1,\"87\":1,\"94\":1,\"102\":1,\"112\":1,\"116\":1,\"120\":1,\"129\":1,\"134\":1,\"143\":1,\"150\":1,\"157\":1,\"183\":1,\"190\":1,\"201\":1,\"208\":1,\"214\":1,\"225\":1,\"231\":1,\"252\":1,\"264\":1,\"276\":1,\"278\":1,\"283\":1,\"291\":1,\"398\":1,\"404\":1,\"410\":1,\"417\":1,\"424\":1,\"441\":1,\"455\":1},\"1\":{\"18\":1,\"44\":2,\"45\":2,\"47\":6,\"53\":1,\"55\":4,\"56\":2,\"59\":1,\"76\":3,\"82\":2,\"85\":2,\"86\":4,\"88\":5,\"104\":2,\"110\":1,\"123\":2,\"136\":2,\"165\":2,\"193\":1,\"216\":3,\"232\":3,\"237\":3,\"263\":2,\"293\":4,\"298\":3,\"299\":3,\"300\":3,\"301\":5,\"302\":5,\"303\":2,\"304\":2,\"305\":1,\"306\":1,\"307\":2,\"308\":2,\"309\":2,\"311\":1,\"312\":1,\"315\":1,\"317\":3,\"320\":1,\"359\":2,\"375\":1,\"426\":1,\"474\":2,\"475\":1,\"476\":1,\"490\":3,\"491\":1,\"492\":1,\"499\":1,\"502\":1,\"507\":2}}],[\"2种指定方式\",{\"1\":{\"320\":1}}],[\"2px\",{\"1\":{\"317\":2}}],[\"2|1|true\",{\"1\":{\"305\":1}}],[\"2e3\",{\"1\":{\"217\":3}}],[\"29\",{\"0\":{\"216\":1,\"217\":1}}],[\"27\",{\"0\":{\"211\":1}}],[\"26\",{\"0\":{\"206\":1,\"207\":1,\"208\":1,\"209\":1},\"1\":{\"513\":1}}],[\"262中\",{\"0\":{\"72\":1}}],[\"25\",{\"0\":{\"204\":1},\"1\":{\"282\":1,\"306\":1,\"473\":2,\"494\":1,\"497\":1,\"498\":2,\"499\":3}}],[\"256\",{\"1\":{\"89\":4}}],[\"241\",{\"1\":{\"291\":1}}],[\"24\",{\"0\":{\"199\":1,\"200\":1,\"201\":1,\"202\":1},\"1\":{\"298\":3,\"299\":3,\"493\":1}}],[\"2300\",{\"1\":{\"533\":1}}],[\"23\",{\"0\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1},\"1\":{\"512\":1}}],[\"22\",{\"0\":{\"181\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1},\"1\":{\"488\":1}}],[\"2147483649\",{\"1\":{\"185\":1}}],[\"2147483648\",{\"1\":{\"185\":2}}],[\"2147483647\",{\"1\":{\"185\":3}}],[\"21\",{\"0\":{\"179\":1}}],[\"28\",{\"0\":{\"213\":1,\"214\":1},\"1\":{\"114\":1,\"115\":1}}],[\"200\",{\"1\":{\"513\":2}}],[\"2000\",{\"1\":{\"375\":1}}],[\"2015+\",{\"0\":{\"212\":1}}],[\"2016\",{\"1\":{\"82\":2}}],[\"20\",{\"0\":{\"174\":1,\"176\":1,\"177\":1},\"1\":{\"94\":2,\"358\":1}}],[\"2nd\",{\"1\":{\"18\":1}}],[\"2\",{\"0\":{\"33\":1,\"36\":1,\"37\":2,\"38\":1,\"41\":1,\"50\":1,\"55\":1,\"59\":1,\"63\":1,\"69\":1,\"70\":1,\"86\":1,\"93\":1,\"101\":1,\"111\":1,\"115\":1,\"119\":1,\"128\":1,\"133\":1,\"142\":1,\"146\":1,\"149\":1,\"156\":1,\"177\":1,\"182\":1,\"185\":1,\"189\":1,\"200\":1,\"207\":1,\"214\":1,\"217\":1,\"220\":1,\"224\":1,\"230\":1,\"245\":1,\"247\":1,\"254\":1,\"261\":1,\"273\":1,\"274\":1,\"275\":2,\"276\":1,\"277\":1,\"282\":1,\"286\":1,\"290\":1,\"397\":1,\"403\":1,\"409\":1,\"416\":1,\"423\":1,\"434\":1,\"437\":1,\"440\":1,\"454\":1},\"1\":{\"18\":1,\"33\":1,\"36\":2,\"44\":2,\"47\":6,\"53\":1,\"55\":4,\"56\":6,\"59\":1,\"76\":1,\"82\":2,\"85\":2,\"86\":4,\"88\":5,\"97\":2,\"110\":1,\"116\":2,\"123\":2,\"125\":1,\"136\":4,\"160\":2,\"165\":2,\"169\":4,\"174\":2,\"193\":1,\"216\":4,\"237\":3,\"285\":2,\"293\":4,\"301\":1,\"302\":7,\"303\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"320\":1,\"359\":3,\"375\":1,\"426\":1,\"439\":1,\"474\":2,\"476\":3,\"484\":2,\"487\":1,\"488\":1,\"490\":3,\"491\":1,\"492\":1,\"502\":1,\"507\":2,\"514\":1}}],[\"1bx5qh6\",{\"1\":{\"402\":1,\"403\":1}}],[\"1|0|true\",{\"1\":{\"305\":1}}],[\"1服务器保持活动超时\",{\"1\":{\"283\":1}}],[\"1禁止注册\",{\"1\":{\"283\":2}}],[\"192\",{\"1\":{\"291\":1}}],[\"19\",{\"0\":{\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":2,\"174\":1}}],[\"1815\",{\"1\":{\"176\":2}}],[\"18\",{\"0\":{\"148\":1,\"149\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":1,\"172\":1},\"1\":{\"359\":2,\"380\":2}}],[\"17\",{\"0\":{\"145\":1,\"146\":1,\"171\":1}}],[\"168\",{\"1\":{\"291\":1}}],[\"16\",{\"0\":{\"141\":1,\"142\":1,\"143\":1,\"170\":1},\"1\":{\"285\":1,\"306\":1,\"313\":1,\"317\":3,\"320\":1}}],[\"1而不是num\",{\"1\":{\"123\":1}}],[\"1592653589793\",{\"1\":{\"358\":1}}],[\"15\",{\"0\":{\"83\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"169\":1},\"1\":{\"110\":3}}],[\"147\",{\"0\":{\"185\":1}}],[\"14\",{\"0\":{\"82\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"168\":1},\"1\":{\"500\":1}}],[\"13\",{\"0\":{\"81\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"167\":1},\"1\":{\"298\":3,\"299\":3,\"300\":2,\"500\":1}}],[\"1256\",{\"1\":{\"358\":1}}],[\"128\",{\"1\":{\"291\":1,\"313\":1,\"317\":3,\"320\":1}}],[\"123\",{\"1\":{\"145\":7,\"508\":1}}],[\"12\",{\"0\":{\"80\":1,\"114\":1,\"115\":1,\"116\":1,\"166\":1},\"1\":{\"350\":1,\"519\":1}}],[\"11\",{\"0\":{\"79\":1,\"110\":1,\"111\":1,\"112\":1,\"165\":1},\"1\":{\"300\":2,\"301\":3,\"302\":4,\"512\":1}}],[\"10px\",{\"1\":{\"317\":1}}],[\"10001\",{\"1\":{\"291\":1}}],[\"1000\",{\"1\":{\"283\":2,\"375\":1}}],[\"100\",{\"1\":{\"220\":1,\"275\":1,\"276\":1,\"375\":1,\"402\":1,\"403\":1,\"405\":1}}],[\"10\",{\"0\":{\"78\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"164\":1,\"197\":1},\"1\":{\"70\":2,\"116\":2,\"125\":1,\"183\":1,\"217\":1,\"224\":1,\"251\":1,\"307\":2,\"308\":1,\"358\":1,\"472\":1,\"475\":2}}],[\"1st\",{\"1\":{\"18\":1}}],[\"1\",{\"0\":{\"32\":2,\"33\":1,\"34\":1,\"36\":1,\"40\":1,\"49\":1,\"58\":1,\"62\":1,\"68\":1,\"70\":1,\"85\":1,\"92\":1,\"100\":1,\"110\":1,\"114\":1,\"118\":1,\"127\":1,\"132\":1,\"141\":1,\"145\":1,\"148\":1,\"155\":1,\"176\":1,\"179\":1,\"181\":1,\"188\":1,\"199\":1,\"204\":1,\"206\":1,\"211\":1,\"213\":1,\"216\":1,\"219\":1,\"223\":1,\"228\":1,\"229\":1,\"246\":1,\"253\":1,\"260\":1,\"272\":1,\"274\":1,\"285\":1,\"289\":1,\"395\":1,\"402\":1,\"408\":1,\"415\":1,\"422\":1,\"433\":1,\"436\":1,\"439\":1,\"453\":1},\"1\":{\"18\":1,\"32\":2,\"33\":1,\"34\":3,\"36\":2,\"37\":4,\"38\":2,\"42\":2,\"44\":2,\"47\":5,\"51\":1,\"53\":1,\"55\":6,\"56\":6,\"59\":2,\"76\":2,\"80\":2,\"81\":4,\"82\":2,\"85\":4,\"86\":6,\"88\":7,\"92\":2,\"97\":2,\"110\":4,\"122\":5,\"123\":6,\"125\":2,\"136\":4,\"139\":2,\"156\":2,\"165\":2,\"169\":4,\"174\":2,\"193\":1,\"216\":4,\"224\":2,\"231\":1,\"235\":1,\"237\":2,\"240\":1,\"251\":2,\"265\":1,\"283\":3,\"293\":4,\"300\":3,\"301\":6,\"302\":5,\"303\":2,\"304\":2,\"305\":1,\"306\":2,\"307\":2,\"308\":1,\"309\":2,\"311\":1,\"312\":1,\"315\":1,\"317\":3,\"320\":2,\"337\":1,\"338\":2,\"359\":3,\"375\":1,\"425\":4,\"426\":6,\"442\":2,\"471\":3,\"473\":2,\"474\":2,\"475\":3,\"476\":3,\"484\":2,\"485\":1,\"487\":1,\"490\":6,\"491\":2,\"492\":2,\"502\":4,\"504\":1,\"505\":1,\"507\":2,\"514\":5,\"518\":5}}],[\"拆分编辑器\",{\"1\":{\"18\":1}}],[\"格式书写的\",{\"1\":{\"398\":1}}],[\"格式选择\",{\"1\":{\"17\":1}}],[\"格式化文件\",{\"1\":{\"17\":1}}],[\"触发新的渲染\",{\"1\":{\"445\":1}}],[\"触发函数\",{\"1\":{\"415\":1}}],[\"触发参数提示\",{\"1\":{\"17\":1}}],[\"触发的建议\",{\"1\":{\"17\":1}}],[\"箱\",{\"1\":{\"16\":3}}],[\"列表\",{\"0\":{\"447\":1}}],[\"列出所有正在运行的应用程序及其相关信息\",{\"1\":{\"286\":1}}],[\"列\",{\"1\":{\"16\":3}}],[\"iarguments\",{\"1\":{\"493\":5}}],[\"icat\",{\"1\":{\"533\":4}}],[\"icejs\",{\"0\":{\"391\":1},\"1\":{\"391\":1}}],[\"ice\",{\"1\":{\"390\":2}}],[\"icons\",{\"1\":{\"317\":3,\"320\":1}}],[\"icon\",{\"1\":{\"313\":3,\"317\":2,\"320\":7}}],[\"ico\",{\"1\":{\"283\":2}}],[\"iosadapter\",{\"1\":{\"367\":4}}],[\"ios\",{\"1\":{\"367\":4,\"386\":1}}],[\"iosplayer\",{\"1\":{\"367\":12}}],[\"io\",{\"1\":{\"286\":1}}],[\"i18n\",{\"1\":{\"283\":2}}],[\"i18n翻译配置\",{\"1\":{\"283\":1}}],[\"i++\",{\"1\":{\"110\":1,\"123\":1}}],[\"iterator\",{\"1\":{\"342\":1}}],[\"iterators\",{\"0\":{\"109\":1},\"1\":{\"213\":1}}],[\"itemheight\",{\"1\":{\"89\":4}}],[\"itemscopy\",{\"1\":{\"51\":3}}],[\"items\",{\"1\":{\"49\":2,\"51\":3,\"119\":3,\"120\":3,\"160\":3,\"507\":5}}],[\"item\",{\"1\":{\"40\":2,\"55\":4,\"89\":14,\"295\":2,\"297\":2,\"306\":3,\"337\":2,\"408\":4,\"409\":1,\"507\":4}}],[\"it\",{\"1\":{\"88\":2,\"110\":1,\"380\":2,\"475\":2,\"500\":2,\"527\":1}}],[\"iife模式增强\",{\"1\":{\"224\":1}}],[\"iife模式\",{\"1\":{\"224\":1}}],[\"iife形式的函数调用\",{\"1\":{\"70\":1}}],[\"iife\",{\"0\":{\"70\":1},\"1\":{\"69\":3,\"70\":1}}],[\"immer\",{\"1\":{\"427\":1}}],[\"immediately\",{\"1\":{\"69\":2,\"70\":1}}],[\"imgur\",{\"1\":{\"399\":1}}],[\"img\",{\"1\":{\"320\":5}}],[\"imageid\",{\"1\":{\"402\":1,\"403\":1,\"405\":1}}],[\"image\",{\"1\":{\"285\":2,\"320\":1}}],[\"images\",{\"1\":{\"285\":1,\"313\":1,\"317\":12}}],[\"implements\",{\"1\":{\"533\":3}}],[\"implementation\",{\"1\":{\"527\":1,\"529\":1}}],[\"implement\",{\"1\":{\"496\":1,\"533\":1}}],[\"implemented\",{\"1\":{\"350\":2}}],[\"implicit\",{\"1\":{\"193\":1}}],[\"import命令可以为该匿名函数指定任意名字\",{\"1\":{\"260\":1}}],[\"import命令用于输入其他模块提供的功能\",{\"1\":{\"260\":1}}],[\"imports\",{\"1\":{\"103\":1}}],[\"import\",{\"0\":{\"106\":1,\"193\":1},\"1\":{\"46\":1,\"100\":2,\"101\":2,\"102\":1,\"103\":4,\"106\":4,\"107\":2,\"108\":4,\"159\":3,\"193\":20,\"196\":3,\"260\":3,\"263\":1,\"268\":3,\"269\":4,\"410\":1,\"422\":1,\"425\":1,\"426\":1,\"442\":4,\"448\":1,\"449\":1,\"453\":1,\"454\":1,\"459\":1,\"525\":3,\"536\":3,\"537\":2,\"539\":1,\"540\":3,\"541\":8,\"542\":1,\"547\":6,\"548\":2,\"549\":3,\"550\":1,\"551\":2}}],[\"isapierror\",{\"1\":{\"513\":5}}],[\"isfish\",{\"1\":{\"512\":2}}],[\"isfinite\",{\"0\":{\"217\":2},\"1\":{\"217\":3}}],[\"isdone\",{\"1\":{\"471\":1}}],[\"isplaying\",{\"1\":{\"454\":6}}],[\"ispacked\",{\"1\":{\"408\":3,\"409\":1}}],[\"isp原则是由罗伯特\",{\"1\":{\"326\":1}}],[\"isnan\",{\"0\":{\"216\":2},\"1\":{\"216\":5}}],[\"isrunning\",{\"1\":{\"146\":2}}],[\"isthisreallyhappening\",{\"1\":{\"145\":2}}],[\"isvalid\",{\"1\":{\"134\":2}}],[\"isjedi\",{\"1\":{\"114\":2,\"115\":1,\"157\":2}}],[\"is\",{\"1\":{\"63\":3,\"66\":2,\"128\":1,\"129\":3,\"149\":2,\"150\":2,\"182\":1,\"189\":1,\"282\":1,\"289\":1,\"290\":1,\"346\":1,\"350\":1,\"380\":1,\"471\":3,\"473\":2,\"479\":1,\"484\":2,\"486\":1,\"487\":2,\"490\":2,\"493\":1,\"497\":2,\"498\":1,\"499\":4,\"500\":4,\"512\":2,\"513\":1,\"519\":1,\"527\":1,\"529\":1}}],[\"idle\",{\"1\":{\"320\":2}}],[\"id=\",{\"1\":{\"317\":2,\"319\":1,\"380\":1}}],[\"id\",{\"1\":{\"41\":2,\"56\":4,\"204\":2,\"285\":2,\"318\":1,\"410\":4,\"447\":1,\"500\":11,\"523\":1}}],[\"ifitexists\",{\"1\":{\"477\":2}}],[\"if表达式的else和if的关闭大括号在一行\",{\"0\":{\"142\":1}}],[\"if\",{\"0\":{\"133\":1,\"143\":4,\"145\":1,\"157\":1},\"1\":{\"37\":2,\"55\":2,\"72\":2,\"75\":1,\"81\":1,\"86\":2,\"121\":4,\"123\":1,\"133\":1,\"134\":6,\"139\":2,\"141\":3,\"142\":2,\"143\":10,\"145\":7,\"146\":1,\"157\":2,\"161\":2,\"162\":2,\"164\":2,\"168\":2,\"201\":2,\"319\":2,\"333\":1,\"337\":1,\"338\":3,\"346\":3,\"350\":3,\"354\":4,\"359\":7,\"367\":4,\"371\":1,\"408\":2,\"409\":1,\"454\":2,\"505\":2,\"508\":4,\"512\":2,\"513\":4}}],[\"i\",{\"1\":{\"16\":1,\"51\":6,\"66\":1,\"110\":3,\"120\":3,\"123\":3,\"257\":1,\"281\":1,\"286\":2,\"290\":1,\"337\":2,\"399\":1,\"428\":1,\"473\":2,\"497\":1}}],[\"infiniteloop\",{\"1\":{\"480\":1}}],[\"infinity\",{\"1\":{\"472\":2}}],[\"infinitynumber\",{\"1\":{\"472\":2}}],[\"info\",{\"1\":{\"282\":5,\"318\":1}}],[\"innertext\",{\"1\":{\"363\":1}}],[\"inject\",{\"1\":{\"320\":1}}],[\"include\",{\"1\":{\"523\":1,\"526\":1}}],[\"incompatible\",{\"1\":{\"499\":1}}],[\"incorrectly\",{\"1\":{\"475\":1}}],[\"inccounter\",{\"1\":{\"232\":6,\"263\":3}}],[\"increasedbyone\",{\"1\":{\"110\":5}}],[\"inventions\",{\"1\":{\"400\":2}}],[\"inventorof\",{\"1\":{\"177\":8}}],[\"inversion\",{\"1\":{\"322\":1,\"327\":2}}],[\"invokes\",{\"1\":{\"182\":1}}],[\"invoked\",{\"1\":{\"69\":2,\"70\":1,\"337\":3}}],[\"invocation\",{\"1\":{\"68\":1}}],[\"initialize\",{\"1\":{\"317\":1,\"319\":1,\"475\":2}}],[\"init\",{\"1\":{\"106\":2,\"235\":1,\"333\":1,\"390\":1}}],[\"inherits\",{\"1\":{\"93\":3}}],[\"inputvalue\",{\"1\":{\"183\":6,\"184\":1}}],[\"input\",{\"1\":{\"60\":4}}],[\"inbox\",{\"1\":{\"55\":2}}],[\"indexof\",{\"0\":{\"303\":1},\"1\":{\"303\":1,\"338\":1}}],[\"index\",{\"1\":{\"55\":4,\"86\":2,\"193\":7,\"224\":2,\"240\":1,\"242\":1,\"249\":1,\"250\":1,\"256\":1,\"305\":2,\"307\":2,\"338\":3,\"410\":4,\"422\":2,\"484\":2,\"487\":1,\"488\":2,\"492\":1,\"493\":2,\"497\":1,\"498\":1,\"499\":4,\"500\":3,\"502\":2,\"505\":1,\"512\":1,\"513\":1,\"514\":2,\"519\":1,\"523\":2,\"526\":1,\"527\":1,\"528\":2,\"529\":1,\"530\":1,\"531\":2,\"532\":2,\"534\":1,\"535\":1,\"536\":5,\"537\":2,\"538\":1,\"539\":2,\"540\":5,\"541\":1,\"543\":2,\"544\":2,\"546\":2,\"547\":3,\"548\":1,\"550\":2,\"551\":2}}],[\"indent\",{\"1\":{\"13\":1}}],[\"intersection\",{\"1\":{\"533\":1}}],[\"interfaces\",{\"1\":{\"495\":1,\"496\":1}}],[\"interface\",{\"0\":{\"533\":1},\"1\":{\"317\":1,\"322\":1,\"492\":1,\"493\":1,\"497\":2,\"498\":3,\"499\":3,\"500\":2,\"504\":1,\"512\":8,\"513\":5,\"515\":1,\"516\":6,\"517\":2,\"519\":6,\"520\":2,\"522\":1,\"526\":1,\"533\":14,\"534\":3,\"537\":1,\"538\":2,\"540\":1,\"544\":4,\"546\":1,\"547\":1}}],[\"internal\",{\"1\":{\"285\":1,\"291\":2}}],[\"internet\",{\"1\":{\"69\":1}}],[\"intellisense\",{\"0\":{\"24\":1}}],[\"integrated\",{\"0\":{\"22\":1},\"1\":{\"22\":1}}],[\"into\",{\"1\":{\"18\":2,\"21\":1,\"22\":1}}],[\"in\",{\"0\":{\"110\":1},\"1\":{\"19\":2,\"20\":2,\"148\":2,\"150\":2,\"193\":1,\"282\":1,\"289\":2,\"290\":2,\"359\":1,\"380\":2,\"497\":1,\"498\":1,\"500\":1,\"519\":2,\"527\":1,\"529\":1}}],[\"instead\",{\"1\":{\"477\":1}}],[\"install\",{\"1\":{\"236\":1,\"241\":2,\"266\":2,\"269\":1,\"287\":1,\"468\":1,\"524\":1,\"526\":1,\"536\":1}}],[\"instanceof\",{\"1\":{\"34\":7,\"346\":2,\"359\":4,\"367\":4,\"513\":6}}],[\"instance\",{\"1\":{\"12\":2,\"19\":1,\"354\":18}}],[\"inspect\",{\"1\":{\"316\":1}}],[\"inside\",{\"1\":{\"193\":3}}],[\"insidedirectory\",{\"1\":{\"193\":9}}],[\"insertion这一规则来决定行末是否加分号\",{\"1\":{\"179\":1}}],[\"insert\",{\"1\":{\"13\":2,\"16\":3}}],[\"rhino\",{\"1\":{\"485\":3,\"486\":2}}],[\"roomid\",{\"1\":{\"459\":1}}],[\"root\",{\"1\":{\"380\":4}}],[\"robert\",{\"1\":{\"326\":1}}],[\"ralph\",{\"1\":{\"328\":1}}],[\"radius\",{\"1\":{\"160\":6,\"317\":1,\"358\":4}}],[\"run\",{\"1\":{\"285\":1,\"320\":1,\"512\":6,\"515\":2,\"516\":6,\"517\":1,\"519\":7,\"520\":4}}],[\"runtime\",{\"0\":{\"29\":1},\"1\":{\"314\":1,\"477\":1}}],[\"right\",{\"1\":{\"18\":1,\"60\":2,\"530\":3,\"537\":2,\"538\":1,\"540\":3}}],[\"richard\",{\"1\":{\"328\":1}}],[\"rich\",{\"0\":{\"17\":1}}],[\"r\",{\"1\":{\"15\":1,\"19\":1,\"287\":1,\"291\":1}}],[\"refers\",{\"1\":{\"513\":1}}],[\"referenced\",{\"1\":{\"68\":1}}],[\"referenceerror\",{\"1\":{\"38\":2,\"127\":3,\"129\":1}}],[\"references\",{\"0\":{\"35\":1},\"1\":{\"17\":1}}],[\"ref=\",{\"1\":{\"448\":1,\"449\":1}}],[\"refs\",{\"0\":{\"450\":1},\"1\":{\"448\":1,\"450\":3}}],[\"ref\",{\"0\":{\"445\":1,\"446\":1,\"447\":2},\"1\":{\"445\":6,\"446\":2,\"447\":5,\"448\":3,\"449\":1,\"450\":4,\"454\":9}}],[\"remix\",{\"0\":{\"384\":1},\"1\":{\"384\":3}}],[\"remove\",{\"1\":{\"13\":1,\"319\":1,\"337\":2}}],[\"render\",{\"1\":{\"380\":1}}],[\"rename\",{\"1\":{\"17\":1}}],[\"reset\",{\"1\":{\"441\":1}}],[\"responsibility\",{\"1\":{\"322\":1,\"327\":1}}],[\"resources\",{\"1\":{\"320\":1}}],[\"restart=always\",{\"1\":{\"285\":2}}],[\"rest\",{\"1\":{\"47\":1,\"125\":1,\"177\":2,\"213\":1,\"507\":5}}],[\"rel=\",{\"1\":{\"317\":2,\"319\":1}}],[\"repository\",{\"1\":{\"285\":1}}],[\"replace\",{\"0\":{\"15\":1},\"1\":{\"15\":1,\"20\":1}}],[\"red\",{\"1\":{\"224\":1}}],[\"reducers\",{\"0\":{\"441\":1},\"1\":{\"441\":4}}],[\"reducer就是一个它接受目前的结果和当前的值\",{\"1\":{\"438\":1}}],[\"reducer\",{\"0\":{\"438\":1,\"439\":1,\"443\":1},\"1\":{\"438\":1,\"439\":3,\"440\":6,\"441\":2,\"442\":1}}],[\"reduce没有设置初始值\",{\"1\":{\"55\":1}}],[\"reduce\",{\"1\":{\"55\":2,\"110\":2,\"123\":1}}],[\"reactnode\",{\"1\":{\"510\":1}}],[\"react生命周期\",{\"0\":{\"429\":1},\"1\":{\"429\":1}}],[\"reactdom\",{\"1\":{\"380\":1,\"402\":1}}],[\"react\",{\"0\":{\"381\":1,\"382\":1,\"387\":1,\"450\":1},\"1\":{\"378\":1,\"380\":12,\"383\":2,\"384\":1,\"385\":1,\"386\":2,\"388\":2,\"391\":1,\"393\":1,\"395\":1,\"398\":3,\"400\":1,\"401\":1,\"408\":3,\"410\":2,\"411\":1,\"412\":2,\"414\":1,\"415\":1,\"417\":1,\"421\":1,\"422\":3,\"425\":1,\"426\":2,\"427\":2,\"428\":1,\"429\":1,\"433\":1,\"442\":2,\"445\":1,\"446\":3,\"447\":1,\"448\":2,\"449\":1,\"450\":6,\"451\":1,\"452\":3,\"453\":1,\"454\":3,\"456\":1,\"457\":3,\"459\":1,\"462\":1,\"468\":1,\"510\":1}}],[\"react推荐函数式编程\",{\"1\":{\"378\":1}}],[\"react是什么\",{\"0\":{\"378\":1}}],[\"realinputref\",{\"1\":{\"449\":3}}],[\"realsubject\",{\"1\":{\"371\":9}}],[\"really\",{\"1\":{\"75\":1}}],[\"ready\",{\"1\":{\"528\":1}}],[\"readonly\",{\"1\":{\"500\":4}}],[\"reading\",{\"1\":{\"274\":1}}],[\"read\",{\"1\":{\"274\":1,\"282\":1,\"380\":2,\"500\":2,\"527\":1}}],[\"reassignable\",{\"1\":{\"197\":1}}],[\"request\",{\"1\":{\"536\":1}}],[\"requests\",{\"1\":{\"196\":1}}],[\"requiring\",{\"1\":{\"193\":2}}],[\"required\",{\"1\":{\"505\":1,\"519\":1}}],[\"requirejs\",{\"1\":{\"248\":3}}],[\"requirejs的基本思想是\",{\"1\":{\"247\":1}}],[\"requirejs是一个工具库\",{\"1\":{\"247\":1}}],[\"require命令的基本功能是\",{\"1\":{\"231\":1}}],[\"require命令用于加载模块文件\",{\"1\":{\"231\":1}}],[\"require\",{\"1\":{\"93\":1,\"100\":1,\"231\":2,\"232\":2,\"237\":4,\"246\":1,\"248\":1,\"249\":1,\"250\":3,\"251\":3,\"253\":7,\"257\":9,\"541\":6}}],[\"reverse\",{\"0\":{\"299\":1},\"1\":{\"299\":1,\"428\":1,\"508\":11}}],[\"reveal\",{\"1\":{\"19\":1}}],[\"reviewscore\",{\"1\":{\"182\":6}}],[\"rey\",{\"1\":{\"96\":3}}],[\"returns\",{\"1\":{\"86\":1,\"148\":2,\"150\":2}}],[\"return\",{\"0\":{\"143\":4},\"1\":{\"41\":1,\"42\":2,\"55\":6,\"58\":3,\"60\":2,\"64\":4,\"74\":2,\"78\":2,\"85\":2,\"86\":1,\"88\":2,\"89\":1,\"92\":2,\"93\":2,\"94\":3,\"95\":2,\"96\":1,\"97\":4,\"115\":1,\"121\":6,\"125\":2,\"139\":2,\"141\":5,\"143\":12,\"148\":3,\"149\":3,\"150\":2,\"161\":8,\"164\":2,\"168\":2,\"179\":3,\"192\":3,\"193\":1,\"201\":2,\"202\":1,\"219\":1,\"231\":1,\"246\":2,\"250\":3,\"251\":1,\"260\":1,\"298\":1,\"306\":1,\"307\":1,\"308\":2,\"309\":2,\"333\":1,\"346\":8,\"350\":6,\"354\":8,\"358\":2,\"359\":7,\"371\":2,\"375\":4,\"380\":1,\"399\":1,\"400\":1,\"402\":1,\"403\":1,\"404\":1,\"405\":2,\"408\":4,\"409\":2,\"410\":2,\"415\":1,\"416\":4,\"418\":2,\"420\":1,\"425\":1,\"426\":1,\"448\":1,\"449\":1,\"453\":1,\"454\":1,\"455\":1,\"480\":1,\"486\":1,\"488\":2,\"502\":5,\"503\":2,\"504\":1,\"505\":4,\"506\":2,\"508\":4,\"512\":5,\"513\":8,\"515\":2,\"516\":2,\"517\":1,\"518\":3,\"519\":2,\"520\":2,\"527\":3,\"529\":1,\"532\":2}}],[\"reopen\",{\"1\":{\"19\":1}}],[\"regularcard\",{\"1\":{\"375\":2}}],[\"reg\",{\"1\":{\"359\":1}}],[\"registry\",{\"1\":{\"283\":1,\"287\":4}}],[\"regions\",{\"1\":{\"13\":2}}],[\"region\",{\"1\":{\"13\":2}}],[\"regexp\",{\"1\":{\"34\":3,\"359\":2}}],[\"regex\",{\"1\":{\"15\":1}}],[\"ll\",{\"1\":{\"473\":2}}],[\"lucy\",{\"1\":{\"294\":2,\"295\":1,\"296\":2,\"297\":1}}],[\"luke\",{\"1\":{\"43\":1,\"44\":1,\"94\":5,\"114\":3,\"115\":2}}],[\"lukeskywalker\",{\"1\":{\"43\":4,\"44\":3}}],[\"lsp表明\",{\"1\":{\"325\":1}}],[\"ls\",{\"1\":{\"287\":1}}],[\"literal\",{\"1\":{\"498\":1}}],[\"like\",{\"1\":{\"493\":1}}],[\"linter\",{\"1\":{\"460\":2}}],[\"lin\",{\"1\":{\"402\":1,\"403\":2}}],[\"line\",{\"1\":{\"13\":13,\"14\":1,\"16\":2,\"88\":1,\"167\":1}}],[\"li>\",{\"1\":{\"400\":3,\"408\":4,\"409\":1,\"410\":2}}],[\"liskov\",{\"1\":{\"322\":1,\"325\":1}}],[\"listitems\",{\"1\":{\"410\":3}}],[\"listingid\",{\"1\":{\"204\":4}}],[\"listing\",{\"1\":{\"204\":2}}],[\"listingupdated\",{\"1\":{\"204\":4}}],[\"list<\",{\"1\":{\"399\":2}}],[\"list\",{\"1\":{\"286\":1,\"410\":2,\"474\":2,\"494\":1}}],[\"listen\",{\"1\":{\"283\":1}}],[\"lily\",{\"1\":{\"294\":2,\"295\":1,\"296\":2,\"297\":1}}],[\"libs\",{\"1\":{\"248\":1,\"249\":1,\"250\":1,\"251\":2,\"255\":1,\"256\":1,\"258\":1}}],[\"lib\",{\"1\":{\"232\":4,\"263\":2,\"269\":4,\"481\":1,\"482\":2}}],[\"library\",{\"0\":{\"215\":1},\"1\":{\"482\":1}}],[\"lightsaber\",{\"1\":{\"202\":4}}],[\"locale\",{\"1\":{\"320\":1}}],[\"localhost\",{\"1\":{\"282\":1}}],[\"loaded\",{\"1\":{\"282\":2}}],[\"loader语法\",{\"0\":{\"108\":1},\"1\":{\"108\":1}}],[\"lovelace\",{\"1\":{\"176\":2}}],[\"loop\",{\"0\":{\"71\":1}}],[\"longnamee\",{\"1\":{\"107\":2}}],[\"longnamed\",{\"1\":{\"107\":2}}],[\"longnamec\",{\"1\":{\"107\":2}}],[\"longnameb\",{\"1\":{\"107\":2}}],[\"longnamea\",{\"1\":{\"107\":2}}],[\"longuniquemoredescriptivelexicalfoo\",{\"1\":{\"68\":1}}],[\"long\",{\"1\":{\"63\":3,\"88\":2}}],[\"login\",{\"1\":{\"290\":1}}],[\"logged\",{\"1\":{\"289\":1,\"290\":1}}],[\"logs\",{\"1\":{\"283\":1}}],[\"logo\",{\"1\":{\"283\":1}}],[\"logo地址\",{\"1\":{\"283\":1}}],[\"log\",{\"1\":{\"32\":1,\"33\":1,\"38\":2,\"46\":3,\"69\":1,\"70\":2,\"72\":2,\"76\":1,\"82\":2,\"83\":2,\"98\":3,\"122\":6,\"127\":5,\"128\":2,\"129\":4,\"130\":1,\"149\":2,\"156\":2,\"157\":2,\"162\":6,\"164\":2,\"165\":2,\"167\":4,\"192\":3,\"224\":9,\"231\":2,\"232\":2,\"237\":4,\"257\":3,\"260\":1,\"263\":2,\"268\":5,\"274\":3,\"275\":2,\"276\":3,\"277\":1,\"289\":1,\"290\":1,\"293\":3,\"294\":2,\"295\":2,\"296\":2,\"297\":2,\"298\":3,\"299\":2,\"300\":2,\"301\":5,\"302\":6,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":2,\"309\":2,\"314\":1,\"333\":16,\"337\":5,\"346\":3,\"350\":6,\"354\":9,\"358\":2,\"359\":2,\"367\":4,\"371\":4,\"375\":2,\"475\":3,\"476\":8,\"486\":2,\"488\":2,\"512\":1,\"516\":1,\"531\":1,\"537\":1,\"539\":1}}],[\"lectures<\",{\"1\":{\"400\":1}}],[\"learn\",{\"1\":{\"380\":2}}],[\"levelcontext\",{\"1\":{\"442\":5}}],[\"level\",{\"1\":{\"283\":1,\"442\":2}}],[\"led\",{\"1\":{\"160\":7}}],[\"leds\",{\"1\":{\"160\":3}}],[\"lexical\",{\"1\":{\"68\":1}}],[\"lee\",{\"1\":{\"55\":2}}],[\"len\",{\"0\":{\"124\":1},\"1\":{\"51\":2,\"120\":2,\"167\":1}}],[\"length\",{\"1\":{\"50\":1,\"51\":1,\"53\":1,\"110\":1,\"120\":1,\"123\":2,\"134\":2,\"167\":1,\"488\":9,\"493\":3,\"514\":3}}],[\"let变量声明不会绑定在window上面\",{\"1\":{\"274\":1}}],[\"let就不一样了\",{\"1\":{\"127\":1}}],[\"let被赋予了新的调用概念时效区\",{\"0\":{\"127\":1}}],[\"let放一起\",{\"0\":{\"120\":1}}],[\"let\",{\"0\":{\"119\":1},\"1\":{\"32\":1,\"37\":3,\"38\":2,\"51\":1,\"72\":1,\"86\":1,\"104\":1,\"110\":4,\"120\":7,\"121\":1,\"122\":6,\"123\":6,\"127\":1,\"136\":2,\"197\":2,\"213\":1,\"224\":3,\"237\":4,\"250\":2,\"251\":1,\"263\":1,\"275\":3,\"276\":8,\"277\":1,\"314\":1,\"317\":1,\"318\":1,\"319\":7,\"354\":2,\"359\":7,\"375\":2,\"402\":1,\"471\":4,\"472\":6,\"473\":3,\"474\":2,\"475\":1,\"477\":3,\"478\":5,\"479\":1,\"482\":1,\"484\":3,\"485\":3,\"487\":3,\"488\":1,\"490\":3,\"491\":1,\"492\":1,\"493\":3,\"494\":1,\"497\":2,\"498\":3,\"499\":3,\"500\":2,\"502\":1,\"503\":2,\"504\":1,\"505\":4,\"506\":4,\"507\":2,\"516\":2,\"519\":2,\"527\":5,\"529\":1,\"530\":1,\"533\":1,\"534\":1,\"537\":4,\"547\":1}}],[\"leftmilk\",{\"1\":{\"333\":15}}],[\"left\",{\"1\":{\"18\":1,\"60\":4,\"530\":3,\"537\":2,\"538\":1,\"540\":3}}],[\"lanying\",{\"1\":{\"402\":1,\"403\":2}}],[\"language\",{\"1\":{\"17\":1}}],[\"languages\",{\"0\":{\"17\":1}}],[\"lamarr\",{\"1\":{\"400\":2}}],[\"later\",{\"1\":{\"482\":1}}],[\"latest\",{\"1\":{\"383\":1,\"389\":1,\"390\":1}}],[\"lattestate\",{\"1\":{\"333\":1}}],[\"latte\",{\"1\":{\"333\":4}}],[\"large\",{\"1\":{\"380\":1}}],[\"largesize\",{\"1\":{\"89\":5}}],[\"layout\",{\"1\":{\"20\":1}}],[\"lastindexof\",{\"0\":{\"304\":1},\"1\":{\"304\":1}}],[\"lastname\",{\"1\":{\"58\":7,\"176\":2,\"177\":11,\"505\":6,\"506\":4}}],[\"last\",{\"1\":{\"15\":1,\"16\":1}}],[\"l\",{\"1\":{\"16\":2}}],[\"将会在后面详细介绍\",{\"1\":{\"523\":2}}],[\"将会被绑定到\",{\"1\":{\"275\":1}}],[\"将任何一个类型断言为任何另一个类型\",{\"1\":{\"517\":1}}],[\"将任何一个类型断言为\",{\"0\":{\"514\":1}}],[\"将一个变量断言为\",{\"1\":{\"514\":1}}],[\"将一个父类断言为更加具体的子类\",{\"0\":{\"513\":1}}],[\"将一个联合类型断言为其中一个类型\",{\"0\":{\"512\":1}}],[\"将一个复杂的程序依据一定的规则\",{\"1\":{\"223\":1}}],[\"将它们移到组件外或\",{\"1\":{\"460\":1}}],[\"将它放到\",{\"1\":{\"442\":1}}],[\"将导致不同的行为\",{\"1\":{\"454\":1}}],[\"将立即运行并额外清理一次\",{\"1\":{\"452\":1}}],[\"将受影响的\",{\"1\":{\"450\":1}}],[\"将为\",{\"1\":{\"450\":1}}],[\"将传入\",{\"1\":{\"447\":1}}],[\"将函数传递给\",{\"1\":{\"447\":1}}],[\"将函数的声明括起来\",{\"1\":{\"70\":1}}],[\"将信息从父组件传递到子组件\",{\"1\":{\"442\":1}}],[\"将组件渲染在不同的位置\",{\"1\":{\"437\":1}}],[\"将按钮实例传入\",{\"1\":{\"363\":1}}],[\"将按钮标记为选中\",{\"1\":{\"319\":1}}],[\"将circle继承自shape\",{\"1\":{\"358\":1}}],[\"将返回相同的实例\",{\"1\":{\"354\":1}}],[\"将实例存储为静态属性\",{\"1\":{\"354\":1}}],[\"将创建类型的构造函数指向animal\",{\"1\":{\"346\":2}}],[\"将创建对象的过程单独封装\",{\"1\":{\"345\":1}}],[\"将23种设计模式按照\",{\"1\":{\"328\":1}}],[\"将相关的操作组合成小的\",{\"1\":{\"326\":1}}],[\"将另一个文件添加到扩展的目录\",{\"1\":{\"317\":1}}],[\"将鼠标悬停在更多工具上\",{\"1\":{\"311\":1}}],[\"将鼠标点击的行添加到选择项\",{\"1\":{\"16\":1}}],[\"将参数添加到原数组中\",{\"1\":{\"300\":1}}],[\"将参数添加到原数组开头\",{\"1\":{\"297\":1}}],[\"将数组里的项从小到大排序\",{\"1\":{\"298\":1}}],[\"将数据和行为封装到一个函数内部\",{\"1\":{\"224\":1}}],[\"将本地~\",{\"1\":{\"285\":1}}],[\"将本机的4873端口映射到docker的4873端口\",{\"1\":{\"285\":1}}],[\"将\",{\"0\":{\"405\":1,\"412\":1,\"515\":1},\"1\":{\"276\":1,\"318\":1,\"427\":1,\"433\":1,\"442\":2,\"454\":1,\"512\":2,\"518\":1,\"519\":2,\"536\":1}}],[\"将es6转换成es5的所有插件打包\",{\"1\":{\"266\":1}}],[\"将代码定义为模块\",{\"1\":{\"247\":1}}],[\"将不同的功能封装成不同的全局函数\",{\"1\":{\"224\":2}}],[\"将单行注释放在被注释区域上面\",{\"0\":{\"149\":1}}],[\"将这一段解释为\",{\"1\":{\"122\":1}}],[\"将你的所有缩写放在对象声明的开始\",{\"0\":{\"44\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"0\":1}}],[\"将上次选择移动到下一个查找匹配项\",{\"1\":{\"15\":1}}],[\"将下一个查找匹配项添加到选择\",{\"1\":{\"15\":1}}],[\"键移动焦点\",{\"1\":{\"14\":1}}],[\"键盘快捷键\",{\"1\":{\"12\":1}}],[\"→\",{\"1\":{\"14\":1,\"16\":1,\"18\":2,\"456\":2}}],[\"←\",{\"1\":{\"14\":1,\"16\":1,\"18\":2}}],[\"h1>\",{\"1\":{\"380\":1,\"399\":1,\"410\":1,\"425\":1,\"426\":1}}],[\"href=\",{\"1\":{\"317\":2,\"319\":1}}],[\"hexliteral\",{\"1\":{\"472\":2}}],[\"hedy\",{\"1\":{\"400\":2}}],[\"helm\",{\"1\":{\"328\":1}}],[\"hello\",{\"1\":{\"320\":2,\"354\":4,\"468\":1,\"473\":1,\"475\":2,\"508\":1}}],[\"head>\",{\"1\":{\"250\":1,\"317\":2,\"319\":1,\"380\":1}}],[\"heroargs\",{\"1\":{\"177\":2}}],[\"heroes\",{\"1\":{\"177\":2}}],[\"hero\",{\"1\":{\"176\":2,\"177\":4}}],[\"here\",{\"1\":{\"152\":1,\"513\":1}}],[\"height\",{\"1\":{\"89\":5,\"94\":6,\"317\":1}}],[\"handleplayclick\",{\"1\":{\"416\":2}}],[\"handleclick\",{\"1\":{\"415\":6}}],[\"handle\",{\"1\":{\"415\":1}}],[\"handlers\",{\"1\":{\"338\":10}}],[\"handlers是一个map\",{\"1\":{\"338\":1}}],[\"handlebuttonclick\",{\"1\":{\"319\":2}}],[\"handlethings\",{\"1\":{\"75\":3,\"77\":2}}],[\"have\",{\"1\":{\"167\":2,\"346\":1,\"475\":1}}],[\"had\",{\"1\":{\"63\":3}}],[\"harper\",{\"1\":{\"55\":2}}],[\"hash\",{\"1\":{\"359\":5}}],[\"hasage\",{\"1\":{\"186\":3,\"201\":1}}],[\"hasname\",{\"1\":{\"121\":4}}],[\"has\",{\"1\":{\"46\":5,\"359\":1,\"481\":1}}],[\"hasownproperty\",{\"1\":{\"46\":4,\"80\":1,\"87\":2,\"359\":1}}],[\"htpasswd\",{\"1\":{\"282\":3,\"283\":6}}],[\"htmlcollection\",{\"1\":{\"493\":1}}],[\"html中为\",{\"1\":{\"317\":1}}],[\"html中引入\",{\"0\":{\"258\":1,\"269\":1}}],[\"html引入\",{\"1\":{\"251\":1}}],[\"html引入app\",{\"1\":{\"242\":1}}],[\"html>\",{\"1\":{\"250\":2,\"317\":4,\"319\":2,\"380\":2}}],[\"html\",{\"1\":{\"240\":1,\"249\":1,\"256\":1,\"310\":1,\"313\":2,\"317\":8,\"319\":3,\"320\":7,\"393\":1,\"395\":1,\"396\":1,\"398\":2,\"400\":1,\"401\":1,\"402\":1,\"523\":1}}],[\"html文件中引入\",{\"1\":{\"269\":1}}],[\"html文件中引入<script\",{\"1\":{\"244\":1}}],[\"html文件要运行在浏览器上\",{\"1\":{\"242\":1}}],[\"html文件\",{\"1\":{\"224\":2,\"250\":1}}],[\"htmldocument\",{\"1\":{\"34\":2}}],[\"httperror\",{\"1\":{\"513\":5}}],[\"http\",{\"1\":{\"248\":1,\"282\":2,\"283\":3,\"286\":1,\"287\":2,\"289\":2,\"290\":2,\"291\":1,\"320\":2,\"494\":1}}],[\"httprequests\",{\"1\":{\"196\":3}}],[\"httpmagicobjectwithaverylongname\",{\"1\":{\"87\":2}}],[\"httpmethod\",{\"1\":{\"87\":4}}],[\"https\",{\"1\":{\"46\":1,\"167\":2,\"248\":1,\"283\":2,\"287\":6,\"320\":3,\"380\":5,\"399\":1}}],[\"hooks\",{\"1\":{\"422\":1}}],[\"hook\",{\"0\":{\"422\":1},\"1\":{\"422\":4,\"459\":2}}],[\"hours\",{\"1\":{\"285\":1}}],[\"hoisting\",{\"0\":{\"126\":1}}],[\"how\",{\"1\":{\"63\":3,\"64\":2}}],[\"hover\",{\"1\":{\"21\":1}}],[\"horizontal\",{\"1\":{\"20\":1}}],[\"homepage\",{\"1\":{\"320\":1}}],[\"home\",{\"1\":{\"13\":2,\"22\":1,\"282\":2}}],[\"hide\",{\"1\":{\"207\":2,\"209\":5}}],[\"highlight\",{\"1\":{\"160\":3}}],[\"hints\",{\"1\":{\"17\":1}}],[\"history\",{\"1\":{\"14\":1}}],[\"h\",{\"1\":{\"15\":1,\"20\":1,\"79\":1}}],[\"tue\",{\"1\":{\"476\":6}}],[\"tuple\",{\"0\":{\"475\":1},\"1\":{\"470\":1,\"475\":1}}],[\"ts1016\",{\"1\":{\"505\":1}}],[\"ts2741\",{\"1\":{\"519\":1}}],[\"ts2693\",{\"1\":{\"513\":1}}],[\"ts2540\",{\"1\":{\"500\":2}}],[\"ts2411\",{\"1\":{\"499\":1}}],[\"ts2346\",{\"1\":{\"502\":2}}],[\"ts2339\",{\"1\":{\"488\":2,\"512\":1,\"514\":2}}],[\"ts2322\",{\"1\":{\"484\":2,\"487\":1,\"497\":1,\"498\":1,\"499\":1,\"500\":1}}],[\"tsx\",{\"1\":{\"468\":1,\"510\":2}}],[\"ts\",{\"1\":{\"468\":2,\"484\":2,\"487\":1,\"488\":2,\"497\":1,\"498\":1,\"499\":2,\"500\":3,\"502\":2,\"505\":1,\"510\":2,\"512\":1,\"513\":1,\"514\":2,\"519\":1,\"523\":13,\"526\":3,\"527\":3,\"528\":4,\"529\":3,\"530\":3,\"531\":8,\"532\":4,\"533\":1,\"534\":2,\"535\":2,\"536\":6,\"537\":3,\"538\":1,\"539\":2,\"540\":5,\"541\":5,\"542\":1,\"543\":2,\"544\":3,\"546\":2,\"547\":5,\"548\":1,\"549\":2,\"550\":2,\"551\":2}}],[\"tsconfig\",{\"1\":{\"523\":2,\"526\":2,\"536\":3}}],[\"tsc\",{\"1\":{\"468\":3}}],[\"tcp\",{\"1\":{\"285\":2}}],[\"tc39还没有到\",{\"0\":{\"214\":1}}],[\"title\",{\"1\":{\"283\":1,\"320\":2}}],[\"title>\",{\"1\":{\"250\":1,\"380\":1}}],[\"two\",{\"1\":{\"193\":2}}],[\"twojediwalkintoacantina\",{\"1\":{\"44\":2}}],[\"tdz\",{\"0\":{\"127\":1}}],[\"target\",{\"1\":{\"318\":1,\"319\":4,\"350\":1,\"482\":1,\"502\":2}}],[\"taobao\",{\"1\":{\"287\":1}}],[\"tape\",{\"1\":{\"220\":1}}],[\"tag\",{\"1\":{\"148\":5,\"150\":4,\"285\":1,\"399\":2}}],[\"take\",{\"1\":{\"88\":1}}],[\"tabid\",{\"1\":{\"318\":1}}],[\"tabs\",{\"1\":{\"318\":1,\"320\":1}}],[\"tab用两个空格\",{\"0\":{\"155\":1}}],[\"tab\",{\"1\":{\"14\":3,\"19\":2,\"149\":2,\"150\":2,\"318\":2}}],[\"teacher\",{\"1\":{\"346\":1}}],[\"tencent\",{\"1\":{\"287\":2}}],[\"textbox\",{\"1\":{\"350\":4}}],[\"textcontent\",{\"1\":{\"260\":1}}],[\"text\",{\"1\":{\"224\":5,\"244\":1,\"258\":2,\"269\":1,\"350\":5,\"380\":1}}],[\"textmessagecontainer\",{\"1\":{\"196\":2}}],[\"template\",{\"1\":{\"213\":1,\"389\":2}}],[\"temporal\",{\"0\":{\"127\":1}}],[\"testcat\",{\"1\":{\"516\":1,\"517\":1}}],[\"testanimal\",{\"1\":{\"516\":1}}],[\"test的地方使用abstractclass\",{\"1\":{\"350\":1}}],[\"testing\",{\"0\":{\"218\":1}}],[\"test\",{\"1\":{\"72\":3,\"121\":4,\"141\":3,\"142\":2,\"156\":4,\"240\":1,\"260\":1,\"291\":1,\"350\":5}}],[\"terminal\",{\"0\":{\"22\":1},\"1\":{\"22\":3}}],[\"thu\",{\"1\":{\"476\":4}}],[\"through\",{\"1\":{\"371\":4}}],[\"throw\",{\"1\":{\"350\":5,\"371\":1,\"480\":1}}],[\"throws\",{\"1\":{\"127\":3}}],[\"thrown\",{\"1\":{\"63\":3}}],[\"thing\",{\"1\":{\"197\":1}}],[\"thing3\",{\"1\":{\"142\":2}}],[\"thing2\",{\"1\":{\"142\":2}}],[\"thing1\",{\"1\":{\"142\":2,\"145\":7}}],[\"think\",{\"1\":{\"63\":3}}],[\"this绑定主要分为四种\",{\"1\":{\"273\":1}}],[\"this指向\",{\"0\":{\"271\":1}}],[\"thisismyfunction\",{\"1\":{\"189\":1}}],[\"thisismyobject\",{\"1\":{\"189\":1}}],[\"this\",{\"0\":{\"273\":1},\"1\":{\"47\":2,\"63\":6,\"66\":2,\"92\":6,\"93\":3,\"94\":6,\"95\":3,\"96\":2,\"98\":3,\"121\":2,\"149\":3,\"153\":1,\"163\":9,\"167\":2,\"182\":6,\"189\":1,\"190\":2,\"191\":4,\"192\":3,\"202\":3,\"204\":4,\"224\":2,\"237\":1,\"272\":2,\"273\":1,\"274\":12,\"275\":18,\"276\":14,\"277\":4,\"289\":1,\"290\":1,\"333\":20,\"337\":9,\"338\":10,\"346\":23,\"350\":13,\"354\":2,\"358\":6,\"363\":5,\"367\":10,\"371\":6,\"380\":4,\"529\":1,\"532\":4}}],[\"that\",{\"1\":{\"63\":3,\"88\":1,\"177\":2,\"192\":2,\"333\":2}}],[\"theme\",{\"1\":{\"459\":2}}],[\"the\",{\"1\":{\"17\":1,\"20\":1,\"37\":1,\"68\":1,\"69\":1,\"86\":3,\"88\":2,\"110\":1,\"119\":1,\"133\":2,\"148\":2,\"149\":3,\"150\":2,\"193\":2,\"282\":3,\"319\":2,\"371\":8,\"380\":1,\"400\":2,\"477\":1,\"482\":1,\"493\":1}}],[\"type可以声明\",{\"1\":{\"533\":1}}],[\"type可以声明联合类型\",{\"1\":{\"533\":1}}],[\"type可以定义基本类型别名\",{\"1\":{\"533\":1}}],[\"type=\",{\"1\":{\"224\":5,\"244\":1,\"258\":2,\"269\":1,\"380\":1}}],[\"typeerror\",{\"1\":{\"128\":1,\"129\":2,\"274\":1,\"350\":1,\"512\":2}}],[\"type\",{\"0\":{\"180\":1,\"533\":1},\"1\":{\"125\":3,\"149\":20,\"283\":1,\"346\":18,\"350\":10,\"358\":2,\"471\":2,\"475\":1,\"477\":1,\"481\":1,\"484\":4,\"487\":4,\"488\":3,\"490\":4,\"493\":2,\"497\":3,\"498\":3,\"499\":8,\"500\":3,\"509\":1,\"512\":2,\"513\":1,\"514\":2,\"519\":2,\"522\":1,\"526\":1,\"533\":21,\"534\":1}}],[\"typeof不再安全\",{\"0\":{\"127\":1}}],[\"typeof\",{\"1\":{\"34\":15,\"127\":1,\"182\":1,\"346\":2,\"354\":1,\"359\":1,\"508\":4,\"512\":2,\"513\":2,\"514\":1}}],[\"types=\",{\"1\":{\"550\":1,\"551\":1}}],[\"types的使用方式很简单\",{\"1\":{\"524\":1}}],[\"typescript官方鼓励尽可能地使用\",{\"1\":{\"478\":1}}],[\"typescript里\",{\"1\":{\"478\":1}}],[\"typescript像javascript一样可以操作数组元素\",{\"1\":{\"474\":1}}],[\"typescript数据类型\",{\"1\":{\"470\":1}}],[\"typescript支持与javascript几乎相同的数据类型\",{\"1\":{\"470\":1}}],[\"typescript\",{\"0\":{\"464\":2,\"467\":1,\"468\":1},\"1\":{\"462\":1,\"467\":1,\"468\":5,\"479\":1,\"484\":1,\"486\":2,\"488\":1,\"489\":1,\"493\":1,\"495\":1,\"496\":1,\"502\":1,\"503\":2,\"506\":1,\"508\":1,\"512\":3,\"513\":1,\"514\":6,\"515\":1,\"516\":4,\"518\":1,\"533\":1}}],[\"types\",{\"0\":{\"31\":1},\"1\":{\"487\":1,\"524\":2,\"526\":1,\"533\":1,\"536\":12,\"537\":1,\"538\":1,\"539\":1,\"540\":4,\"541\":1,\"543\":2,\"544\":1,\"546\":1,\"547\":2,\"548\":1,\"550\":1,\"551\":1}}],[\"tree\",{\"1\":{\"283\":1}}],[\"tron\",{\"1\":{\"160\":2}}],[\"translations\",{\"1\":{\"283\":1}}],[\"transform\",{\"1\":{\"160\":2}}],[\"trailing\",{\"1\":{\"17\":1}}],[\"truth\",{\"0\":{\"135\":1}}],[\"truthycount++\",{\"1\":{\"123\":1}}],[\"truthycount\",{\"1\":{\"123\":2}}],[\"true\",{\"1\":{\"34\":15,\"37\":2,\"41\":2,\"86\":5,\"94\":4,\"114\":1,\"115\":1,\"119\":3,\"120\":3,\"127\":3,\"133\":4,\"134\":1,\"138\":2,\"149\":2,\"150\":2,\"160\":2,\"168\":2,\"216\":3,\"217\":2,\"219\":1,\"283\":2,\"308\":1,\"309\":1,\"318\":2,\"320\":1,\"354\":4,\"363\":1,\"475\":1,\"476\":8,\"480\":1,\"487\":1,\"512\":2,\"513\":4,\"518\":1,\"532\":2}}],[\"try\",{\"1\":{\"119\":1,\"371\":1,\"380\":1,\"482\":1}}],[\"trim\",{\"1\":{\"17\":1}}],[\"trigger\",{\"1\":{\"17\":2,\"204\":2}}],[\"t\",{\"1\":{\"14\":1,\"19\":1,\"88\":1,\"152\":1,\"380\":1,\"477\":2,\"520\":1}}],[\"tolu\",{\"1\":{\"533\":1}}],[\"toboolean\",{\"1\":{\"518\":6}}],[\"tofixed\",{\"1\":{\"477\":4}}],[\"toolbar\",{\"1\":{\"416\":1,\"418\":3}}],[\"tomcat\",{\"1\":{\"505\":2,\"506\":2}}],[\"tome\",{\"1\":{\"479\":1}}],[\"tom\",{\"1\":{\"250\":1,\"251\":1,\"294\":2,\"295\":1,\"296\":2,\"297\":1,\"473\":2,\"497\":6,\"498\":6,\"499\":7,\"500\":8,\"505\":6,\"506\":5,\"512\":3,\"515\":5,\"516\":4,\"519\":23,\"520\":6,\"529\":1,\"537\":1}}],[\"touppercase\",{\"1\":{\"250\":1}}],[\"today\",{\"1\":{\"163\":6}}],[\"todos`\",{\"1\":{\"456\":1}}],[\"todos\",{\"1\":{\"456\":1}}],[\"todolist\",{\"1\":{\"400\":1,\"456\":1}}],[\"todo\",{\"1\":{\"153\":1,\"514\":1,\"516\":3,\"533\":3}}],[\"totalscore\",{\"1\":{\"182\":5}}],[\"total\",{\"1\":{\"110\":2,\"152\":1,\"153\":2}}],[\"tostring\",{\"1\":{\"34\":16,\"95\":1,\"182\":1,\"475\":2,\"488\":1,\"508\":2}}],[\"top\",{\"1\":{\"22\":1,\"60\":4}}],[\"toggle\",{\"1\":{\"13\":3,\"14\":1,\"15\":1,\"20\":5,\"21\":1}}],[\"to\",{\"1\":{\"12\":1,\"13\":4,\"14\":5,\"15\":2,\"17\":2,\"20\":2,\"22\":1,\"63\":6,\"69\":1,\"88\":1,\"119\":2,\"149\":3,\"197\":1,\"282\":1,\"314\":1,\"380\":3,\"399\":2,\"471\":1,\"482\":2,\"484\":2,\"487\":2,\"490\":2,\"497\":1,\"498\":1,\"499\":4,\"500\":3,\"513\":1,\"523\":1,\"526\":1,\"527\":1,\"536\":1}}],[\"wed\",{\"1\":{\"476\":4}}],[\"weakmap\",{\"1\":{\"359\":1}}],[\"website\",{\"1\":{\"494\":1}}],[\"web请求\",{\"1\":{\"320\":1}}],[\"webrequestblocking\",{\"1\":{\"320\":1}}],[\"webrequest\",{\"1\":{\"320\":1}}],[\"web\",{\"1\":{\"283\":2,\"310\":1,\"320\":1,\"378\":1,\"386\":1}}],[\"we\",{\"1\":{\"88\":1}}],[\"welcome\",{\"1\":{\"69\":1}}],[\"world<\",{\"1\":{\"380\":1}}],[\"world\",{\"1\":{\"320\":2,\"354\":4,\"380\":1,\"475\":1}}],[\"worker\",{\"1\":{\"312\":2,\"315\":1,\"316\":2,\"317\":5,\"346\":6}}],[\"word\",{\"1\":{\"13\":1,\"15\":1,\"16\":1}}],[\"would\",{\"1\":{\"63\":3}}],[\"will\",{\"1\":{\"257\":1}}],[\"width\",{\"1\":{\"160\":2,\"317\":1,\"398\":1}}],[\"within\",{\"1\":{\"197\":1}}],[\"with\",{\"1\":{\"63\":3,\"88\":1,\"197\":1,\"204\":2,\"317\":1,\"380\":3,\"533\":1}}],[\"window\",{\"1\":{\"12\":2,\"19\":1,\"34\":5,\"224\":6,\"274\":2,\"486\":2,\"514\":7,\"515\":2,\"519\":2,\"520\":2}}],[\"way\",{\"1\":{\"380\":1}}],[\"warn\",{\"1\":{\"282\":1}}],[\"warning\",{\"1\":{\"14\":2}}],[\"wat\",{\"1\":{\"112\":1}}],[\"want\",{\"1\":{\"88\":1}}],[\"was\",{\"1\":{\"63\":3}}],[\"www\",{\"1\":{\"46\":1,\"224\":3,\"248\":1,\"250\":1,\"318\":1,\"320\":1}}],[\"who\",{\"1\":{\"290\":1}}],[\"whole\",{\"1\":{\"15\":1}}],[\"white\",{\"1\":{\"317\":1}}],[\"whitespace\",{\"0\":{\"154\":1},\"1\":{\"17\":1}}],[\"while\",{\"0\":{\"145\":1,\"157\":1},\"1\":{\"480\":1}}],[\"when\",{\"1\":{\"63\":3,\"471\":1}}],[\"why\",{\"1\":{\"36\":1,\"37\":1,\"41\":1,\"44\":1,\"45\":1,\"46\":1,\"58\":1,\"60\":1,\"63\":1,\"64\":1,\"66\":1,\"68\":1,\"69\":3,\"74\":1,\"76\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"85\":2,\"86\":1,\"87\":1,\"88\":1,\"92\":1,\"93\":1,\"97\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"110\":2,\"111\":1,\"112\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"136\":1,\"139\":1,\"145\":1,\"167\":1,\"177\":1,\"179\":1,\"191\":1,\"196\":1,\"197\":1,\"214\":1,\"216\":1,\"217\":1}}],[\"w\",{\"1\":{\"15\":1,\"18\":1,\"19\":1}}],[\"wrapper\",{\"1\":{\"338\":3,\"471\":1}}],[\"wrap\",{\"1\":{\"13\":1}}],[\"zara\",{\"1\":{\"399\":2}}],[\"zhangsan\",{\"1\":{\"359\":3}}],[\"zh\",{\"1\":{\"320\":1}}],[\"zoo\",{\"1\":{\"485\":3}}],[\"zoom\",{\"1\":{\"20\":1}}],[\"zones\",{\"0\":{\"127\":1}}],[\"zen\",{\"1\":{\"20\":1}}],[\"z\",{\"1\":{\"13\":1,\"20\":1,\"119\":3,\"125\":3,\"143\":2}}],[\"jpg\",{\"1\":{\"320\":1,\"399\":1}}],[\"jquerystatic\",{\"1\":{\"544\":1}}],[\"jquery\",{\"1\":{\"224\":2,\"251\":3,\"269\":2,\"320\":1,\"523\":19,\"524\":2,\"526\":4,\"527\":12,\"528\":9,\"531\":12,\"532\":8,\"534\":5,\"535\":8,\"544\":4,\"550\":5}}],[\"jquery对象用$变量表示\",{\"0\":{\"206\":1}}],[\"jquery对象\",{\"0\":{\"205\":1}}],[\"johnson\",{\"1\":{\"328\":1}}],[\"john\",{\"1\":{\"167\":2,\"328\":1,\"371\":1}}],[\"join\",{\"0\":{\"293\":1},\"1\":{\"64\":1,\"74\":2,\"293\":2,\"493\":1,\"508\":4}}],[\"jedi\",{\"1\":{\"94\":5,\"95\":1,\"96\":3,\"114\":3,\"115\":2,\"202\":1}}],[\"jane\",{\"1\":{\"371\":1}}],[\"janeway`\",{\"1\":{\"62\":1}}],[\"janeway\",{\"1\":{\"62\":2}}],[\"java\",{\"1\":{\"342\":1}}],[\"javascript\",{\"0\":{\"30\":1,\"34\":1,\"135\":1,\"399\":1},\"1\":{\"122\":1,\"179\":1,\"191\":1,\"214\":1,\"224\":5,\"244\":1,\"252\":1,\"258\":2,\"269\":1,\"310\":1,\"321\":1,\"357\":1,\"393\":2,\"396\":1,\"398\":3,\"399\":2,\"400\":1,\"401\":1,\"408\":1,\"415\":1,\"427\":1,\"428\":1,\"460\":1,\"467\":1,\"479\":1,\"502\":1,\"513\":1}}],[\"jack\",{\"1\":{\"294\":2,\"295\":1,\"296\":2,\"297\":1}}],[\"jsx\",{\"0\":{\"393\":1,\"394\":1,\"396\":1,\"399\":1,\"400\":1,\"404\":1,\"405\":1,\"408\":1},\"1\":{\"380\":3,\"393\":2,\"396\":2,\"398\":2,\"399\":3,\"400\":3,\"404\":1,\"405\":1,\"408\":1,\"409\":1,\"411\":2,\"414\":1,\"415\":1,\"417\":1,\"436\":1,\"452\":1,\"510\":1}}],[\"js的注入可以随便一点\",{\"1\":{\"320\":1}}],[\"js的模块代码\",{\"0\":{\"250\":1,\"257\":1}}],[\"js包含一个脚本标记\",{\"1\":{\"317\":1}}],[\"js实例\",{\"1\":{\"286\":1}}],[\"js应用程序的生产过程管理器\",{\"1\":{\"286\":1}}],[\"js版本\",{\"1\":{\"283\":1}}],[\"js中运行\",{\"1\":{\"270\":1}}],[\"js简单使用教程\",{\"0\":{\"254\":1}}],[\"js并指定js主文件的入口\",{\"1\":{\"250\":1}}],[\"js导入项目\",{\"1\":{\"248\":1,\"255\":1}}],[\"js主要用于服务器编程\",{\"1\":{\"245\":1}}],[\"js就会报错\",{\"1\":{\"242\":1}}],[\"json将需要\",{\"1\":{\"318\":1}}],[\"json中注册选项页面\",{\"1\":{\"319\":1}}],[\"json中的\",{\"1\":{\"317\":1}}],[\"json中声明\",{\"1\":{\"317\":1}}],[\"json文件\",{\"0\":{\"265\":1}}],[\"json\",{\"1\":{\"235\":1,\"240\":1,\"311\":1,\"313\":1,\"315\":1,\"317\":1,\"481\":1,\"482\":1,\"523\":2,\"526\":2,\"536\":4}}],[\"json时\",{\"1\":{\"235\":1}}],[\"jsondata\",{\"1\":{\"167\":12}}],[\"js模块\",{\"0\":{\"251\":1}}],[\"js模块内部的变化就影响不到counter了\",{\"1\":{\"232\":1}}],[\"js模块化详解\",{\"0\":{\"221\":1}}],[\"js文件中引入\",{\"1\":{\"269\":1}}],[\"js文件中引入jquery第三方库\",{\"1\":{\"251\":1}}],[\"js文件也要有相应的路径配置\",{\"1\":{\"251\":1}}],[\"js文件打包编译\",{\"1\":{\"242\":1}}],[\"js文件\",{\"1\":{\"224\":2,\"237\":1,\"250\":3,\"251\":2,\"257\":5,\"268\":4,\"269\":1}}],[\"jsperf\",{\"0\":{\"208\":1}}],[\"js里写webpack\",{\"1\":{\"108\":1}}],[\"js\",{\"0\":{\"234\":1,\"238\":1,\"247\":1,\"248\":1,\"255\":1,\"383\":1,\"391\":1},\"1\":{\"34\":1,\"45\":1,\"102\":2,\"193\":2,\"224\":3,\"231\":2,\"232\":2,\"235\":4,\"237\":3,\"238\":1,\"240\":5,\"243\":4,\"244\":2,\"248\":2,\"249\":5,\"250\":5,\"251\":5,\"252\":1,\"255\":2,\"256\":7,\"258\":3,\"260\":3,\"263\":2,\"269\":8,\"286\":3,\"312\":1,\"313\":3,\"314\":2,\"315\":1,\"317\":5,\"318\":1,\"319\":2,\"320\":12,\"380\":3,\"383\":2,\"391\":3,\"442\":3}}],[\"j\",{\"1\":{\"13\":1,\"20\":1}}],[\"jumping\",{\"1\":{\"94\":2}}],[\"jump\",{\"1\":{\"13\":1,\"94\":4}}],[\"0o744\",{\"1\":{\"472\":2}}],[\"0b1010\",{\"1\":{\"472\":2}}],[\"0xf00d\",{\"1\":{\"472\":2}}],[\"0之前的node\",{\"1\":{\"283\":1}}],[\"0\",{\"1\":{\"13\":1,\"20\":1,\"33\":3,\"51\":1,\"53\":1,\"55\":2,\"56\":2,\"59\":1,\"75\":1,\"92\":4,\"93\":2,\"110\":4,\"123\":4,\"125\":1,\"133\":2,\"134\":1,\"139\":6,\"152\":1,\"153\":1,\"165\":2,\"168\":2,\"183\":1,\"184\":1,\"185\":3,\"186\":1,\"235\":2,\"240\":2,\"260\":1,\"265\":2,\"282\":1,\"283\":5,\"285\":4,\"286\":4,\"302\":5,\"303\":1,\"304\":1,\"307\":1,\"311\":1,\"312\":1,\"315\":1,\"317\":9,\"320\":2,\"375\":3,\"403\":1,\"408\":6,\"422\":1,\"425\":5,\"426\":1,\"445\":1,\"475\":1,\"476\":4,\"485\":1,\"513\":2,\"533\":1}}],[\"展开语法传递\",{\"0\":{\"404\":1},\"1\":{\"404\":1}}],[\"展开全部区域\",{\"1\":{\"13\":2}}],[\"展开\",{\"1\":{\"13\":1}}],[\"折叠全部区域\",{\"1\":{\"13\":2}}],[\"折叠\",{\"1\":{\"13\":1}}],[\"行为型\",{\"1\":{\"328\":1}}],[\"行为一致性\",{\"1\":{\"325\":1}}],[\"行首加分号\",{\"1\":{\"179\":1}}],[\"行末不要空格\",{\"0\":{\"173\":1}}],[\"行跳转\",{\"1\":{\"14\":1}}],[\"行注释\",{\"1\":{\"13\":1}}],[\"行上下滚动\",{\"1\":{\"13\":1}}],[\"行尾\",{\"1\":{\"13\":1}}],[\"行缩进\",{\"1\":{\"13\":1}}],[\"olleh\",{\"1\":{\"508\":1}}],[\"old\",{\"1\":{\"473\":2}}],[\"octalliteral\",{\"1\":{\"472\":2}}],[\"occurrences\",{\"1\":{\"16\":2}}],[\"occurences\",{\"1\":{\"15\":1}}],[\"omnibox\",{\"1\":{\"320\":1}}],[\"observer2\",{\"1\":{\"337\":3}}],[\"observer1\",{\"1\":{\"337\":3}}],[\"observers\",{\"1\":{\"337\":5}}],[\"observer\",{\"1\":{\"336\":1,\"337\":9}}],[\"obviously\",{\"1\":{\"197\":1}}],[\"obj2\",{\"1\":{\"172\":1,\"275\":3}}],[\"obj\",{\"1\":{\"41\":3,\"43\":2,\"44\":2,\"80\":5,\"161\":4,\"170\":6,\"172\":2,\"275\":14,\"276\":15,\"359\":20,\"427\":1}}],[\"object类型的变量只是允许你给它赋任意值\",{\"1\":{\"477\":1}}],[\"object有相似的作用\",{\"1\":{\"477\":1}}],[\"objecttsssss\",{\"1\":{\"189\":1}}],[\"objectinarray\",{\"1\":{\"56\":2}}],[\"objects\",{\"0\":{\"39\":1},\"1\":{\"133\":1}}],[\"object\",{\"1\":{\"33\":1,\"34\":42,\"40\":1,\"46\":5,\"47\":2,\"80\":1,\"87\":2,\"110\":3,\"182\":1,\"189\":1,\"197\":1,\"213\":3,\"350\":4,\"354\":3,\"357\":1,\"358\":2,\"359\":1,\"471\":1,\"477\":2,\"493\":1,\"498\":1,\"532\":2,\"533\":2}}],[\"otherfun\",{\"1\":{\"224\":6}}],[\"other\",{\"1\":{\"103\":1,\"193\":1,\"224\":2}}],[\"okay\",{\"1\":{\"477\":3}}],[\"ok\",{\"1\":{\"100\":1,\"475\":4}}],[\"only\",{\"1\":{\"498\":1,\"500\":2,\"513\":1,\"527\":1,\"533\":1}}],[\"onmousedown函数的类型来推断右边函数表达式的类型\",{\"1\":{\"486\":1}}],[\"onmousedown\",{\"1\":{\"486\":2}}],[\"onsubmit=\",{\"1\":{\"420\":1}}],[\"onscroll\",{\"1\":{\"417\":1}}],[\"on方法用于安装事件监听器\",{\"1\":{\"338\":1}}],[\"onconnected\",{\"1\":{\"459\":1}}],[\"onclickcapture\",{\"1\":{\"419\":1}}],[\"onclickcapture=\",{\"1\":{\"419\":1}}],[\"onclick事件处理函数也可作为\",{\"1\":{\"416\":1}}],[\"onclick=\",{\"1\":{\"415\":4,\"416\":3,\"418\":4,\"419\":2,\"425\":1,\"426\":1}}],[\"onclick\",{\"1\":{\"319\":1,\"363\":5,\"415\":1,\"416\":2,\"418\":2,\"419\":2}}],[\"once\",{\"1\":{\"176\":2,\"338\":2}}],[\"oninstalled\",{\"1\":{\"314\":2}}],[\"oninstalled的监听事件\",{\"1\":{\"314\":1}}],[\"on\",{\"1\":{\"88\":1,\"148\":2,\"150\":2,\"204\":2,\"289\":2,\"290\":2,\"338\":2,\"367\":8,\"400\":1,\"477\":1,\"488\":3,\"512\":2,\"514\":2}}],[\"optional\",{\"1\":{\"505\":1}}],[\"option\",{\"0\":{\"88\":1},\"1\":{\"482\":1}}],[\"options\",{\"0\":{\"319\":1},\"1\":{\"73\":2,\"95\":2,\"153\":1,\"190\":4,\"202\":2,\"310\":1,\"313\":2,\"319\":8,\"320\":4,\"537\":4,\"538\":2,\"544\":1,\"550\":1}}],[\"opts\",{\"1\":{\"75\":8,\"77\":2}}],[\"operator\",{\"1\":{\"213\":1}}],[\"operators\",{\"0\":{\"131\":1}}],[\"operation\",{\"1\":{\"16\":1}}],[\"openbutton\",{\"1\":{\"363\":5}}],[\"opened\",{\"1\":{\"322\":1}}],[\"open\",{\"1\":{\"12\":1,\"17\":1,\"19\":4,\"20\":2,\"160\":3,\"363\":7}}],[\"oops\",{\"1\":{\"60\":1}}],[\"overrides\",{\"1\":{\"320\":1}}],[\"over\",{\"1\":{\"21\":1}}],[\"outline\",{\"1\":{\"317\":1}}],[\"output\",{\"1\":{\"20\":1}}],[\"out\",{\"1\":{\"20\":1,\"21\":1}}],[\"outdent\",{\"1\":{\"13\":1}}],[\"org\",{\"1\":{\"255\":1,\"283\":1,\"285\":1,\"287\":2}}],[\"original\",{\"1\":{\"47\":6}}],[\"or\",{\"1\":{\"14\":2,\"18\":1,\"46\":1,\"133\":1,\"320\":1,\"482\":1,\"500\":2,\"523\":1,\"527\":1,\"533\":1}}],[\"o\",{\"1\":{\"14\":1,\"19\":2,\"243\":1,\"269\":1}}],[\"off\",{\"1\":{\"338\":2}}],[\"of\",{\"0\":{\"110\":1},\"1\":{\"13\":3,\"15\":1,\"16\":3,\"19\":1,\"63\":3,\"110\":1,\"133\":1,\"274\":1,\"319\":1,\"327\":1,\"359\":2,\"380\":1,\"490\":2,\"499\":1,\"502\":2,\"533\":1}}],[\"mk\",{\"1\":{\"333\":5}}],[\"missing\",{\"1\":{\"493\":1,\"497\":1,\"500\":1,\"519\":1}}],[\"mistake\",{\"1\":{\"119\":1}}],[\"might\",{\"1\":{\"477\":1}}],[\"min\",{\"1\":{\"380\":1}}],[\"minutes\",{\"1\":{\"285\":2}}],[\"mirrors\",{\"1\":{\"287\":1}}],[\"middlewares\",{\"1\":{\"283\":1}}],[\"m4\",{\"1\":{\"253\":2,\"257\":2}}],[\"m3\",{\"1\":{\"253\":1,\"257\":2}}],[\"m2\",{\"1\":{\"224\":1,\"246\":3}}],[\"m1\",{\"1\":{\"224\":1,\"246\":2,\"253\":2,\"257\":2}}],[\"mysearch\",{\"1\":{\"504\":2}}],[\"mysum\",{\"1\":{\"502\":1,\"503\":4}}],[\"myfavoritenumber\",{\"1\":{\"484\":7,\"487\":7,\"488\":7}}],[\"myage\",{\"1\":{\"473\":4}}],[\"myapp\",{\"1\":{\"380\":1}}],[\"myname\",{\"1\":{\"473\":4,\"537\":1}}],[\"mycomponent\",{\"1\":{\"453\":1,\"454\":1}}],[\"myinput\",{\"1\":{\"448\":2}}],[\"mymodule\",{\"1\":{\"224\":11}}],[\"my\",{\"1\":{\"189\":1,\"388\":1,\"473\":2,\"479\":1}}],[\"members\",{\"1\":{\"533\":1}}],[\"messages<\",{\"1\":{\"408\":2}}],[\"messagecount\",{\"1\":{\"408\":3}}],[\"message\",{\"1\":{\"371\":1,\"480\":2}}],[\"method\",{\"1\":{\"167\":2,\"350\":2,\"354\":4,\"534\":2}}],[\"me\",{\"1\":{\"69\":1}}],[\"msg\",{\"1\":{\"55\":4,\"237\":2,\"250\":2,\"257\":2}}],[\"mui\",{\"1\":{\"462\":1}}],[\"musicplayeradapter\",{\"1\":{\"367\":7}}],[\"must\",{\"1\":{\"177\":2,\"350\":2}}],[\"mutates\",{\"1\":{\"47\":1}}],[\"multi\",{\"0\":{\"16\":1}}],[\"male\",{\"1\":{\"498\":1,\"499\":4,\"500\":2}}],[\"manifest\",{\"0\":{\"311\":1},\"1\":{\"311\":2,\"312\":1,\"313\":1,\"315\":2,\"317\":3,\"320\":1}}],[\"management\",{\"0\":{\"18\":1,\"19\":1}}],[\"master\",{\"1\":{\"283\":1,\"285\":2}}],[\"main=\",{\"1\":{\"250\":1,\"251\":1}}],[\"main\",{\"1\":{\"232\":1,\"249\":1,\"250\":2,\"251\":3,\"256\":1,\"257\":1,\"258\":1,\"263\":1}}],[\"martin提出\",{\"1\":{\"327\":1}}],[\"martin\",{\"1\":{\"326\":1}}],[\"martin的著作\",{\"1\":{\"324\":1}}],[\"martin在其著作\",{\"1\":{\"323\":1}}],[\"margin\",{\"1\":{\"160\":6,\"317\":1}}],[\"markdown\",{\"1\":{\"20\":4}}],[\"makestyleguide\",{\"1\":{\"194\":2}}],[\"make\",{\"1\":{\"148\":4,\"150\":4,\"333\":2}}],[\"may\",{\"1\":{\"498\":1}}],[\"maybe\",{\"1\":{\"477\":1}}],[\"maybenull\",{\"1\":{\"137\":4}}],[\"maybe2\",{\"1\":{\"137\":3}}],[\"maybe1\",{\"1\":{\"137\":3}}],[\"maythefourth\",{\"1\":{\"44\":2}}],[\"max\",{\"0\":{\"124\":1},\"1\":{\"167\":1,\"283\":4}}],[\"math\",{\"1\":{\"116\":1,\"260\":2,\"358\":1}}],[\"matches\",{\"1\":{\"320\":3}}],[\"match\",{\"1\":{\"15\":3,\"502\":2}}],[\"matching\",{\"1\":{\"13\":1}}],[\"mapping\",{\"1\":{\"197\":2}}],[\"map\",{\"0\":{\"306\":1},\"1\":{\"54\":1,\"55\":2,\"85\":2,\"86\":4,\"87\":2,\"88\":6,\"110\":2,\"306\":1,\"359\":4,\"410\":3,\"428\":1,\"447\":1}}],[\"moment\",{\"1\":{\"547\":9,\"548\":7}}],[\"more\",{\"1\":{\"493\":1}}],[\"mon\",{\"1\":{\"476\":6}}],[\"month\",{\"1\":{\"473\":2}}],[\"monitor\",{\"1\":{\"286\":1}}],[\"moviename=\",{\"1\":{\"416\":1}}],[\"moviename\",{\"1\":{\"416\":3}}],[\"moves\",{\"1\":{\"14\":1}}],[\"move\",{\"1\":{\"13\":1,\"15\":1,\"18\":2}}],[\"mochastate\",{\"1\":{\"333\":2}}],[\"mocha\",{\"1\":{\"220\":1,\"333\":1}}],[\"mock\",{\"1\":{\"220\":1}}],[\"mockingbird\",{\"1\":{\"55\":2}}],[\"mountain\",{\"1\":{\"156\":2}}],[\"mouseevent参数的类型需要指定为any\",{\"1\":{\"486\":1}}],[\"mouseevent参数的类型了\",{\"1\":{\"486\":1}}],[\"mouseevent\",{\"1\":{\"486\":4}}],[\"mouse\",{\"1\":{\"16\":1}}],[\"modal\",{\"1\":{\"363\":3}}],[\"module4\",{\"1\":{\"253\":1,\"256\":1,\"257\":3}}],[\"module3\",{\"1\":{\"235\":1,\"237\":7,\"240\":1,\"253\":1,\"256\":1,\"257\":2,\"268\":4,\"269\":3}}],[\"module2\",{\"1\":{\"235\":1,\"237\":6,\"240\":1,\"246\":2,\"253\":2,\"256\":1,\"257\":4,\"268\":4,\"269\":1}}],[\"module1\",{\"1\":{\"235\":1,\"237\":6,\"240\":1,\"246\":2,\"253\":1,\"256\":1,\"257\":3,\"268\":4,\"269\":1}}],[\"module变量代表当前模块\",{\"1\":{\"231\":1}}],[\"module\",{\"1\":{\"100\":1,\"224\":4,\"231\":3,\"232\":1,\"237\":2,\"253\":3,\"257\":5,\"522\":1,\"531\":3,\"536\":2,\"541\":1,\"547\":5,\"548\":2}}],[\"modules\",{\"0\":{\"99\":1},\"1\":{\"213\":1,\"235\":1,\"237\":3,\"249\":1,\"250\":2,\"251\":2,\"256\":1,\"258\":1,\"536\":2}}],[\"modern\",{\"1\":{\"177\":2}}],[\"mode\",{\"1\":{\"19\":1,\"20\":1}}],[\"m\",{\"1\":{\"14\":2,\"17\":1}}],[\"在另一个场景下\",{\"1\":{\"551\":1}}],[\"在全局变量的声明文件中\",{\"1\":{\"550\":1}}],[\"在早期版本中为了描述模块之间的依赖关系而创造的语法\",{\"1\":{\"549\":1}}],[\"在早期还没有\",{\"1\":{\"531\":1}}],[\"在类型声明文件中\",{\"1\":{\"540\":1}}],[\"在我们尝试给一个\",{\"1\":{\"536\":1}}],[\"在所有的声明语句中\",{\"1\":{\"527\":1}}],[\"在不同的场景下\",{\"1\":{\"525\":1}}],[\"在不同工厂中生产\",{\"1\":{\"350\":1}}],[\"在编译结果中会被删除\",{\"1\":{\"523\":1}}],[\"在编辑器的代码提示中\",{\"1\":{\"508\":1}}],[\"在接下来的代码中都变成了\",{\"1\":{\"519\":1}}],[\"在判断类型的兼容性时\",{\"1\":{\"516\":1}}],[\"在日常的开发中\",{\"1\":{\"515\":1}}],[\"在报错信息中可以看出\",{\"1\":{\"499\":1}}],[\"在面向对象语言中\",{\"1\":{\"496\":1}}],[\"在面向对象设计中\",{\"1\":{\"325\":1}}],[\"在有些没有明确指出类型的地方\",{\"1\":{\"484\":1}}],[\"在对现有代码进行改写的时候\",{\"1\":{\"477\":1}}],[\"在对象的字面量属性中\",{\"0\":{\"172\":1}}],[\"在每次挂载组件后都会重新挂载组件\",{\"1\":{\"457\":1}}],[\"在生产环境中\",{\"1\":{\"456\":1}}],[\"在生产环境中进行监控\",{\"1\":{\"286\":1}}],[\"在useeffect\",{\"1\":{\"455\":1}}],[\"在多次挂载不会产生bug\",{\"1\":{\"452\":1}}],[\"在开发环境中\",{\"1\":{\"452\":1,\"456\":1}}],[\"在更新\",{\"1\":{\"450\":1}}],[\"在提交阶段设置\",{\"1\":{\"450\":1}}],[\"在渲染更新的过程中\",{\"1\":{\"450\":1}}],[\"在渲染期间访问\",{\"1\":{\"450\":1}}],[\"在重新渲染之间由\",{\"1\":{\"445\":1}}],[\"在重写对象原型时一般都需要重新给\",{\"1\":{\"34\":1}}],[\"在指定数据的组件中使用\",{\"1\":{\"442\":1}}],[\"在需要数据的组件内\",{\"1\":{\"442\":1}}],[\"在需要的时候分配\",{\"1\":{\"121\":1}}],[\"在是在渲染时运行的\",{\"1\":{\"441\":1}}],[\"在使用这个\",{\"1\":{\"534\":1}}],[\"在使用\",{\"1\":{\"440\":1}}],[\"在使用子类时出现问题\",{\"1\":{\"325\":1}}],[\"在相同位置重置\",{\"0\":{\"437\":1}}],[\"在组件中使用\",{\"0\":{\"439\":1},\"1\":{\"439\":1}}],[\"在组件间共享状态\",{\"0\":{\"432\":1}}],[\"在组件顶部\",{\"1\":{\"422\":1}}],[\"在下次渲染前多次更新同一个\",{\"0\":{\"426\":1}}],[\"在下面插入行\",{\"1\":{\"13\":1}}],[\"在事件处理函数中读取\",{\"0\":{\"416\":1}}],[\"在第一次渲染期间\",{\"1\":{\"450\":1}}],[\"在第一次渲染的事件处理函数内部的\",{\"1\":{\"425\":1}}],[\"在第一个示例中\",{\"1\":{\"415\":1}}],[\"在第二个示例中\",{\"1\":{\"415\":1}}],[\"在子类中添加方法\",{\"1\":{\"358\":1}}],[\"在原型模式下\",{\"1\":{\"357\":1}}],[\"在写了大量构造函数\",{\"1\":{\"345\":1}}],[\"在于它的概念相对好理解\",{\"1\":{\"345\":1}}],[\"在于是否存在第三方\",{\"1\":{\"339\":1}}],[\"在这些情况下\",{\"1\":{\"442\":1}}],[\"在这种情况下\",{\"1\":{\"440\":1}}],[\"在这个例子中有一个更合适的方式来判断是不是\",{\"1\":{\"513\":1}}],[\"在这个例子中\",{\"1\":{\"493\":1,\"519\":1}}],[\"在这个例子中就是\",{\"1\":{\"439\":1}}],[\"在这个过程中\",{\"1\":{\"429\":1}}],[\"在这个阶段\",{\"1\":{\"429\":3}}],[\"在这本书中\",{\"1\":{\"328\":1}}],[\"在这里需要特别注意的是\",{\"1\":{\"34\":1}}],[\"在javascript设计模式中\",{\"1\":{\"327\":1}}],[\"在设计一个图形用户界面时\",{\"1\":{\"327\":1}}],[\"在实际编程中\",{\"1\":{\"323\":1}}],[\"在此处下载图像文件夹\",{\"1\":{\"317\":1}}],[\"在扩展程序的弹出窗口中显示它\",{\"1\":{\"317\":1}}],[\"在扩展的目录中创建一个名为\",{\"1\":{\"314\":1}}],[\"在清单中注册后台脚本告诉扩展要引用哪个文件\",{\"1\":{\"312\":1}}],[\"在清单中注册后台脚本\",{\"0\":{\"312\":1}}],[\"在只有一个参数的情况下\",{\"1\":{\"301\":1}}],[\"在没有给\",{\"1\":{\"300\":1}}],[\"在虚拟器中运行docker\",{\"1\":{\"285\":1}}],[\"在后台开启docker进程\",{\"1\":{\"285\":1}}],[\"在auth=>htpasswd添加max\",{\"1\":{\"283\":1}}],[\"在终端中输入\",{\"1\":{\"282\":1}}],[\"在语言标准的层面上\",{\"1\":{\"270\":1}}],[\"在语句开始执行强制类型转换\",{\"0\":{\"181\":1}}],[\"在代码静态解析阶段就会生成\",{\"1\":{\"263\":1}}],[\"在index\",{\"0\":{\"258\":1},\"1\":{\"244\":1,\"251\":1}}],[\"在import语句里不允许webpack\",{\"0\":{\"108\":1}}],[\"在浏览器端\",{\"1\":{\"229\":1}}],[\"在服务器端\",{\"1\":{\"229\":1}}],[\"在大多数情况下更好\",{\"1\":{\"197\":1}}],[\"在大括号前空一格\",{\"0\":{\"156\":1}}],[\"在文件末尾只允许空一行\",{\"0\":{\"174\":1}}],[\"在函数类型的声明语句中\",{\"1\":{\"528\":1}}],[\"在函数调用和定义时\",{\"0\":{\"157\":1}}],[\"在函数的声明中\",{\"1\":{\"70\":1}}],[\"在控制语句\",{\"0\":{\"157\":1}}],[\"在你的组件里应该写成\",{\"1\":{\"400\":1}}],[\"在你的注释前使用fixme\",{\"0\":{\"151\":1}}],[\"在你自己的组件中\",{\"1\":{\"398\":1}}],[\"在你引用的地方之后声明一个变量\",{\"1\":{\"127\":1}}],[\"在你需要的地方声明变量\",{\"0\":{\"121\":1}}],[\"在你需要分配一个新的变量\",{\"1\":{\"120\":1}}],[\"在\",{\"0\":{\"136\":1,\"399\":1,\"545\":1},\"1\":{\"124\":1,\"220\":1,\"252\":1,\"314\":1,\"317\":1,\"357\":1,\"398\":1,\"399\":1,\"408\":1,\"409\":1,\"417\":1,\"421\":1,\"450\":3,\"452\":2,\"457\":1,\"460\":1,\"479\":1,\"489\":1,\"495\":1,\"502\":1,\"503\":2,\"506\":1,\"510\":2,\"514\":1,\"525\":1,\"531\":1,\"537\":1,\"540\":1,\"541\":2}}],[\"在赋值的时候避免在\",{\"0\":{\"124\":1}}],[\"在一些情况下\",{\"1\":{\"409\":1}}],[\"在一些有问题的对象上\",{\"1\":{\"46\":1}}],[\"在一个文件里面定义的变量\",{\"1\":{\"229\":1}}],[\"在一个代码块后下一条语句前空一行\",{\"0\":{\"161\":1}}],[\"在一个单一导出模块里\",{\"0\":{\"105\":1}}],[\"在隐式绑定规则中\",{\"1\":{\"275\":1}}],[\"在隐式\",{\"0\":{\"90\":1}}],[\"在回调函数里\",{\"0\":{\"85\":1}}],[\"在ecma\",{\"0\":{\"72\":1}}],[\"在模块化世界里\",{\"1\":{\"69\":1}}],[\"在模块作用内做一次缓存\",{\"1\":{\"46\":1}}],[\"在括号中可以清晰的地表达这些\",{\"1\":{\"69\":1}}],[\"在其定义之前被引用\",{\"1\":{\"68\":1}}],[\"在数组中的应用\",{\"0\":{\"494\":1}}],[\"在数组的\",{\"0\":{\"56\":1}}],[\"在数组方法的回调函数中使用\",{\"0\":{\"55\":1}}],[\"在新窗口\",{\"1\":{\"19\":1}}],[\"在资源管理器中显示活动文件\",{\"1\":{\"19\":1}}],[\"在选定的每一行的末尾插入光标\",{\"1\":{\"16\":1}}],[\"在上面的例子中\",{\"1\":{\"516\":1,\"517\":1,\"518\":1,\"519\":1}}],[\"在上面\",{\"1\":{\"16\":1}}],[\"在上面插入行\",{\"1\":{\"13\":1}}],[\"bmw公共方法\",{\"1\":{\"346\":1}}],[\"bmw\",{\"1\":{\"346\":5}}],[\"bmp\",{\"1\":{\"320\":1}}],[\"bcrypt\",{\"1\":{\"282\":1}}],[\"bus\",{\"1\":{\"338\":1}}],[\"bus来实现组件间的通讯就是一个典型的发布\",{\"1\":{\"338\":1}}],[\"buildname\",{\"1\":{\"505\":6,\"506\":6}}],[\"build\",{\"1\":{\"311\":1,\"312\":1,\"315\":1,\"317\":3,\"380\":1}}],[\"bundle\",{\"1\":{\"243\":1,\"244\":1,\"269\":2}}],[\"buttoncolor\",{\"1\":{\"319\":4}}],[\"buttoncolors\",{\"1\":{\"319\":2}}],[\"buttondiv\",{\"1\":{\"319\":2}}],[\"button>\",{\"1\":{\"317\":2,\"415\":1,\"416\":3,\"418\":3,\"420\":1,\"425\":1,\"426\":1}}],[\"button\",{\"1\":{\"313\":1,\"317\":7,\"319\":8,\"350\":9,\"363\":4,\"415\":1,\"416\":1,\"418\":2,\"486\":2}}],[\"but\",{\"0\":{\"220\":1},\"1\":{\"380\":1,\"471\":1,\"477\":1,\"513\":1,\"519\":1}}],[\"bug\",{\"1\":{\"36\":1}}],[\"btn\",{\"1\":{\"206\":1,\"363\":4}}],[\"bigint是es10中的新类型\",{\"1\":{\"482\":1}}],[\"bigint\",{\"0\":{\"482\":1},\"1\":{\"470\":1,\"482\":3}}],[\"bio\",{\"1\":{\"410\":1}}],[\"birthyear\",{\"1\":{\"176\":2}}],[\"birthday\",{\"1\":{\"163\":10}}],[\"bin\",{\"1\":{\"285\":1}}],[\"binaryliteral\",{\"1\":{\"472\":2}}],[\"binary\",{\"1\":{\"116\":2}}],[\"bind\",{\"0\":{\"192\":1},\"1\":{\"82\":1,\"276\":4}}],[\"byd\",{\"1\":{\"346\":1}}],[\"by\",{\"1\":{\"153\":1,\"319\":1}}],[\"b++\",{\"1\":{\"76\":1}}],[\"blur\",{\"1\":{\"531\":2}}],[\"blue\",{\"1\":{\"202\":1}}],[\"black\",{\"1\":{\"317\":1,\"400\":3}}],[\"blah\",{\"1\":{\"45\":2}}],[\"blocks\",{\"0\":{\"140\":1}}],[\"block\",{\"1\":{\"13\":1,\"363\":1}}],[\"bone\",{\"1\":{\"346\":1}}],[\"border\",{\"1\":{\"317\":2}}],[\"body>\",{\"1\":{\"250\":1,\"317\":2,\"319\":1,\"380\":1}}],[\"body\",{\"1\":{\"224\":1,\"251\":1,\"269\":1,\"318\":1}}],[\"both\",{\"1\":{\"193\":1}}],[\"bottom\",{\"1\":{\"22\":1,\"60\":2}}],[\"bool\",{\"1\":{\"86\":4}}],[\"booleans\",{\"1\":{\"133\":1}}],[\"boolean\",{\"0\":{\"471\":1},\"1\":{\"32\":1,\"34\":3,\"123\":1,\"133\":1,\"186\":2,\"470\":1,\"471\":17,\"477\":1,\"487\":2,\"504\":1,\"518\":5}}],[\"box\",{\"1\":{\"16\":3,\"193\":1,\"317\":1,\"350\":5}}],[\"browser\",{\"1\":{\"320\":2,\"350\":4,\"380\":1}}],[\"browserify使用教程\",{\"0\":{\"264\":1}}],[\"browserify\",{\"1\":{\"240\":1,\"241\":2,\"265\":1,\"266\":1,\"269\":1}}],[\"breed\",{\"1\":{\"156\":2}}],[\"break\",{\"1\":{\"136\":7,\"346\":2}}],[\"breakpoint\",{\"1\":{\"21\":1}}],[\"bracket\",{\"1\":{\"13\":1}}],[\"b\",{\"1\":{\"20\":1,\"34\":3,\"36\":2,\"38\":2,\"47\":6,\"76\":1,\"78\":4,\"81\":1,\"122\":6,\"123\":2,\"138\":2,\"139\":8,\"170\":2,\"260\":2,\"298\":4,\"367\":4,\"454\":2,\"516\":15,\"517\":3}}],[\"babelrc文件\",{\"0\":{\"267\":1}}],[\"babel\",{\"0\":{\"264\":1,\"266\":1},\"1\":{\"265\":1,\"266\":2,\"269\":1,\"380\":4}}],[\"baidu\",{\"1\":{\"224\":3,\"250\":1,\"320\":1}}],[\"baseurl\",{\"1\":{\"250\":1,\"251\":1,\"536\":2}}],[\"based\",{\"1\":{\"148\":2,\"150\":2}}],[\"basicnum\",{\"1\":{\"260\":4}}],[\"basic\",{\"0\":{\"13\":1}}],[\"batman\",{\"1\":{\"63\":6,\"177\":2}}],[\"baz\",{\"1\":{\"53\":1,\"54\":2,\"83\":4,\"112\":1,\"137\":3,\"138\":2,\"155\":1,\"161\":2,\"162\":2,\"167\":6,\"539\":2}}],[\"bad\",{\"1\":{\"36\":1,\"37\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":2,\"46\":1,\"47\":2,\"49\":1,\"50\":1,\"51\":1,\"53\":1,\"54\":1,\"55\":2,\"56\":1,\"58\":1,\"59\":1,\"60\":1,\"62\":2,\"63\":2,\"64\":3,\"66\":1,\"68\":2,\"72\":1,\"73\":1,\"74\":1,\"75\":2,\"76\":1,\"77\":1,\"78\":2,\"79\":1,\"80\":1,\"81\":1,\"82\":2,\"83\":2,\"85\":1,\"86\":2,\"87\":1,\"88\":2,\"89\":2,\"90\":1,\"92\":1,\"93\":1,\"94\":1,\"96\":2,\"97\":1,\"98\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"110\":2,\"112\":8,\"114\":1,\"116\":1,\"118\":1,\"119\":2,\"120\":2,\"121\":1,\"122\":1,\"123\":1,\"124\":2,\"125\":1,\"134\":3,\"136\":1,\"137\":1,\"138\":1,\"139\":3,\"141\":2,\"142\":1,\"143\":3,\"145\":4,\"146\":1,\"148\":1,\"149\":2,\"150\":2,\"155\":2,\"156\":2,\"157\":2,\"158\":1,\"159\":2,\"160\":3,\"161\":3,\"162\":2,\"163\":1,\"164\":2,\"165\":1,\"166\":1,\"167\":2,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"174\":1,\"176\":2,\"177\":4,\"179\":1,\"182\":3,\"183\":4,\"186\":1,\"188\":1,\"189\":1,\"190\":2,\"191\":1,\"192\":2,\"193\":2,\"196\":2,\"197\":4,\"200\":1,\"201\":1,\"204\":1,\"206\":1,\"207\":1,\"209\":2,\"216\":1,\"217\":1}}],[\"barbara\",{\"1\":{\"325\":1}}],[\"barcss\",{\"1\":{\"108\":2}}],[\"bar\",{\"1\":{\"32\":3,\"33\":3,\"45\":2,\"53\":1,\"54\":2,\"83\":4,\"90\":5,\"97\":4,\"98\":6,\"106\":4,\"108\":2,\"112\":1,\"136\":1,\"137\":3,\"138\":2,\"139\":3,\"141\":1,\"145\":7,\"155\":1,\"161\":6,\"162\":2,\"164\":2,\"167\":8,\"168\":2,\"169\":2,\"170\":2,\"224\":6,\"268\":4,\"269\":2,\"276\":5,\"277\":2,\"539\":2,\"541\":10,\"543\":2,\"544\":2,\"546\":1,\"547\":7}}],[\"backgroundcolor\",{\"1\":{\"317\":1,\"318\":1,\"319\":1,\"400\":2}}],[\"background\",{\"1\":{\"207\":2,\"224\":1,\"251\":1,\"269\":1,\"310\":1,\"312\":2,\"313\":1,\"314\":3,\"315\":2,\"317\":6,\"319\":1,\"320\":3,\"400\":1}}],[\"back\",{\"1\":{\"14\":1,\"257\":1}}],[\"being\",{\"1\":{\"513\":1}}],[\"beijing\",{\"1\":{\"359\":1}}],[\"beef\",{\"1\":{\"346\":1}}],[\"bernese\",{\"1\":{\"156\":2}}],[\"be\",{\"1\":{\"153\":1,\"197\":3,\"350\":2,\"473\":2,\"527\":1,\"529\":1}}],[\"better\",{\"1\":{\"137\":1}}],[\"because\",{\"1\":{\"63\":3,\"500\":2,\"527\":1}}],[\"best\",{\"1\":{\"46\":1,\"52\":1,\"58\":1,\"66\":1,\"100\":1,\"110\":2,\"137\":1,\"186\":1,\"196\":2}}],[\"beginning\",{\"1\":{\"13\":2}}],[\"below\",{\"1\":{\"13\":1,\"16\":1}}],[\"下仅有\",{\"1\":{\"532\":1}}],[\"下指定\",{\"1\":{\"317\":1}}],[\"下\",{\"1\":{\"317\":1,\"457\":1,\"534\":1}}],[\"下载sea\",{\"0\":{\"255\":1}}],[\"下载require\",{\"0\":{\"248\":1}}],[\"下载browserify\",{\"0\":{\"241\":1}}],[\"下载第三方模块\",{\"0\":{\"236\":1}}],[\"下载安装node\",{\"0\":{\"234\":1}}],[\"下文会介绍\",{\"1\":{\"232\":1}}],[\"下面我们通过一个简化的例子\",{\"1\":{\"516\":1}}],[\"下面是\",{\"1\":{\"448\":1}}],[\"下面是常见数组操作的参考表\",{\"1\":{\"428\":1}}],[\"下面的\",{\"1\":{\"405\":1}}],[\"下面通过一个简单的javascript示例来说明适配器模式的应用\",{\"1\":{\"366\":1}}],[\"下面写法是错误的\",{\"1\":{\"276\":1}}],[\"下面重点解释第一个差异\",{\"1\":{\"263\":1}}],[\"下面介绍开发中最流行的commonjs\",{\"1\":{\"226\":1}}],[\"下面插入光标\",{\"1\":{\"16\":1}}],[\"下个编辑组\",{\"1\":{\"18\":1}}],[\"下一个\",{\"1\":{\"15\":1,\"421\":1,\"426\":1}}],[\"下复制行\",{\"1\":{\"13\":1}}],[\"下移动行\",{\"1\":{\"13\":1}}],[\"d+\",{\"1\":{\"359\":1}}],[\"drive\",{\"1\":{\"346\":2}}],[\"dragon\",{\"1\":{\"200\":2,\"201\":2}}],[\"dragonball\",{\"1\":{\"119\":3,\"120\":3}}],[\"drag\",{\"1\":{\"16\":1}}],[\"days\",{\"1\":{\"476\":28}}],[\"darkmode\",{\"1\":{\"283\":1}}],[\"dana\",{\"1\":{\"177\":2}}],[\"dataset\",{\"1\":{\"319\":2}}],[\"dataservice\",{\"1\":{\"249\":1,\"250\":6,\"251\":5}}],[\"data\",{\"1\":{\"45\":2,\"125\":2,\"160\":6,\"167\":2,\"204\":2,\"224\":14,\"250\":1,\"251\":1,\"257\":2,\"319\":2,\"359\":5,\"398\":1,\"404\":2,\"533\":1,\"534\":2,\"537\":2,\"538\":1}}],[\"date\",{\"1\":{\"34\":5,\"82\":2,\"163\":2,\"359\":4}}],[\"directions\",{\"1\":{\"530\":14,\"537\":7,\"538\":2,\"540\":5}}],[\"directory\",{\"1\":{\"193\":4}}],[\"div\",{\"1\":{\"405\":1}}],[\"div>\",{\"1\":{\"319\":2,\"380\":1,\"405\":1,\"416\":1,\"418\":1,\"419\":1}}],[\"different\",{\"1\":{\"319\":1}}],[\"diff\",{\"1\":{\"177\":2}}],[\"diffs更清洁\",{\"1\":{\"177\":1}}],[\"disconnect\",{\"1\":{\"455\":1}}],[\"discussion\",{\"0\":{\"185\":1},\"1\":{\"68\":1}}],[\"dispatch\",{\"1\":{\"439\":2,\"441\":2}}],[\"display\",{\"0\":{\"20\":1},\"1\":{\"363\":1}}],[\"disabled\",{\"1\":{\"363\":1}}],[\"disablebutton\",{\"1\":{\"363\":2}}],[\"dist\",{\"1\":{\"240\":1,\"243\":1,\"244\":1}}],[\"distinguished\",{\"1\":{\"68\":1}}],[\"domreadycallback\",{\"1\":{\"528\":1}}],[\"dom\",{\"0\":{\"446\":1,\"448\":1},\"1\":{\"380\":2,\"398\":2,\"429\":2,\"446\":4,\"447\":1,\"448\":3,\"450\":7,\"451\":1,\"452\":1,\"457\":1,\"528\":1}}],[\"dom查找用层叠式$\",{\"0\":{\"208\":1}}],[\"doe\",{\"1\":{\"371\":2}}],[\"doesn\",{\"1\":{\"477\":2}}],[\"doesitlookgoodwhenitbecomesthatlong\",{\"1\":{\"145\":2}}],[\"does\",{\"1\":{\"47\":1,\"177\":3,\"475\":1,\"488\":3,\"498\":1,\"512\":2,\"514\":2}}],[\"doors\",{\"1\":{\"346\":1}}],[\"dofoo\",{\"1\":{\"275\":3,\"276\":6}}],[\"docker\",{\"1\":{\"285\":11,\"291\":1}}],[\"docker镜像\",{\"1\":{\"285\":1}}],[\"docker部署\",{\"0\":{\"285\":1}}],[\"doctype\",{\"1\":{\"250\":1,\"317\":2,\"319\":1,\"380\":1}}],[\"documentation\",{\"1\":{\"282\":1}}],[\"document\",{\"1\":{\"17\":1,\"34\":3,\"52\":1,\"317\":1,\"318\":1,\"319\":2,\"320\":4,\"363\":3,\"380\":1,\"527\":3}}],[\"dog\",{\"1\":{\"156\":4,\"346\":8}}],[\"dogs\",{\"1\":{\"143\":2}}],[\"done\",{\"1\":{\"167\":2}}],[\"don\",{\"1\":{\"88\":1,\"380\":1}}],[\"do\",{\"1\":{\"63\":3,\"86\":1,\"197\":1,\"204\":2,\"399\":2,\"482\":1,\"502\":2}}],[\"down\",{\"1\":{\"13\":4,\"16\":1,\"22\":2,\"530\":3,\"537\":2,\"538\":1,\"540\":3}}],[\"d\",{\"1\":{\"15\":2,\"20\":1,\"139\":7,\"269\":1,\"285\":2,\"298\":2,\"523\":7,\"526\":2,\"527\":2,\"528\":2,\"529\":2,\"530\":2,\"531\":2,\"532\":2,\"534\":1,\"535\":1,\"536\":4,\"537\":1,\"538\":1,\"539\":1,\"540\":4,\"541\":1,\"543\":2,\"544\":1,\"546\":1,\"547\":2,\"548\":1,\"550\":1,\"551\":1}}],[\"denied\",{\"1\":{\"371\":1}}],[\"declaration\",{\"1\":{\"502\":2}}],[\"declared\",{\"1\":{\"527\":1,\"529\":1}}],[\"declaredbutnotassigned\",{\"1\":{\"127\":8}}],[\"declaredbutnotassigned的值没有上升\",{\"1\":{\"127\":1}}],[\"declare\",{\"0\":{\"527\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"538\":1,\"546\":1},\"1\":{\"475\":1,\"522\":7,\"523\":5,\"526\":5,\"527\":8,\"528\":4,\"529\":4,\"530\":3,\"531\":6,\"532\":2,\"534\":1,\"535\":2,\"537\":1,\"538\":6,\"539\":1,\"540\":3,\"541\":3,\"543\":4,\"544\":2,\"545\":1,\"546\":2,\"547\":5,\"548\":2,\"550\":1}}],[\"decliteral\",{\"1\":{\"472\":2}}],[\"decorator\",{\"1\":{\"362\":1,\"363\":4}}],[\"deepclone\",{\"1\":{\"359\":5}}],[\"deposit\",{\"1\":{\"375\":8}}],[\"dependency\",{\"1\":{\"322\":1,\"327\":1}}],[\"deprecated\",{\"1\":{\"282\":1}}],[\"demo<\",{\"1\":{\"250\":1}}],[\"development\",{\"1\":{\"380\":3}}],[\"devtools\",{\"1\":{\"320\":2}}],[\"devtools页面入口\",{\"1\":{\"320\":1}}],[\"dev然后在app\",{\"1\":{\"269\":1}}],[\"dev\",{\"1\":{\"241\":1,\"266\":1,\"380\":2,\"524\":1,\"526\":1,\"536\":1}}],[\"dead\",{\"0\":{\"127\":1}}],[\"definitely\",{\"1\":{\"477\":1}}],[\"definition\",{\"1\":{\"17\":3}}],[\"define\",{\"1\":{\"246\":2,\"250\":2,\"251\":1,\"253\":3,\"257\":5}}],[\"defined\",{\"1\":{\"129\":1}}],[\"default命令\",{\"1\":{\"260\":1}}],[\"default一个函数时\",{\"0\":{\"194\":1}}],[\"default导出模块a\",{\"0\":{\"193\":1}}],[\"default\",{\"0\":{\"540\":1},\"1\":{\"100\":2,\"102\":2,\"105\":1,\"136\":2,\"149\":3,\"159\":3,\"193\":3,\"194\":1,\"195\":1,\"213\":1,\"260\":4,\"268\":1,\"314\":1,\"317\":7,\"320\":7,\"346\":1,\"399\":1,\"400\":1,\"402\":1,\"403\":1,\"404\":1,\"405\":1,\"410\":2,\"415\":1,\"416\":1,\"418\":1,\"420\":1,\"425\":1,\"426\":1,\"522\":1,\"536\":1,\"540\":8,\"541\":1,\"543\":2}}],[\"description\",{\"1\":{\"311\":1,\"312\":1,\"315\":1,\"317\":3,\"320\":1,\"399\":2}}],[\"destructuring\",{\"0\":{\"57\":1},\"1\":{\"213\":1}}],[\"des加密解密示例\",{\"0\":{\"1\":1}}],[\"details\",{\"1\":{\"20\":1,\"282\":1}}],[\"debug\",{\"0\":{\"21\":1},\"1\":{\"20\":2}}],[\"delete\",{\"1\":{\"13\":1,\"47\":1}}],[\"umijs\",{\"0\":{\"391\":1},\"1\":{\"389\":1,\"391\":1}}],[\"umi\",{\"1\":{\"389\":2}}],[\"umd\",{\"0\":{\"542\":1,\"545\":1},\"1\":{\"380\":2,\"522\":1,\"525\":3,\"542\":1,\"545\":2,\"546\":1,\"550\":1}}],[\"utf\",{\"1\":{\"380\":1}}],[\"uid\",{\"1\":{\"285\":1}}],[\"ui\",{\"0\":{\"412\":1},\"1\":{\"283\":1,\"310\":2,\"317\":1,\"320\":1,\"386\":1,\"412\":1,\"442\":1}}],[\"us\",{\"1\":{\"283\":1}}],[\"using\",{\"1\":{\"282\":1,\"471\":1}}],[\"used\",{\"1\":{\"513\":1}}],[\"useimperativehandle\",{\"0\":{\"449\":1},\"1\":{\"449\":1}}],[\"usecontext\",{\"1\":{\"442\":3}}],[\"useeffectevent\",{\"1\":{\"459\":3}}],[\"useeffect\",{\"1\":{\"411\":1,\"453\":2,\"454\":8,\"455\":1,\"459\":1}}],[\"usesomedatalibrary\",{\"1\":{\"456\":1}}],[\"usestate\",{\"0\":{\"422\":1,\"440\":1},\"1\":{\"422\":3,\"425\":2,\"426\":2,\"440\":5}}],[\"uses\",{\"1\":{\"380\":1}}],[\"use\",{\"1\":{\"37\":1,\"110\":1,\"152\":1,\"197\":1,\"258\":1,\"274\":1,\"287\":1,\"380\":1,\"422\":2}}],[\"userid\",{\"1\":{\"456\":1}}],[\"userid=\",{\"1\":{\"410\":1}}],[\"useref\",{\"1\":{\"445\":1,\"449\":2,\"454\":3}}],[\"usereducer\",{\"0\":{\"440\":1},\"1\":{\"439\":1,\"440\":5}}],[\"usereducer将reducer导入到组件中\",{\"1\":{\"439\":1}}],[\"username\",{\"1\":{\"289\":2,\"290\":1}}],[\"users\",{\"1\":{\"283\":5}}],[\"user\",{\"1\":{\"12\":1,\"58\":5,\"190\":4,\"285\":2,\"317\":1,\"456\":1,\"533\":1}}],[\"ul>\",{\"1\":{\"400\":1,\"410\":2}}],[\"ul\",{\"0\":{\"208\":2},\"1\":{\"209\":5}}],[\"urls>\",{\"1\":{\"320\":2}}],[\"url\",{\"1\":{\"167\":2,\"283\":1,\"320\":2,\"531\":2,\"532\":1,\"534\":1,\"535\":1}}],[\"u\",{\"1\":{\"13\":1,\"16\":1,\"20\":1,\"478\":3,\"481\":1,\"482\":1}}],[\"union\",{\"1\":{\"487\":1}}],[\"uniq\",{\"1\":{\"236\":1,\"237\":3}}],[\"unusable\",{\"1\":{\"479\":1}}],[\"unused\",{\"1\":{\"125\":1}}],[\"unpkg\",{\"1\":{\"380\":3}}],[\"unpublish\",{\"1\":{\"283\":4}}],[\"unauthorized\",{\"1\":{\"371\":1}}],[\"uname\",{\"1\":{\"282\":2}}],[\"unsupported\",{\"1\":{\"350\":1}}],[\"unshift\",{\"0\":{\"297\":1},\"1\":{\"296\":1,\"428\":1}}],[\"uncaught\",{\"1\":{\"274\":1,\"512\":2}}],[\"uncollapse\",{\"1\":{\"13\":3}}],[\"unnecessarily\",{\"1\":{\"197\":1}}],[\"unnecessary\",{\"1\":{\"121\":1}}],[\"undefined在react中不会渲染\",{\"1\":{\"409\":1}}],[\"undefined\",{\"0\":{\"478\":1},\"1\":{\"32\":1,\"34\":5,\"94\":1,\"122\":4,\"127\":2,\"128\":1,\"129\":2,\"133\":1,\"224\":1,\"274\":2,\"403\":1,\"408\":1,\"470\":1,\"478\":11,\"479\":2,\"505\":1,\"506\":1}}],[\"undo\",{\"1\":{\"16\":1}}],[\"unfold\",{\"1\":{\"13\":3}}],[\"uploadbutton\",{\"1\":{\"416\":1}}],[\"uplinks\",{\"1\":{\"283\":1}}],[\"update\",{\"1\":{\"337\":2}}],[\"updatecount\",{\"1\":{\"160\":3}}],[\"uppercase\",{\"1\":{\"197\":1}}],[\"uppercased\",{\"1\":{\"197\":2}}],[\"upon\",{\"1\":{\"176\":2}}],[\"up\",{\"1\":{\"13\":4,\"16\":1,\"22\":2,\"88\":1,\"285\":1,\"530\":3,\"537\":2,\"538\":1,\"540\":3}}],[\"↓\",{\"1\":{\"13\":3,\"16\":1,\"22\":1}}],[\"↑\",{\"1\":{\"13\":3,\"16\":1,\"22\":1}}],[\"aeronautics\",{\"1\":{\"400\":1}}],[\"aes\",{\"0\":{\"1\":1}}],[\"avatar\",{\"1\":{\"399\":8,\"402\":1,\"403\":1,\"404\":1,\"405\":1}}],[\"await\",{\"1\":{\"318\":1}}],[\"ambient\",{\"1\":{\"527\":1,\"529\":1,\"530\":1}}],[\"americanstate\",{\"1\":{\"333\":1}}],[\"american\",{\"1\":{\"333\":2}}],[\"am\",{\"1\":{\"290\":1}}],[\"amd模式可以用于浏览器环境\",{\"1\":{\"251\":1}}],[\"amd规范开发成本高\",{\"1\":{\"270\":1}}],[\"amd规范在浏览器环境中异步加载模块\",{\"1\":{\"270\":1}}],[\"amd规范基本语法\",{\"0\":{\"246\":1}}],[\"amd规范则是非同步加载模块\",{\"1\":{\"245\":1}}],[\"amd\",{\"0\":{\"245\":1},\"1\":{\"226\":1,\"259\":1,\"270\":1,\"541\":1}}],[\"ago\",{\"1\":{\"285\":2}}],[\"age\",{\"1\":{\"114\":1,\"115\":1,\"156\":2,\"163\":6,\"186\":4,\"200\":2,\"201\":1,\"350\":2,\"359\":2,\"497\":4,\"498\":6,\"499\":10,\"500\":2,\"533\":3}}],[\"audit\",{\"1\":{\"282\":1,\"283\":1}}],[\"auth\",{\"1\":{\"283\":2}}],[\"author\",{\"1\":{\"55\":4}}],[\"automatic\",{\"1\":{\"179\":1}}],[\"apierror\",{\"1\":{\"513\":15}}],[\"api\",{\"1\":{\"197\":1,\"257\":4,\"286\":1,\"314\":1,\"315\":2,\"318\":1,\"385\":1,\"448\":1,\"456\":1,\"531\":2,\"532\":1,\"534\":1,\"535\":1}}],[\"apikey\",{\"1\":{\"197\":1}}],[\"app必须三选一\",{\"1\":{\"320\":1}}],[\"app\",{\"1\":{\"235\":1,\"237\":1,\"238\":1,\"240\":1,\"243\":1,\"268\":1,\"269\":2,\"286\":2,\"383\":1,\"386\":1,\"388\":3}}],[\"appear\",{\"1\":{\"177\":2}}],[\"appendchild\",{\"1\":{\"319\":1}}],[\"append\",{\"1\":{\"160\":4}}],[\"apply\",{\"1\":{\"34\":1,\"82\":2,\"93\":1,\"276\":1}}],[\"after\",{\"1\":{\"177\":2}}],[\"ada\",{\"1\":{\"176\":2}}],[\"adding\",{\"1\":{\"380\":1}}],[\"additional\",{\"1\":{\"282\":1}}],[\"addeventlistener\",{\"1\":{\"318\":1,\"319\":1,\"363\":1}}],[\"addlistener\",{\"1\":{\"314\":1}}],[\"adduser\",{\"1\":{\"283\":1,\"289\":1}}],[\"address\",{\"1\":{\"282\":1,\"359\":1}}],[\"addx\",{\"1\":{\"231\":4}}],[\"addvalue\",{\"1\":{\"42\":2}}],[\"add\",{\"1\":{\"13\":1,\"15\":1,\"78\":1,\"260\":4,\"287\":1,\"319\":2,\"337\":1,\"359\":1,\"380\":1}}],[\"ajaxsettings\",{\"1\":{\"534\":3,\"550\":2}}],[\"ajax\",{\"1\":{\"167\":2,\"531\":7,\"532\":3,\"534\":2,\"535\":3}}],[\"a到底等于几\",{\"1\":{\"76\":1}}],[\"aria\",{\"1\":{\"398\":1}}],[\"argument\",{\"1\":{\"490\":1}}],[\"arguments\",{\"1\":{\"73\":1,\"74\":1,\"81\":1,\"493\":5}}],[\"args\",{\"1\":{\"73\":1,\"74\":4,\"96\":4,\"338\":4,\"493\":3}}],[\"are\",{\"1\":{\"64\":4,\"499\":1}}],[\"arr3\",{\"1\":{\"308\":2,\"309\":2}}],[\"arr2\",{\"1\":{\"306\":2,\"307\":2,\"308\":2,\"309\":2}}],[\"arrremoved3\",{\"1\":{\"302\":2}}],[\"arrremoved2\",{\"1\":{\"302\":2}}],[\"arrremoved\",{\"1\":{\"302\":2}}],[\"arrcopy4\",{\"1\":{\"301\":2}}],[\"arrcopy3\",{\"1\":{\"301\":2}}],[\"arrcopy2\",{\"1\":{\"301\":2}}],[\"arrcopy\",{\"1\":{\"300\":2,\"301\":2}}],[\"arr1\",{\"1\":{\"298\":2}}],[\"arr\",{\"1\":{\"53\":2,\"56\":2,\"59\":4,\"161\":4,\"169\":2,\"237\":2,\"293\":4,\"294\":3,\"295\":2,\"296\":3,\"297\":2,\"298\":3,\"299\":3,\"300\":3,\"301\":6,\"302\":10,\"303\":2,\"304\":2,\"305\":3,\"306\":2,\"307\":2,\"308\":3,\"309\":3,\"428\":2}}],[\"arrlike\",{\"1\":{\"53\":3}}],[\"array<elemtype>\",{\"1\":{\"491\":1}}],[\"array<number>\",{\"1\":{\"474\":1,\"491\":1}}],[\"array<元素类型>\",{\"1\":{\"474\":1}}],[\"arrays\",{\"0\":{\"48\":1}}],[\"array\",{\"0\":{\"474\":1},\"1\":{\"33\":1,\"34\":4,\"49\":1,\"52\":1,\"53\":2,\"54\":1,\"74\":1,\"123\":6,\"213\":1,\"359\":1,\"470\":1,\"491\":1,\"493\":1,\"507\":4}}],[\"arrow\",{\"0\":{\"84\":1},\"1\":{\"16\":1,\"213\":1}}],[\"actions\",{\"1\":{\"440\":1,\"441\":1}}],[\"action\",{\"1\":{\"317\":4,\"320\":4,\"440\":3,\"441\":4}}],[\"activetab\",{\"1\":{\"318\":2}}],[\"active\",{\"1\":{\"18\":1,\"19\":3,\"22\":1,\"149\":2,\"150\":2,\"318\":1}}],[\"accessible\",{\"1\":{\"320\":1}}],[\"access\",{\"1\":{\"283\":4,\"371\":1}}],[\"accessors\",{\"0\":{\"198\":1}}],[\"acc\",{\"1\":{\"55\":6}}],[\"abstracttextbox\",{\"1\":{\"350\":3}}],[\"abstractbutton\",{\"1\":{\"350\":3}}],[\"abstractfactory\",{\"1\":{\"350\":3}}],[\"abstractclass\",{\"1\":{\"350\":8}}],[\"abstract\",{\"1\":{\"349\":1,\"350\":2}}],[\"abacus\",{\"1\":{\"152\":1,\"153\":1}}],[\"abc123\",{\"1\":{\"257\":1}}],[\"abc\",{\"1\":{\"145\":7}}],[\"about\",{\"1\":{\"63\":3}}],[\"above\",{\"1\":{\"13\":1,\"16\":1,\"119\":1}}],[\"abracadabra\",{\"1\":{\"50\":2}}],[\"any也不可以赋值给never\",{\"1\":{\"480\":1}}],[\"any类型断言为了\",{\"1\":{\"519\":1}}],[\"any类型是十分有用的\",{\"1\":{\"477\":1}}],[\"any类型来标记这些变量\",{\"1\":{\"477\":1}}],[\"any\",{\"0\":{\"477\":1,\"494\":1},\"1\":{\"470\":1,\"477\":2,\"484\":1,\"486\":1,\"493\":1,\"494\":2,\"499\":1,\"500\":2,\"502\":2,\"507\":3,\"514\":8,\"515\":9,\"516\":4,\"517\":4,\"518\":2,\"519\":8,\"520\":4,\"523\":2,\"527\":2,\"528\":4,\"531\":2,\"532\":3,\"534\":1,\"535\":2,\"537\":1,\"538\":1}}],[\"anything\",{\"1\":{\"63\":3}}],[\"animal会被做为最佳通用类型\",{\"1\":{\"486\":1}}],[\"animal\",{\"1\":{\"346\":21,\"485\":3,\"486\":2,\"512\":16,\"516\":19,\"519\":19,\"529\":5,\"537\":3,\"538\":2}}],[\"an\",{\"1\":{\"153\":1,\"311\":1,\"312\":1,\"315\":1,\"317\":3,\"380\":2,\"505\":1,\"527\":1,\"529\":1,\"533\":1}}],[\"anonymous\",{\"1\":{\"128\":5}}],[\"anakin\",{\"1\":{\"44\":1}}],[\"anakinskywalker\",{\"1\":{\"44\":3}}],[\"androidadapter\",{\"1\":{\"367\":4}}],[\"android\",{\"1\":{\"367\":4,\"386\":1}}],[\"androidplayer\",{\"1\":{\"367\":12}}],[\"and\",{\"0\":{\"15\":1,\"16\":1,\"109\":1,\"135\":1,\"136\":1},\"1\":{\"119\":1,\"193\":1,\"213\":2,\"380\":1,\"493\":1,\"498\":1}}],[\"airbnbstyleguide\",{\"1\":{\"100\":7,\"101\":4,\"102\":2,\"159\":3,\"195\":2}}],[\"airbnb\",{\"0\":{\"30\":1},\"1\":{\"167\":2,\"220\":1}}],[\"assertion\",{\"1\":{\"509\":1}}],[\"assignable\",{\"1\":{\"471\":1,\"484\":2,\"487\":2,\"490\":2,\"497\":1,\"498\":1,\"499\":4,\"500\":1}}],[\"assign\",{\"1\":{\"47\":2,\"500\":2,\"527\":1}}],[\"asc\",{\"1\":{\"283\":1}}],[\"asc|desc\",{\"1\":{\"283\":1}}],[\"async\",{\"1\":{\"253\":1,\"257\":1,\"318\":1}}],[\"as\",{\"0\":{\"543\":1},\"1\":{\"19\":1,\"101\":1,\"102\":1,\"289\":1,\"290\":1,\"510\":3,\"512\":3,\"513\":4,\"514\":5,\"515\":3,\"516\":4,\"517\":5,\"518\":1,\"519\":7,\"520\":3,\"522\":1,\"541\":2,\"542\":1,\"543\":4,\"547\":3,\"548\":1}}],[\"atguigu\",{\"1\":{\"257\":1}}],[\"atime\",{\"1\":{\"176\":2}}],[\"attr\",{\"1\":{\"156\":2,\"160\":4}}],[\"atom\",{\"1\":{\"42\":4}}],[\"at\",{\"1\":{\"16\":1,\"320\":1,\"477\":1}}],[\"a\",{\"1\":{\"13\":1,\"34\":3,\"36\":2,\"38\":2,\"47\":7,\"63\":3,\"70\":4,\"76\":2,\"78\":4,\"79\":1,\"81\":8,\"122\":8,\"123\":2,\"125\":1,\"127\":3,\"128\":1,\"129\":2,\"138\":3,\"139\":8,\"148\":2,\"150\":2,\"152\":1,\"170\":2,\"177\":4,\"197\":1,\"260\":2,\"298\":4,\"305\":2,\"319\":1,\"350\":1,\"367\":4,\"380\":4,\"454\":2,\"471\":2,\"475\":1,\"477\":2,\"500\":4,\"505\":1,\"507\":4,\"512\":2,\"513\":2,\"516\":15,\"517\":3,\"527\":2,\"533\":1}}],[\"alcohol\",{\"1\":{\"400\":1}}],[\"algorithm\",{\"1\":{\"282\":1}}],[\"also\",{\"1\":{\"149\":1,\"162\":1,\"196\":1}}],[\"alertname\",{\"1\":{\"479\":1}}],[\"alerter\",{\"1\":{\"249\":1,\"250\":6,\"251\":6}}],[\"alert\",{\"1\":{\"125\":1,\"250\":1,\"251\":1,\"415\":2,\"416\":2,\"418\":3,\"420\":1,\"479\":1,\"528\":1}}],[\"always\",{\"0\":{\"88\":1}}],[\"allowed\",{\"1\":{\"371\":2}}],[\"all\",{\"1\":{\"13\":4,\"14\":1,\"15\":1,\"16\":2,\"19\":2}}],[\"alt=\",{\"1\":{\"399\":1}}],[\"alt\",{\"1\":{\"13\":5,\"14\":1,\"15\":2,\"16\":6,\"17\":2,\"20\":1}}],[\"剪切\",{\"1\":{\"13\":1}}],[\"effect的不同渲染\",{\"0\":{\"457\":1}}],[\"effect\",{\"0\":{\"452\":1,\"453\":1,\"454\":1,\"456\":1,\"458\":1,\"459\":1,\"460\":1},\"1\":{\"450\":2,\"452\":2,\"453\":6,\"454\":2,\"456\":4,\"457\":4,\"459\":3,\"460\":5}}],[\"eat\",{\"1\":{\"346\":7}}],[\"each\",{\"1\":{\"16\":1,\"532\":2}}],[\"erich\",{\"1\":{\"328\":1}}],[\"err\",{\"1\":{\"291\":2}}],[\"errormessage\",{\"1\":{\"63\":3}}],[\"error\",{\"1\":{\"14\":2,\"34\":5,\"63\":3,\"285\":2,\"291\":2,\"346\":1,\"350\":5,\"371\":4,\"475\":3,\"477\":1,\"480\":3,\"484\":2,\"486\":2,\"487\":1,\"488\":2,\"497\":1,\"498\":1,\"499\":2,\"500\":3,\"502\":2,\"505\":1,\"512\":1,\"513\":27,\"514\":2,\"519\":1,\"523\":1,\"527\":2,\"529\":1,\"533\":2,\"540\":1}}],[\"e8453c\",{\"1\":{\"319\":1}}],[\"e500\",{\"1\":{\"291\":1}}],[\"ecmascript\",{\"0\":{\"212\":1}}],[\"emit\",{\"1\":{\"338\":1}}],[\"emit方法用于触发目标事件\",{\"1\":{\"338\":1}}],[\"emitter\",{\"1\":{\"338\":1}}],[\"email\",{\"1\":{\"163\":6,\"289\":1,\"290\":1}}],[\"empty\",{\"1\":{\"13\":2}}],[\"elephant和snake\",{\"1\":{\"486\":1}}],[\"elephant\",{\"1\":{\"485\":3,\"486\":1}}],[\"electron\",{\"1\":{\"389\":3}}],[\"ele\",{\"1\":{\"260\":2}}],[\"elements\",{\"1\":{\"310\":1}}],[\"element\",{\"1\":{\"148\":6,\"150\":4,\"177\":2}}],[\"else\",{\"0\":{\"143\":2},\"1\":{\"55\":1,\"142\":2,\"143\":4,\"162\":2,\"350\":2,\"367\":1,\"408\":1,\"454\":2,\"505\":2,\"508\":2}}],[\"equality\",{\"0\":{\"131\":1,\"135\":1}}],[\"eventtype\",{\"1\":{\"531\":4}}],[\"eventname\",{\"1\":{\"338\":13}}],[\"eventemitter\",{\"1\":{\"338\":1}}],[\"event\",{\"1\":{\"319\":5,\"338\":3,\"418\":1,\"459\":1,\"460\":1,\"531\":2}}],[\"events\",{\"0\":{\"203\":1}}],[\"every\",{\"0\":{\"308\":1},\"1\":{\"110\":1,\"308\":2}}],[\"eval\",{\"1\":{\"78\":1}}],[\"episodethree\",{\"1\":{\"44\":2}}],[\"episodeone\",{\"1\":{\"44\":2}}],[\"es2020\",{\"1\":{\"482\":2}}],[\"es2015\",{\"1\":{\"266\":1,\"267\":1}}],[\"es2015和browserify\",{\"0\":{\"266\":1}}],[\"es10\",{\"0\":{\"482\":1},\"1\":{\"470\":1}}],[\"es7可以使用装饰器语法糖实现\",{\"1\":{\"363\":1}}],[\"es\",{\"0\":{\"212\":1}}],[\"es5实现抽象\",{\"1\":{\"350\":1}}],[\"es5\",{\"0\":{\"210\":1},\"1\":{\"367\":1}}],[\"es6语法转es5\",{\"1\":{\"464\":1}}],[\"es6模块化语法\",{\"0\":{\"260\":1}}],[\"es6模块化\",{\"0\":{\"259\":1}}],[\"es6写法\",{\"1\":{\"224\":1}}],[\"es6\",{\"0\":{\"261\":1,\"262\":1,\"263\":1,\"264\":1,\"481\":1},\"1\":{\"100\":4,\"102\":5,\"159\":6,\"195\":1,\"226\":1,\"259\":1,\"263\":3,\"265\":1,\"270\":1,\"350\":1,\"363\":1,\"367\":1,\"371\":1,\"470\":1,\"472\":5,\"481\":1,\"503\":3,\"506\":2,\"507\":2,\"522\":1,\"525\":1,\"531\":5,\"536\":2,\"540\":1,\"541\":1,\"549\":1}}],[\"es6扩展运算符\",{\"1\":{\"47\":1}}],[\"eslint\",{\"0\":{\"36\":1,\"37\":1,\"40\":1,\"42\":1,\"43\":1,\"45\":1,\"49\":1,\"55\":1,\"58\":1,\"62\":1,\"64\":1,\"65\":1,\"66\":1,\"68\":1,\"69\":1,\"71\":1,\"74\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"85\":1,\"86\":1,\"88\":2,\"89\":1,\"90\":1,\"96\":1,\"97\":1,\"98\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"108\":1,\"110\":1,\"112\":1,\"114\":1,\"116\":1,\"118\":1,\"119\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"132\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"141\":1,\"142\":1,\"143\":1,\"150\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"176\":1,\"177\":1,\"179\":1,\"182\":1,\"183\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"216\":1,\"217\":1},\"1\":{\"167\":1}}],[\"esc\",{\"1\":{\"20\":2}}],[\"exclude\",{\"1\":{\"523\":1,\"526\":1}}],[\"exists\",{\"1\":{\"477\":1}}],[\"existing\",{\"1\":{\"380\":2}}],[\"exist\",{\"1\":{\"346\":1,\"477\":2,\"488\":3,\"498\":1,\"512\":2,\"514\":2}}],[\"exit\",{\"1\":{\"20\":1}}],[\"executescript\",{\"1\":{\"318\":2}}],[\"examples\",{\"1\":{\"498\":1}}],[\"example\",{\"1\":{\"122\":2,\"127\":4,\"128\":1,\"129\":2,\"130\":1,\"231\":5,\"311\":1,\"312\":1,\"315\":1,\"317\":3,\"318\":1,\"319\":1}}],[\"extend\",{\"1\":{\"532\":4}}],[\"extends\",{\"1\":{\"93\":1,\"96\":2,\"152\":1,\"153\":1,\"333\":4,\"350\":6,\"513\":8,\"516\":2,\"533\":2}}],[\"extension\",{\"1\":{\"311\":1,\"312\":1,\"315\":1,\"317\":3}}],[\"extensions\",{\"1\":{\"20\":1,\"311\":1,\"318\":1}}],[\"expected\",{\"1\":{\"540\":1}}],[\"expo\",{\"0\":{\"386\":1},\"1\":{\"386\":3}}],[\"exponentiation\",{\"1\":{\"213\":1}}],[\"export命令用于规定模块的对外接口\",{\"1\":{\"260\":1}}],[\"exported\",{\"1\":{\"197\":1}}],[\"export\",{\"0\":{\"193\":1,\"537\":1,\"538\":1,\"539\":1,\"540\":1,\"541\":1,\"543\":1},\"1\":{\"100\":2,\"102\":2,\"104\":2,\"105\":2,\"159\":3,\"193\":12,\"194\":1,\"195\":1,\"197\":6,\"260\":4,\"263\":2,\"268\":4,\"399\":1,\"400\":1,\"402\":1,\"403\":1,\"404\":1,\"405\":1,\"410\":2,\"415\":1,\"416\":1,\"418\":1,\"420\":1,\"425\":1,\"426\":1,\"442\":1,\"522\":5,\"536\":4,\"537\":7,\"538\":2,\"539\":2,\"540\":8,\"541\":10,\"542\":1,\"543\":7,\"545\":1,\"546\":1,\"547\":3,\"548\":1,\"550\":1,\"551\":1}}],[\"exports输出变量x和函数addx\",{\"1\":{\"231\":1}}],[\"exports属性\",{\"1\":{\"231\":1,\"263\":1}}],[\"exports\",{\"1\":{\"100\":1,\"231\":4,\"232\":1,\"237\":4,\"253\":5,\"257\":8,\"541\":2}}],[\"explicitly\",{\"1\":{\"193\":2}}],[\"explorer\",{\"1\":{\"19\":1,\"20\":1}}],[\"expression\",{\"1\":{\"69\":2,\"70\":1,\"128\":1,\"502\":2,\"503\":1,\"540\":1}}],[\"expand\",{\"1\":{\"16\":1}}],[\"e\",{\"0\":{\"136\":1},\"1\":{\"20\":1,\"197\":1,\"204\":2,\"418\":4,\"419\":4,\"420\":3,\"531\":2}}],[\"editor\",{\"0\":{\"18\":1},\"1\":{\"14\":1,\"18\":6,\"19\":2,\"20\":1}}],[\"editing\",{\"0\":{\"13\":1,\"17\":1}}],[\"enums\",{\"1\":{\"530\":1}}],[\"enum类型是对javascript标准数据类型的一个补充\",{\"1\":{\"476\":1}}],[\"enum\",{\"0\":{\"476\":1,\"530\":1},\"1\":{\"470\":1,\"476\":3,\"522\":1,\"526\":1,\"530\":3,\"531\":2,\"537\":1,\"538\":1,\"540\":5}}],[\"engine<\",{\"1\":{\"400\":1}}],[\"en\",{\"1\":{\"283\":1}}],[\"entrypoint\",{\"1\":{\"285\":1}}],[\"entries\",{\"1\":{\"110\":1,\"359\":1}}],[\"enter\",{\"1\":{\"13\":2,\"15\":1,\"19\":1,\"160\":2}}],[\"enabled\",{\"1\":{\"41\":3,\"283\":1}}],[\"end\",{\"1\":{\"13\":4,\"16\":1,\"22\":1,\"160\":3,\"320\":1}}],[\"xml\",{\"1\":{\"550\":1}}],[\"xcatliu\",{\"1\":{\"494\":2}}],[\"xyzzy\",{\"1\":{\"167\":2}}],[\"x=y+5\",{\"1\":{\"158\":1}}],[\"xxx为模块文件路径\",{\"1\":{\"231\":1}}],[\"xxx为模块名\",{\"1\":{\"231\":1}}],[\"xxxxxx\",{\"1\":{\"289\":1,\"290\":1}}],[\"xxxx\",{\"1\":{\"224\":1}}],[\"xxx\",{\"1\":{\"34\":2,\"231\":2,\"253\":2,\"285\":1,\"526\":1}}],[\"x\",{\"1\":{\"13\":1,\"17\":1,\"20\":1,\"55\":5,\"79\":1,\"82\":4,\"85\":6,\"88\":12,\"125\":6,\"136\":2,\"143\":12,\"158\":1,\"170\":2,\"174\":2,\"231\":5,\"305\":2,\"307\":2,\"308\":4,\"309\":4,\"475\":8,\"485\":2,\"499\":2,\"502\":10,\"503\":5,\"508\":12,\"533\":4}}],[\"known\",{\"1\":{\"498\":1,\"533\":1}}],[\"katsuko\",{\"1\":{\"405\":1}}],[\"kent\",{\"1\":{\"166\":2}}],[\"keepalivetimeout\",{\"1\":{\"283\":1}}],[\"keeping\",{\"1\":{\"110\":1}}],[\"keep\",{\"1\":{\"19\":1}}],[\"key=\",{\"1\":{\"410\":4}}],[\"keyword\",{\"1\":{\"320\":1}}],[\"keys\",{\"1\":{\"110\":1}}],[\"key\",{\"1\":{\"16\":1,\"41\":1,\"46\":3,\"80\":4,\"197\":4,\"202\":4,\"257\":4,\"359\":7,\"410\":4,\"437\":1,\"515\":4,\"519\":4,\"520\":4}}],[\"keyboard\",{\"1\":{\"12\":1}}],[\"k\",{\"1\":{\"12\":1,\"13\":7,\"15\":1,\"17\":4,\"18\":3,\"19\":6,\"20\":2,\"41\":2}}],[\"sdk\",{\"1\":{\"386\":1}}],[\"slowly\",{\"1\":{\"380\":1}}],[\"slice\",{\"0\":{\"301\":1},\"1\":{\"53\":1,\"74\":1,\"301\":6,\"338\":1,\"428\":1}}],[\"s2\",{\"1\":{\"354\":2}}],[\"s1\",{\"1\":{\"354\":2}}],[\"sync\",{\"1\":{\"314\":1,\"317\":1,\"318\":1,\"319\":2}}],[\"symbolconstructor\",{\"1\":{\"481\":1}}],[\"symbol是es6中的新类型\",{\"1\":{\"481\":1}}],[\"symbol\",{\"0\":{\"481\":1},\"1\":{\"14\":1,\"17\":1,\"32\":1,\"34\":4,\"359\":3,\"470\":1,\"481\":6}}],[\"symbols\",{\"1\":{\"14\":1}}],[\"skimdb\",{\"1\":{\"287\":1}}],[\"skywalker\",{\"1\":{\"43\":1,\"44\":2,\"179\":3}}],[\"signature\",{\"1\":{\"502\":2}}],[\"signatures\",{\"1\":{\"481\":1,\"499\":1}}],[\"signup\",{\"1\":{\"420\":1}}],[\"singledog\",{\"1\":{\"354\":4}}],[\"singleton2\",{\"1\":{\"354\":4}}],[\"singleton1\",{\"1\":{\"354\":4}}],[\"singleton\",{\"1\":{\"354\":22}}],[\"single\",{\"1\":{\"322\":1,\"327\":1}}],[\"size=\",{\"1\":{\"402\":1,\"403\":1,\"405\":1}}],[\"size\",{\"1\":{\"285\":1,\"320\":1}}],[\"sidebar\",{\"0\":{\"208\":2},\"1\":{\"20\":1,\"206\":4,\"207\":3,\"209\":4}}],[\"side\",{\"1\":{\"17\":1,\"20\":1}}],[\"src\",{\"1\":{\"240\":1,\"243\":1,\"269\":1,\"454\":2,\"523\":3,\"526\":2,\"527\":3,\"528\":4,\"529\":3,\"530\":2,\"531\":4,\"532\":4,\"534\":2,\"535\":2,\"536\":1,\"537\":1,\"539\":1,\"540\":1,\"544\":1,\"546\":1,\"547\":2,\"550\":1,\"551\":1}}],[\"src=\",{\"1\":{\"224\":3,\"244\":1,\"250\":1,\"251\":1,\"258\":1,\"269\":1,\"317\":1,\"319\":1,\"380\":3,\"399\":3}}],[\"smscontainer\",{\"1\":{\"196\":4}}],[\"smallsize\",{\"1\":{\"89\":5}}],[\"snake\",{\"1\":{\"193\":3,\"485\":3,\"486\":1}}],[\"svg\",{\"1\":{\"160\":6,\"398\":1}}],[\"swim\",{\"1\":{\"512\":19,\"517\":1}}],[\"switch\",{\"1\":{\"136\":2,\"282\":1,\"346\":1}}],[\"swc是用rust写的\",{\"1\":{\"464\":1}}],[\"swc的区别\",{\"0\":{\"464\":1}}],[\"swooosh\",{\"1\":{\"157\":2}}],[\"scully\",{\"1\":{\"177\":2}}],[\"scss\",{\"1\":{\"108\":2}}],[\"script可以配置多个规则\",{\"1\":{\"320\":1}}],[\"script\",{\"1\":{\"320\":1}}],[\"scripting\",{\"1\":{\"318\":3}}],[\"scripts\",{\"1\":{\"310\":2,\"320\":2}}],[\"script>\",{\"1\":{\"224\":5,\"244\":1,\"250\":1,\"251\":1,\"258\":2,\"269\":1,\"317\":1,\"319\":1,\"380\":4}}],[\"screen\",{\"1\":{\"20\":1}}],[\"scroll\",{\"1\":{\"13\":2,\"22\":3}}],[\"song\",{\"1\":{\"367\":8}}],[\"songname\",{\"1\":{\"367\":14}}],[\"solid\",{\"1\":{\"322\":1}}],[\"sortnumber\",{\"1\":{\"298\":2}}],[\"sort\",{\"0\":{\"298\":1},\"1\":{\"283\":1,\"298\":4,\"428\":1}}],[\"somelogo\",{\"1\":{\"283\":1}}],[\"somedomain\",{\"1\":{\"283\":2}}],[\"somekey\",{\"1\":{\"197\":2}}],[\"some\",{\"0\":{\"309\":1},\"1\":{\"103\":1,\"110\":1,\"125\":1,\"193\":1,\"309\":2,\"354\":4}}],[\"something\",{\"1\":{\"86\":1,\"204\":2,\"427\":1,\"480\":1,\"488\":4,\"518\":7,\"531\":2,\"532\":1,\"534\":1,\"535\":1}}],[\"somestack\",{\"1\":{\"50\":4}}],[\"so\",{\"1\":{\"47\":1,\"88\":1}}],[\"source\",{\"1\":{\"20\":1,\"504\":3}}],[\"sat\",{\"1\":{\"476\":6}}],[\"saruhashi\",{\"1\":{\"405\":1}}],[\"sass\",{\"1\":{\"108\":1}}],[\"sayhi\",{\"1\":{\"64\":4,\"529\":3,\"537\":1,\"538\":1}}],[\"san\",{\"1\":{\"41\":2}}],[\"save\",{\"1\":{\"19\":3,\"236\":1,\"241\":1,\"266\":1,\"269\":1,\"524\":1,\"526\":1,\"536\":1}}],[\"stuno\",{\"1\":{\"533\":1}}],[\"student\",{\"1\":{\"533\":6}}],[\"stub\",{\"1\":{\"220\":1}}],[\"stroke\",{\"1\":{\"398\":1}}],[\"strokewidth\",{\"1\":{\"398\":1}}],[\"strategies\",{\"1\":{\"375\":2}}],[\"street\",{\"1\":{\"359\":1}}],[\"strictnullchecks\",{\"1\":{\"478\":1,\"479\":1}}],[\"strictnullchecks标记\",{\"1\":{\"478\":1}}],[\"strict\",{\"1\":{\"274\":1}}],[\"string和number类型的元组\",{\"1\":{\"475\":1}}],[\"strings\",{\"0\":{\"61\":1,\"182\":1},\"1\":{\"133\":1,\"167\":1,\"213\":1}}],[\"string\",{\"0\":{\"473\":1},\"1\":{\"32\":1,\"34\":3,\"86\":3,\"88\":1,\"148\":1,\"182\":3,\"470\":1,\"473\":3,\"475\":4,\"477\":1,\"478\":2,\"480\":1,\"484\":3,\"487\":5,\"488\":8,\"490\":1,\"497\":4,\"498\":5,\"499\":25,\"500\":8,\"504\":4,\"505\":4,\"506\":4,\"508\":8,\"512\":8,\"515\":3,\"516\":5,\"519\":8,\"520\":4,\"523\":2,\"527\":2,\"528\":2,\"529\":5,\"531\":2,\"532\":1,\"533\":19,\"534\":1,\"535\":2,\"537\":4,\"538\":4,\"539\":2,\"540\":1,\"541\":1,\"543\":2,\"544\":7,\"546\":2,\"547\":2,\"550\":1,\"551\":1}}],[\"stdout\",{\"1\":{\"283\":1}}],[\"storage\",{\"1\":{\"283\":2,\"314\":1,\"315\":1,\"317\":4,\"318\":2,\"319\":2,\"320\":1}}],[\"story\",{\"1\":{\"176\":2}}],[\"stoppropagation\",{\"1\":{\"418\":2,\"419\":2}}],[\"stop\",{\"1\":{\"21\":1,\"63\":3,\"286\":1}}],[\"style=\",{\"1\":{\"400\":3}}],[\"stylesheet\",{\"1\":{\"317\":2,\"319\":1}}],[\"styles\",{\"0\":{\"212\":1}}],[\"style\",{\"1\":{\"108\":1,\"317\":1,\"318\":1,\"319\":1,\"320\":1,\"363\":1,\"400\":2}}],[\"standalone\",{\"1\":{\"380\":1}}],[\"standard\",{\"0\":{\"215\":1}}],[\"stage\",{\"0\":{\"214\":1},\"1\":{\"160\":3}}],[\"statetoprocessor\",{\"1\":{\"333\":3}}],[\"state\",{\"0\":{\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":3,\"426\":1,\"427\":1,\"428\":1,\"431\":1,\"435\":1,\"436\":1,\"437\":1,\"451\":1},\"1\":{\"331\":1,\"333\":8,\"406\":1,\"411\":2,\"421\":1,\"422\":4,\"423\":2,\"425\":1,\"426\":5,\"427\":7,\"428\":4,\"431\":14,\"433\":3,\"434\":1,\"436\":2,\"439\":1,\"440\":1,\"442\":1,\"445\":2,\"457\":1,\"458\":1}}],[\"statements\",{\"0\":{\"144\":1}}],[\"statuscode\",{\"1\":{\"513\":4}}],[\"status\",{\"1\":{\"285\":1}}],[\"statically\",{\"1\":{\"533\":1}}],[\"static\",{\"1\":{\"98\":1,\"354\":1}}],[\"starting\",{\"1\":{\"380\":1}}],[\"started128\",{\"1\":{\"317\":3}}],[\"started16\",{\"1\":{\"317\":3}}],[\"started48\",{\"1\":{\"317\":3}}],[\"started32\",{\"1\":{\"317\":3}}],[\"started\",{\"1\":{\"311\":1,\"312\":1,\"315\":1,\"317\":3,\"318\":1,\"319\":1}}],[\"startup\",{\"1\":{\"286\":1}}],[\"startrunning\",{\"1\":{\"146\":2}}],[\"start\",{\"1\":{\"21\":1,\"286\":3,\"320\":2,\"380\":1}}],[\"still\",{\"1\":{\"75\":1,\"78\":1}}],[\"step\",{\"1\":{\"21\":2}}],[\"specify\",{\"1\":{\"498\":1}}],[\"spreads\",{\"1\":{\"213\":1}}],[\"spot\",{\"1\":{\"119\":1}}],[\"splice\",{\"0\":{\"302\":1},\"1\":{\"92\":2,\"302\":6,\"337\":1,\"338\":1,\"428\":2}}],[\"split\",{\"1\":{\"18\":1,\"508\":4}}],[\"space\",{\"1\":{\"17\":1,\"88\":1}}],[\"sun\",{\"1\":{\"476\":6}}],[\"suitable\",{\"1\":{\"380\":1}}],[\"successfully\",{\"1\":{\"282\":2}}],[\"supplied\",{\"1\":{\"502\":2}}],[\"supports\",{\"1\":{\"193\":1}}],[\"supertype\",{\"1\":{\"325\":1}}],[\"superman\",{\"1\":{\"177\":2}}],[\"superlonglonglonglonglonglonglonglongstring\",{\"1\":{\"124\":2}}],[\"superlonglonglonglonglonglonglonglongfunctionname\",{\"1\":{\"124\":2}}],[\"superpower\",{\"1\":{\"118\":4,\"129\":3,\"130\":2,\"176\":2}}],[\"super\",{\"1\":{\"63\":3,\"96\":2,\"152\":1,\"153\":1,\"333\":3,\"350\":4}}],[\"sum\",{\"1\":{\"110\":8,\"123\":3,\"493\":3,\"502\":6}}],[\"substring\",{\"1\":{\"504\":3}}],[\"substr\",{\"1\":{\"475\":3}}],[\"substitution\",{\"1\":{\"322\":1}}],[\"subscribe\",{\"1\":{\"336\":1,\"337\":3}}],[\"subtype\",{\"1\":{\"325\":1}}],[\"subtract\",{\"1\":{\"78\":1}}],[\"subjectproxy\",{\"1\":{\"371\":2}}],[\"subject\",{\"1\":{\"55\":4}}],[\"subregions\",{\"1\":{\"13\":2}}],[\"suggestion\",{\"1\":{\"17\":1}}],[\"seven\",{\"1\":{\"484\":3,\"487\":1,\"488\":1}}],[\"sentence\",{\"1\":{\"473\":2}}],[\"sensitive\",{\"1\":{\"15\":1}}],[\"segregation\",{\"1\":{\"322\":1}}],[\"service\",{\"1\":{\"312\":2,\"315\":1,\"316\":2,\"317\":5}}],[\"server\",{\"1\":{\"283\":1,\"285\":1,\"291\":2}}],[\"seriously\",{\"0\":{\"220\":1}}],[\"sean\",{\"1\":{\"294\":2,\"295\":1,\"296\":2,\"297\":1}}],[\"seajs\",{\"1\":{\"255\":3,\"258\":1}}],[\"sea\",{\"0\":{\"254\":1},\"1\":{\"252\":1,\"255\":1,\"256\":1,\"258\":1}}],[\"searchfunc\",{\"1\":{\"504\":2}}],[\"search\",{\"0\":{\"15\":1},\"1\":{\"20\":2,\"504\":1}}],[\"self\",{\"1\":{\"192\":2}}],[\"selector\",{\"1\":{\"523\":2,\"527\":8,\"528\":2,\"535\":1}}],[\"selectall\",{\"1\":{\"160\":3}}],[\"selectedclassname\",{\"1\":{\"319\":5}}],[\"selected\",{\"1\":{\"16\":1,\"160\":3}}],[\"select\",{\"1\":{\"15\":1,\"16\":3}}],[\"selection\",{\"0\":{\"16\":1},\"1\":{\"13\":2,\"15\":2,\"16\":6,\"17\":1,\"22\":1}}],[\"semicolon\",{\"1\":{\"179\":1}}],[\"semicolons\",{\"0\":{\"178\":1}}],[\"setpoint\",{\"1\":{\"533\":2}}],[\"setpagebackgroundcolor\",{\"1\":{\"318\":3}}],[\"setnumber\",{\"1\":{\"425\":5,\"426\":6}}],[\"setname\",{\"1\":{\"121\":2,\"371\":1,\"533\":6}}],[\"setindex\",{\"1\":{\"422\":2}}],[\"setter\",{\"1\":{\"422\":2}}],[\"setting\",{\"1\":{\"371\":2}}],[\"settings\",{\"1\":{\"12\":1,\"531\":2,\"532\":1,\"534\":3,\"535\":1}}],[\"settimeout\",{\"1\":{\"275\":1,\"276\":1}}],[\"setattribute\",{\"1\":{\"363\":1}}],[\"setage\",{\"1\":{\"163\":4,\"200\":1}}],[\"setstate\",{\"1\":{\"333\":2}}],[\"setsidebar\",{\"1\":{\"207\":2}}],[\"set\",{\"1\":{\"149\":3,\"156\":2,\"200\":1,\"202\":2,\"314\":2,\"319\":1,\"359\":6,\"371\":1,\"441\":1}}],[\"setheight\",{\"1\":{\"94\":4}}],[\"secondinstance\",{\"1\":{\"354\":4}}],[\"second\",{\"1\":{\"59\":2}}],[\"s\",{\"1\":{\"12\":1,\"19\":3,\"66\":1,\"68\":1,\"88\":1,\"317\":1,\"380\":1,\"399\":2}}],[\"shape\",{\"1\":{\"358\":4,\"496\":1}}],[\"shadow\",{\"1\":{\"317\":1}}],[\"shrink\",{\"1\":{\"16\":1}}],[\"should\",{\"1\":{\"153\":1,\"197\":2}}],[\"shouldn\",{\"1\":{\"152\":1}}],[\"shorthand\",{\"1\":{\"213\":1}}],[\"short\",{\"1\":{\"68\":1}}],[\"shortcuts\",{\"1\":{\"12\":1}}],[\"shownotification\",{\"1\":{\"459\":1}}],[\"showmsg\",{\"1\":{\"250\":3,\"251\":3}}],[\"show\",{\"1\":{\"12\":1,\"14\":2,\"17\":1,\"19\":1,\"20\":6,\"21\":1,\"22\":1,\"253\":2,\"257\":10,\"286\":1,\"320\":1,\"354\":1}}],[\"shift+space\",{\"1\":{\"17\":1}}],[\"shift+alt\",{\"1\":{\"16\":2}}],[\"shift\",{\"0\":{\"296\":1},\"1\":{\"12\":2,\"13\":7,\"14\":4,\"15\":1,\"16\":5,\"17\":2,\"18\":1,\"19\":3,\"20\":10,\"21\":2,\"22\":2,\"297\":1,\"428\":1}}],[\"npx\",{\"1\":{\"383\":1,\"384\":1,\"385\":1,\"386\":1,\"388\":2,\"389\":2,\"390\":1}}],[\"npm包发布\",{\"0\":{\"288\":1}}],[\"npmmirror\",{\"1\":{\"287\":2}}],[\"npm\",{\"0\":{\"536\":1,\"545\":1},\"1\":{\"236\":1,\"241\":2,\"266\":2,\"281\":1,\"283\":1,\"286\":1,\"287\":3,\"289\":2,\"290\":3,\"291\":3,\"390\":1,\"463\":1,\"468\":1,\"524\":2,\"525\":3,\"526\":1,\"536\":9,\"537\":2,\"542\":1,\"543\":1,\"545\":2,\"546\":1,\"550\":1}}],[\"npmjs\",{\"1\":{\"46\":1,\"283\":8,\"287\":2}}],[\"nrm\",{\"1\":{\"287\":4}}],[\"nightly\",{\"1\":{\"285\":2}}],[\"nightingale\",{\"1\":{\"177\":3}}],[\"now\",{\"1\":{\"486\":1}}],[\"nowhere\",{\"1\":{\"63\":3}}],[\"none\",{\"1\":{\"317\":2}}],[\"notsure\",{\"1\":{\"477\":6}}],[\"notanumber\",{\"1\":{\"472\":2}}],[\"notify\",{\"1\":{\"337\":3}}],[\"notifications\",{\"1\":{\"320\":1}}],[\"notice\",{\"1\":{\"289\":1,\"290\":1}}],[\"nothing\",{\"1\":{\"177\":3}}],[\"not\",{\"1\":{\"128\":1,\"129\":3,\"177\":2,\"182\":1,\"197\":3,\"346\":1,\"350\":1,\"380\":1,\"471\":1,\"475\":1,\"484\":2,\"487\":2,\"488\":3,\"490\":2,\"497\":1,\"498\":2,\"499\":4,\"500\":1,\"502\":2,\"512\":4,\"514\":2,\"552\":1}}],[\"notdefined\",{\"1\":{\"127\":1}}],[\"note\",{\"0\":{\"72\":1},\"1\":{\"177\":2,\"380\":1}}],[\"no\",{\"0\":{\"220\":1},\"1\":{\"95\":1,\"149\":6,\"481\":1,\"486\":1}}],[\"nope\",{\"1\":{\"72\":1,\"190\":1}}],[\"nodejs\",{\"1\":{\"551\":1}}],[\"nodelist\",{\"1\":{\"493\":1}}],[\"node\",{\"1\":{\"229\":1,\"235\":1,\"536\":2,\"551\":3}}],[\"nodes\",{\"1\":{\"52\":2}}],[\"node命令\",{\"0\":{\"8\":1}}],[\"noa\",{\"1\":{\"47\":2}}],[\"native\",{\"1\":{\"386\":1}}],[\"naming\",{\"0\":{\"187\":1}}],[\"name=\",{\"1\":{\"533\":1}}],[\"name>\",{\"1\":{\"286\":1}}],[\"namespace\",{\"0\":{\"531\":1,\"539\":1,\"543\":1},\"1\":{\"522\":3,\"526\":1,\"531\":10,\"532\":5,\"534\":2,\"535\":1,\"536\":1,\"539\":4,\"541\":2,\"542\":1,\"543\":6,\"544\":2,\"549\":1}}],[\"namespace模式\",{\"1\":{\"224\":1}}],[\"names\",{\"1\":{\"285\":1}}],[\"name\",{\"1\":{\"41\":2,\"62\":3,\"64\":8,\"66\":2,\"68\":1,\"73\":2,\"77\":2,\"95\":4,\"96\":2,\"121\":6,\"134\":2,\"148\":2,\"150\":2,\"155\":3,\"167\":2,\"179\":6,\"190\":6,\"193\":1,\"235\":2,\"240\":1,\"250\":2,\"251\":2,\"265\":1,\"274\":6,\"275\":7,\"276\":8,\"277\":4,\"285\":2,\"311\":1,\"312\":1,\"315\":1,\"317\":3,\"318\":1,\"319\":1,\"320\":1,\"337\":8,\"346\":17,\"350\":3,\"359\":3,\"371\":18,\"399\":1,\"400\":2,\"402\":1,\"403\":2,\"405\":1,\"408\":5,\"409\":1,\"410\":1,\"473\":2,\"479\":1,\"482\":1,\"497\":6,\"498\":7,\"499\":9,\"500\":6,\"512\":10,\"515\":1,\"516\":6,\"519\":8,\"520\":2,\"523\":1,\"529\":6,\"533\":15,\"534\":1,\"537\":5,\"538\":3,\"539\":2}}],[\"named2\",{\"1\":{\"103\":3}}],[\"named1\",{\"1\":{\"103\":3}}],[\"named\",{\"1\":{\"41\":1,\"129\":10}}],[\"nan\",{\"1\":{\"133\":1,\"216\":1,\"472\":2}}],[\"navigate\",{\"1\":{\"14\":1}}],[\"navigation\",{\"0\":{\"14\":1}}],[\"nuxt\",{\"1\":{\"391\":1}}],[\"nursing\",{\"1\":{\"177\":2}}],[\"num++\",{\"1\":{\"123\":1}}],[\"num\",{\"1\":{\"110\":10,\"123\":5,\"478\":2}}],[\"numberarray\",{\"1\":{\"492\":3}}],[\"number和null\",{\"1\":{\"485\":1}}],[\"numbers\",{\"0\":{\"183\":1},\"1\":{\"110\":8,\"133\":1}}],[\"numberinarray\",{\"1\":{\"56\":2}}],[\"number\",{\"0\":{\"216\":1,\"217\":1,\"472\":1},\"1\":{\"32\":1,\"34\":4,\"86\":8,\"88\":2,\"183\":2,\"216\":3,\"217\":2,\"425\":9,\"426\":6,\"470\":1,\"472\":7,\"473\":1,\"474\":1,\"475\":5,\"478\":3,\"484\":2,\"487\":6,\"488\":10,\"490\":6,\"492\":2,\"493\":7,\"497\":2,\"498\":4,\"499\":13,\"500\":4,\"502\":9,\"503\":9,\"508\":10,\"513\":10,\"514\":2,\"531\":1,\"533\":13,\"541\":1,\"543\":2}}],[\"null\",{\"0\":{\"409\":1,\"478\":1},\"1\":{\"32\":1,\"34\":4,\"46\":1,\"82\":1,\"133\":1,\"137\":3,\"333\":1,\"350\":1,\"359\":1,\"403\":1,\"408\":1,\"409\":3,\"447\":1,\"449\":1,\"450\":2,\"454\":2,\"470\":1,\"478\":8,\"479\":1,\"485\":1}}],[\"need\",{\"1\":{\"482\":1}}],[\"never\",{\"1\":{\"480\":2}}],[\"never类型是任何类型的子类型\",{\"1\":{\"480\":1}}],[\"never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型\",{\"1\":{\"480\":1}}],[\"never类型表示的是那些永不存在的值的类型\",{\"1\":{\"480\":1}}],[\"never类型\",{\"0\":{\"480\":1},\"1\":{\"470\":1,\"480\":1}}],[\"net\",{\"1\":{\"342\":1}}],[\"nextnumber\",{\"1\":{\"86\":4}}],[\"next\",{\"0\":{\"383\":1,\"391\":1},\"1\":{\"14\":1,\"15\":3,\"18\":1,\"19\":1,\"383\":3,\"391\":2,\"473\":2}}],[\"newvalue\",{\"1\":{\"427\":1}}],[\"newset\",{\"1\":{\"359\":3}}],[\"newmap\",{\"1\":{\"359\":3}}],[\"newtab\",{\"1\":{\"320\":2}}],[\"new绑定\",{\"0\":{\"277\":1},\"1\":{\"273\":1}}],[\"new\",{\"1\":{\"12\":1,\"19\":2,\"22\":1,\"34\":12,\"40\":1,\"49\":1,\"78\":1,\"82\":2,\"94\":2,\"118\":2,\"148\":2,\"150\":2,\"163\":2,\"182\":1,\"183\":1,\"186\":1,\"190\":2,\"277\":12,\"333\":3,\"337\":3,\"345\":1,\"346\":10,\"350\":14,\"354\":5,\"358\":1,\"359\":9,\"363\":3,\"367\":8,\"371\":3,\"380\":2,\"471\":3,\"480\":1,\"485\":6,\"486\":3,\"529\":1,\"531\":1,\"537\":1}}],[\"n\",{\"1\":{\"12\":1,\"19\":1,\"426\":8,\"478\":1}}],[\"快照\",{\"1\":{\"427\":1}}],[\"快去登录\",{\"1\":{\"363\":1}}],[\"快速排序\",{\"1\":{\"332\":1}}],[\"快速修复\",{\"1\":{\"17\":1}}],[\"快速打开\",{\"1\":{\"12\":1}}],[\"快捷键\",{\"1\":{\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"快捷键大全\",{\"0\":{\"11\":1}}],[\"fn\",{\"1\":{\"275\":3,\"276\":4,\"359\":2,\"532\":5}}],[\"fetching\",{\"1\":{\"149\":2}}],[\"flushsync\",{\"0\":{\"451\":1},\"1\":{\"451\":1}}],[\"florence\",{\"1\":{\"177\":2}}],[\"flying\",{\"1\":{\"129\":1,\"130\":2}}],[\"flatten\",{\"1\":{\"55\":5}}],[\"factory\",{\"1\":{\"346\":5,\"349\":1,\"350\":6}}],[\"favicon\",{\"1\":{\"283\":3}}],[\"favicon地址\",{\"1\":{\"283\":1}}],[\"failed\",{\"1\":{\"167\":2,\"480\":1}}],[\"fail\",{\"1\":{\"167\":2,\"480\":1}}],[\"fast\",{\"1\":{\"63\":3}}],[\"false\",{\"1\":{\"34\":1,\"46\":1,\"55\":2,\"75\":1,\"86\":1,\"121\":4,\"133\":4,\"138\":2,\"141\":5,\"201\":2,\"216\":2,\"217\":1,\"283\":1,\"308\":1,\"309\":1,\"408\":1,\"471\":1,\"477\":1,\"512\":2,\"513\":4}}],[\"fri\",{\"1\":{\"476\":4}}],[\"fragment>\",{\"1\":{\"410\":1}}],[\"fragment\",{\"1\":{\"395\":2,\"396\":1,\"410\":2}}],[\"francisco\",{\"1\":{\"41\":2}}],[\"from来将一个可迭代的对象转换成数组\",{\"0\":{\"52\":1}}],[\"from\",{\"1\":{\"46\":1,\"52\":1,\"53\":1,\"54\":1,\"68\":1,\"100\":2,\"101\":2,\"102\":2,\"103\":4,\"106\":4,\"107\":2,\"108\":4,\"159\":3,\"193\":11,\"196\":3,\"260\":2,\"263\":1,\"268\":3,\"269\":4,\"410\":1,\"422\":1,\"425\":1,\"426\":1,\"442\":4,\"448\":1,\"449\":1,\"453\":1,\"454\":1,\"459\":1,\"493\":1,\"525\":1,\"536\":1,\"537\":1,\"539\":1,\"540\":3,\"541\":3,\"547\":4,\"548\":1,\"551\":1}}],[\"fuelled\",{\"1\":{\"400\":1}}],[\"fun2\",{\"1\":{\"268\":5,\"269\":2}}],[\"fun1\",{\"1\":{\"268\":5,\"269\":2}}],[\"func\",{\"0\":{\"71\":1},\"1\":{\"68\":2,\"171\":3}}],[\"function`\",{\"1\":{\"512\":2}}],[\"function的错误\",{\"1\":{\"350\":1}}],[\"function是一个和function不一样的独特结构\",{\"1\":{\"112\":1}}],[\"functional\",{\"1\":{\"110\":2}}],[\"functions\",{\"0\":{\"67\":1,\"84\":1},\"1\":{\"213\":1}}],[\"function\",{\"0\":{\"192\":1,\"528\":1},\"1\":{\"33\":1,\"34\":8,\"41\":1,\"42\":1,\"58\":3,\"60\":2,\"64\":4,\"68\":5,\"69\":3,\"70\":3,\"72\":1,\"73\":2,\"74\":2,\"75\":3,\"76\":1,\"77\":2,\"78\":2,\"79\":5,\"80\":2,\"81\":4,\"82\":1,\"83\":2,\"85\":1,\"86\":1,\"92\":2,\"93\":2,\"94\":2,\"105\":2,\"112\":11,\"115\":1,\"121\":3,\"122\":2,\"125\":2,\"127\":4,\"128\":4,\"129\":6,\"130\":2,\"136\":2,\"141\":2,\"143\":6,\"148\":2,\"149\":3,\"150\":2,\"155\":3,\"156\":2,\"157\":2,\"161\":4,\"162\":2,\"164\":2,\"168\":2,\"177\":3,\"179\":2,\"188\":2,\"189\":2,\"190\":1,\"192\":5,\"193\":2,\"194\":1,\"207\":2,\"219\":1,\"224\":10,\"231\":1,\"232\":1,\"237\":2,\"246\":3,\"250\":6,\"251\":4,\"253\":4,\"257\":8,\"260\":3,\"263\":1,\"268\":4,\"274\":2,\"275\":3,\"276\":7,\"277\":1,\"298\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":2,\"309\":2,\"318\":2,\"319\":2,\"346\":20,\"350\":6,\"354\":9,\"358\":4,\"359\":2,\"363\":1,\"367\":6,\"375\":3,\"380\":1,\"399\":1,\"400\":1,\"402\":2,\"403\":2,\"404\":2,\"405\":3,\"410\":2,\"415\":2,\"416\":5,\"418\":2,\"420\":1,\"425\":1,\"426\":1,\"453\":1,\"454\":3,\"456\":1,\"459\":1,\"476\":1,\"479\":1,\"480\":3,\"486\":3,\"488\":2,\"493\":5,\"502\":9,\"503\":3,\"504\":1,\"505\":2,\"506\":2,\"507\":4,\"508\":4,\"512\":6,\"513\":4,\"515\":2,\"516\":2,\"517\":1,\"518\":3,\"519\":2,\"520\":2,\"522\":1,\"526\":1,\"527\":3,\"528\":6,\"531\":4,\"532\":7,\"534\":1,\"535\":2,\"537\":1,\"538\":1,\"539\":1,\"540\":2,\"541\":1,\"543\":2,\"547\":2,\"548\":1,\"550\":1,\"551\":1}}],[\"fullname\",{\"1\":{\"163\":6}}],[\"full\",{\"1\":{\"20\":1}}],[\"f5\",{\"1\":{\"21\":2}}],[\"f9bb2d\",{\"1\":{\"319\":1}}],[\"f9\",{\"1\":{\"21\":1}}],[\"f4\",{\"1\":{\"18\":1,\"19\":1,\"81\":1}}],[\"f2\",{\"1\":{\"16\":1,\"17\":1,\"80\":1,\"81\":1}}],[\"f3\",{\"1\":{\"15\":2,\"81\":1}}],[\"fish\",{\"1\":{\"512\":15,\"517\":4}}],[\"fibonacci\",{\"1\":{\"490\":4,\"491\":1,\"492\":1}}],[\"field\",{\"1\":{\"441\":1}}],[\"firefoxelements\",{\"1\":{\"350\":3}}],[\"firefox文本框\",{\"1\":{\"350\":1}}],[\"firefox\",{\"1\":{\"350\":6}}],[\"firefox按钮\",{\"1\":{\"350\":1}}],[\"firefoxtextbox\",{\"1\":{\"350\":2}}],[\"firefoxbutton\",{\"1\":{\"350\":2}}],[\"firefoxfactory\",{\"1\":{\"350\":2}}],[\"firstinstance\",{\"1\":{\"354\":8}}],[\"first\",{\"1\":{\"59\":2}}],[\"firstname\",{\"1\":{\"58\":7,\"176\":2,\"177\":10,\"191\":4,\"505\":6,\"506\":4}}],[\"fight\",{\"1\":{\"157\":4}}],[\"filter\",{\"0\":{\"307\":1},\"1\":{\"55\":2,\"110\":1,\"123\":1,\"307\":1,\"428\":1}}],[\"filename\",{\"1\":{\"102\":2,\"193\":7}}],[\"files\",{\"1\":{\"20\":1,\"523\":1,\"526\":1}}],[\"file\",{\"0\":{\"19\":1},\"1\":{\"12\":1,\"13\":2,\"14\":1,\"17\":1,\"19\":5,\"193\":6,\"197\":1,\"282\":3,\"283\":2}}],[\"fixme\",{\"1\":{\"152\":1}}],[\"fix\",{\"1\":{\"17\":1}}],[\"findindex\",{\"1\":{\"110\":1}}],[\"find\",{\"1\":{\"15\":5,\"110\":1,\"160\":6,\"209\":2,\"482\":1,\"523\":1}}],[\"f\",{\"1\":{\"15\":1,\"17\":2,\"18\":1,\"20\":1,\"79\":1,\"136\":2,\"547\":1}}],[\"found\",{\"1\":{\"552\":1}}],[\"following\",{\"1\":{\"493\":1}}],[\"follow\",{\"1\":{\"69\":1,\"505\":1}}],[\"folder\",{\"1\":{\"18\":1}}],[\"fold\",{\"1\":{\"13\":3}}],[\"food\",{\"1\":{\"346\":20}}],[\"foosass\",{\"1\":{\"108\":2}}],[\"foo\",{\"1\":{\"32\":3,\"33\":3,\"45\":2,\"52\":4,\"53\":1,\"54\":2,\"66\":3,\"68\":2,\"70\":3,\"73\":2,\"83\":4,\"86\":3,\"90\":5,\"97\":3,\"98\":4,\"103\":7,\"104\":4,\"105\":2,\"106\":6,\"108\":2,\"112\":6,\"124\":4,\"136\":2,\"137\":3,\"138\":2,\"139\":2,\"141\":1,\"143\":2,\"145\":7,\"155\":1,\"161\":6,\"162\":4,\"164\":8,\"165\":4,\"166\":2,\"167\":12,\"168\":4,\"169\":2,\"170\":6,\"172\":3,\"192\":3,\"219\":1,\"224\":10,\"237\":6,\"260\":2,\"268\":4,\"269\":2,\"274\":5,\"275\":18,\"276\":17,\"277\":3,\"514\":9,\"517\":1,\"523\":7,\"525\":2,\"527\":2,\"528\":2,\"534\":1,\"535\":2,\"536\":9,\"537\":3,\"538\":1,\"539\":6,\"540\":12,\"541\":16,\"543\":10,\"544\":3,\"546\":1,\"547\":9,\"548\":1,\"550\":2,\"551\":3}}],[\"form\",{\"1\":{\"441\":1}}],[\"form>\",{\"1\":{\"420\":1}}],[\"format\",{\"1\":{\"17\":2,\"283\":1}}],[\"forty\",{\"1\":{\"193\":2}}],[\"fortytwo\",{\"1\":{\"193\":5}}],[\"force\",{\"1\":{\"110\":1}}],[\"foreach\",{\"0\":{\"305\":1},\"1\":{\"110\":2,\"305\":1,\"337\":2,\"338\":1,\"507\":2}}],[\"for\",{\"0\":{\"88\":1,\"110\":1},\"1\":{\"51\":1,\"110\":2,\"123\":1,\"282\":1,\"319\":1,\"359\":3,\"380\":3}}],[\"forwardref\",{\"1\":{\"448\":3}}],[\"forward\",{\"1\":{\"14\":1}}],[\"focus\",{\"1\":{\"14\":1,\"18\":2,\"20\":1,\"449\":3}}],[\"f8\",{\"1\":{\"14\":2}}],[\"f10\",{\"1\":{\"21\":1}}],[\"f11\",{\"1\":{\"20\":1,\"21\":2}}],[\"f12\",{\"1\":{\"17\":4}}],[\"f1\",{\"1\":{\"12\":1,\"80\":1,\"81\":1}}],[\"cms\",{\"1\":{\"385\":1}}],[\"cmd解决方案\",{\"1\":{\"270\":1}}],[\"cmd模块定义规范\",{\"1\":{\"252\":1}}],[\"cmd\",{\"0\":{\"252\":1}}],[\"cmd规范与amd规范很相似\",{\"1\":{\"270\":1}}],[\"cmd规范基本语法\",{\"0\":{\"253\":1}}],[\"cmd规范整合了commonjs和amd规范的特点\",{\"1\":{\"252\":1}}],[\"cmd规范专门用于浏览器端\",{\"1\":{\"252\":1}}],[\"cmd规范\",{\"1\":{\"226\":1}}],[\"circle\",{\"1\":{\"358\":10}}],[\"city\",{\"1\":{\"167\":2,\"359\":1}}],[\"cb\",{\"1\":{\"338\":6}}],[\"cgreen\",{\"1\":{\"314\":1}}],[\"cp\",{\"1\":{\"285\":1}}],[\"cnpmjs\",{\"1\":{\"287\":1}}],[\"cnpm\",{\"1\":{\"287\":1}}],[\"cn\",{\"1\":{\"248\":1,\"320\":1}}],[\"crypt\",{\"1\":{\"282\":1}}],[\"croll的真理\",{\"0\":{\"135\":1}}],[\"createzoo\",{\"1\":{\"486\":1}}],[\"createconnection\",{\"1\":{\"455\":1}}],[\"createcontext\",{\"1\":{\"442\":3}}],[\"createroot\",{\"1\":{\"380\":1}}],[\"create方法就是原型模式的天然实现\",{\"1\":{\"357\":1}}],[\"createinstance\",{\"1\":{\"354\":2}}],[\"createuielements\",{\"1\":{\"350\":3}}],[\"createtextbox\",{\"1\":{\"350\":5}}],[\"createteacher\",{\"1\":{\"346\":2}}],[\"createbutton\",{\"1\":{\"350\":5}}],[\"create区别\",{\"1\":{\"350\":1}}],[\"createstudent\",{\"1\":{\"346\":1}}],[\"createelement\",{\"1\":{\"319\":1}}],[\"createdbyboolean\",{\"1\":{\"471\":1}}],[\"createdbynewboolean\",{\"1\":{\"471\":2}}],[\"created\",{\"1\":{\"285\":2,\"337\":1}}],[\"createhero\",{\"1\":{\"177\":6}}],[\"create\",{\"1\":{\"22\":1,\"46\":1,\"333\":6,\"350\":3,\"358\":3,\"383\":1,\"384\":1,\"385\":1,\"386\":1,\"388\":2,\"389\":2,\"390\":1,\"463\":1}}],[\"children\",{\"1\":{\"405\":4,\"416\":2,\"418\":2,\"442\":1}}],[\"chromeelements\",{\"1\":{\"350\":3}}],[\"chrome文本框\",{\"1\":{\"350\":1}}],[\"chrome按钮\",{\"1\":{\"350\":1}}],[\"chrometextbox\",{\"1\":{\"350\":2}}],[\"chromebutton\",{\"1\":{\"350\":2}}],[\"chromefactory\",{\"1\":{\"350\":2}}],[\"chrome40以后的插件配置页写法\",{\"1\":{\"320\":1}}],[\"chrome40以前的插件配置页写法\",{\"1\":{\"320\":1}}],[\"chrome\",{\"1\":{\"311\":2,\"312\":2,\"314\":2,\"317\":2,\"318\":5,\"319\":2,\"320\":2,\"350\":6}}],[\"chown\",{\"1\":{\"291\":1}}],[\"chmod\",{\"1\":{\"285\":1}}],[\"checked\",{\"1\":{\"532\":2}}],[\"checkpermission\",{\"1\":{\"371\":3}}],[\"check\",{\"1\":{\"193\":1,\"477\":1,\"532\":2}}],[\"checkbox\",{\"1\":{\"193\":7}}],[\"checkname\",{\"1\":{\"121\":2}}],[\"changing\",{\"1\":{\"482\":1}}],[\"changebuttontext\",{\"1\":{\"363\":2}}],[\"changebuttonstatus\",{\"1\":{\"363\":2}}],[\"changestate\",{\"1\":{\"333\":2}}],[\"changecolor\",{\"1\":{\"317\":5,\"318\":1}}],[\"changed\",{\"1\":{\"197\":1}}],[\"change\",{\"1\":{\"17\":1,\"482\":1}}],[\"chatroom\",{\"1\":{\"459\":1}}],[\"charset=\",{\"1\":{\"380\":1}}],[\"chart\",{\"1\":{\"177\":2}}],[\"chaoyang\",{\"1\":{\"359\":1}}],[\"css\",{\"0\":{\"400\":1},\"1\":{\"108\":4,\"207\":2,\"224\":1,\"251\":1,\"269\":1,\"310\":1,\"313\":1,\"317\":5,\"319\":1,\"320\":3,\"400\":2}}],[\"can\",{\"1\":{\"533\":1}}],[\"cannot\",{\"1\":{\"274\":1,\"482\":1,\"500\":2,\"505\":1,\"523\":1,\"527\":2,\"529\":1}}],[\"cache\",{\"1\":{\"515\":2,\"519\":2,\"520\":2}}],[\"card>\",{\"1\":{\"405\":1}}],[\"card\",{\"1\":{\"405\":3}}],[\"car\",{\"1\":{\"346\":7}}],[\"catch\",{\"1\":{\"371\":1}}],[\"cat\",{\"1\":{\"346\":4,\"505\":2,\"506\":5,\"512\":15,\"515\":3,\"516\":16,\"517\":6,\"519\":28,\"520\":3,\"529\":1,\"533\":2,\"537\":1}}],[\"cats\",{\"1\":{\"143\":2}}],[\"camelcase\",{\"1\":{\"193\":7}}],[\"casting\",{\"0\":{\"180\":1}}],[\"case\",{\"1\":{\"15\":1,\"136\":7,\"193\":3,\"346\":1}}],[\"calendarkey\",{\"1\":{\"547\":1,\"548\":2}}],[\"calculatebonus\",{\"1\":{\"375\":1}}],[\"calculatearea\",{\"1\":{\"358\":3}}],[\"calculator\",{\"1\":{\"152\":1,\"153\":1}}],[\"callee\",{\"1\":{\"493\":3}}],[\"callbacks\",{\"1\":{\"338\":3}}],[\"callback\",{\"1\":{\"86\":3,\"338\":2}}],[\"call\",{\"1\":{\"34\":14,\"46\":2,\"53\":1,\"74\":1,\"80\":1,\"87\":2,\"121\":1,\"160\":2,\"276\":8,\"350\":2,\"481\":1,\"502\":2}}],[\"capture\",{\"1\":{\"419\":1}}],[\"capt\",{\"1\":{\"62\":2}}],[\"cleanup\",{\"0\":{\"455\":1},\"1\":{\"453\":1,\"455\":2}}],[\"cloneobj\",{\"1\":{\"359\":4}}],[\"clonedcircle\",{\"1\":{\"358\":3}}],[\"clone\",{\"1\":{\"358\":2}}],[\"cloud\",{\"1\":{\"287\":1}}],[\"closed\",{\"1\":{\"19\":1,\"322\":1}}],[\"close\",{\"1\":{\"12\":1,\"18\":2,\"19\":2}}],[\"cli\",{\"0\":{\"266\":1},\"1\":{\"266\":1}}],[\"click\",{\"1\":{\"16\":1,\"318\":1,\"319\":1,\"363\":1}}],[\"clark\",{\"1\":{\"166\":2}}],[\"classid\",{\"1\":{\"533\":1}}],[\"classname=\",{\"1\":{\"399\":1,\"405\":1,\"408\":4,\"409\":1,\"418\":1}}],[\"classname\",{\"1\":{\"398\":1,\"533\":4}}],[\"classlist\",{\"1\":{\"319\":3}}],[\"classed\",{\"1\":{\"160\":2}}],[\"classes\",{\"0\":{\"91\":1},\"1\":{\"213\":1,\"496\":1}}],[\"class语法更简洁更易理解\",{\"1\":{\"92\":1}}],[\"class\",{\"0\":{\"529\":1},\"1\":{\"34\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":3,\"97\":3,\"98\":4,\"136\":2,\"152\":1,\"153\":1,\"163\":2,\"190\":1,\"193\":1,\"200\":2,\"202\":1,\"333\":7,\"337\":2,\"338\":1,\"350\":10,\"354\":1,\"363\":2,\"367\":3,\"371\":2,\"378\":1,\"398\":2,\"513\":4,\"522\":1,\"526\":1,\"529\":4,\"531\":2,\"533\":4,\"537\":1,\"538\":1,\"540\":1}}],[\"customoptions\",{\"1\":{\"544\":2}}],[\"customclick\",{\"1\":{\"531\":2}}],[\"custom\",{\"1\":{\"320\":1}}],[\"customname\",{\"1\":{\"260\":2}}],[\"currentstate\",{\"1\":{\"333\":3}}],[\"currentcolor\",{\"1\":{\"319\":2}}],[\"currentwindow\",{\"1\":{\"318\":1}}],[\"currentuser\",{\"1\":{\"72\":2}}],[\"current\",{\"1\":{\"16\":3,\"149\":2,\"150\":2,\"317\":1,\"319\":5,\"445\":1,\"449\":1,\"450\":3,\"454\":4}}],[\"cursor\",{\"0\":{\"16\":1},\"1\":{\"16\":4}}],[\"cut\",{\"1\":{\"13\":1}}],[\"coffeestate\",{\"1\":{\"333\":5}}],[\"coffeemaker\",{\"1\":{\"333\":4}}],[\"code\",{\"1\":{\"291\":1,\"513\":10}}],[\"couchdb\",{\"1\":{\"285\":1}}],[\"counter输出以后\",{\"1\":{\"232\":1}}],[\"counter++\",{\"1\":{\"232\":1,\"263\":1}}],[\"counter\",{\"1\":{\"232\":7,\"263\":4,\"425\":1,\"426\":1}}],[\"count\",{\"1\":{\"37\":4,\"76\":5,\"294\":2,\"296\":2}}],[\"coercion\",{\"0\":{\"180\":1}}],[\"coxcomb\",{\"1\":{\"177\":2}}],[\"coords\",{\"1\":{\"125\":2}}],[\"compileroptions\",{\"1\":{\"536\":1}}],[\"compiler\",{\"1\":{\"477\":1,\"482\":1}}],[\"compiles\",{\"1\":{\"380\":1}}],[\"computed\",{\"1\":{\"213\":1}}],[\"computers\",{\"1\":{\"176\":2}}],[\"comparison\",{\"0\":{\"131\":1}}],[\"compare\",{\"1\":{\"119\":1}}],[\"com\",{\"1\":{\"46\":1,\"167\":2,\"224\":3,\"248\":1,\"250\":1,\"255\":1,\"257\":1,\"283\":1,\"287\":4,\"289\":1,\"290\":1,\"320\":1,\"380\":3,\"399\":1,\"494\":1}}],[\"commonmethod\",{\"1\":{\"350\":3}}],[\"commonjs规范主要用于服务端编程\",{\"1\":{\"270\":1}}],[\"commonjs规范加载模块是同步的\",{\"1\":{\"245\":1}}],[\"commonjs规范规定\",{\"1\":{\"231\":1}}],[\"commonjs模块的加载机制是\",{\"1\":{\"232\":1}}],[\"commonjs暴露的模块到底是什么\",{\"1\":{\"231\":1}}],[\"commonjs\",{\"0\":{\"228\":1,\"261\":1,\"262\":1,\"263\":1},\"1\":{\"229\":1,\"235\":1,\"259\":2,\"263\":2,\"270\":1,\"522\":1,\"536\":3,\"541\":4}}],[\"comma\",{\"1\":{\"177\":2}}],[\"commas\",{\"0\":{\"175\":1}}],[\"command\",{\"1\":{\"12\":1,\"285\":1}}],[\"comments\",{\"0\":{\"147\":1}}],[\"comment\",{\"1\":{\"13\":4}}],[\"connected\",{\"1\":{\"459\":1}}],[\"connect\",{\"1\":{\"455\":1}}],[\"connection\",{\"1\":{\"455\":3}}],[\"conf文件夹\",{\"1\":{\"285\":1}}],[\"conf\",{\"1\":{\"285\":2}}],[\"conf目录\",{\"1\":{\"285\":1}}],[\"configuration\",{\"1\":{\"282\":1}}],[\"configurable\",{\"1\":{\"153\":1}}],[\"config\",{\"1\":{\"108\":1,\"250\":1,\"251\":1,\"282\":4,\"285\":2}}],[\"concreteclass并没有继承abstractclass的test静态方法\",{\"1\":{\"350\":1}}],[\"concreteclass\",{\"1\":{\"350\":10}}],[\"concise\",{\"1\":{\"213\":1}}],[\"concatenateall\",{\"1\":{\"74\":2}}],[\"concat\",{\"0\":{\"300\":1},\"1\":{\"55\":2,\"300\":2,\"428\":1,\"493\":1}}],[\"conventions\",{\"0\":{\"187\":1}}],[\"congratulations\",{\"1\":{\"167\":2}}],[\"consider\",{\"1\":{\"282\":1}}],[\"console\",{\"1\":{\"32\":1,\"33\":1,\"38\":2,\"46\":3,\"69\":1,\"70\":2,\"72\":2,\"76\":1,\"82\":3,\"83\":2,\"98\":3,\"122\":6,\"127\":5,\"128\":2,\"129\":4,\"130\":1,\"149\":2,\"156\":2,\"157\":2,\"162\":6,\"164\":2,\"165\":2,\"167\":4,\"192\":3,\"224\":9,\"231\":2,\"232\":2,\"237\":4,\"257\":3,\"260\":1,\"263\":2,\"268\":5,\"274\":3,\"275\":2,\"276\":3,\"277\":1,\"293\":3,\"294\":2,\"295\":2,\"296\":2,\"297\":2,\"298\":3,\"299\":2,\"300\":2,\"301\":5,\"302\":6,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":2,\"309\":2,\"314\":1,\"333\":16,\"337\":5,\"346\":3,\"350\":6,\"354\":9,\"358\":2,\"359\":2,\"367\":4,\"371\":5,\"375\":2,\"475\":3,\"476\":8,\"486\":2,\"488\":2,\"512\":1,\"516\":1,\"531\":1,\"537\":1,\"539\":1}}],[\"constant\",{\"1\":{\"500\":2,\"527\":1}}],[\"constructing\",{\"1\":{\"319\":1}}],[\"constructoptions\",{\"1\":{\"319\":2}}],[\"constructors\",{\"0\":{\"91\":1}}],[\"constructor\",{\"1\":{\"34\":16,\"92\":1,\"95\":1,\"96\":3,\"98\":2,\"152\":1,\"153\":1,\"163\":2,\"190\":1,\"202\":1,\"333\":5,\"337\":2,\"338\":1,\"346\":1,\"350\":7,\"358\":1,\"359\":1,\"363\":1,\"367\":1,\"371\":2,\"529\":2,\"537\":1,\"538\":1}}],[\"const放一起\",{\"0\":{\"120\":1}}],[\"const\",{\"0\":{\"36\":1,\"119\":1,\"127\":1},\"1\":{\"32\":1,\"33\":2,\"36\":2,\"38\":2,\"40\":2,\"41\":2,\"42\":2,\"43\":3,\"44\":4,\"45\":2,\"46\":1,\"47\":7,\"49\":2,\"50\":1,\"51\":3,\"52\":3,\"53\":3,\"54\":2,\"55\":5,\"56\":6,\"58\":3,\"59\":4,\"60\":2,\"62\":3,\"63\":3,\"66\":3,\"68\":3,\"74\":1,\"79\":5,\"80\":1,\"81\":1,\"82\":2,\"85\":2,\"86\":3,\"88\":2,\"89\":5,\"92\":2,\"93\":1,\"94\":2,\"100\":1,\"104\":1,\"110\":5,\"112\":5,\"114\":3,\"115\":2,\"116\":2,\"118\":1,\"119\":5,\"120\":4,\"121\":3,\"123\":4,\"124\":4,\"127\":2,\"136\":2,\"137\":5,\"138\":6,\"139\":5,\"149\":5,\"150\":2,\"158\":2,\"160\":3,\"161\":4,\"163\":4,\"165\":2,\"166\":2,\"167\":2,\"176\":4,\"177\":6,\"179\":3,\"182\":4,\"183\":7,\"184\":1,\"186\":4,\"189\":3,\"190\":2,\"192\":2,\"195\":1,\"196\":4,\"197\":8,\"202\":1,\"206\":3,\"207\":1,\"213\":1,\"257\":1,\"319\":1,\"333\":2,\"337\":3,\"338\":4,\"346\":8,\"350\":5,\"354\":13,\"359\":1,\"363\":5,\"367\":8,\"371\":2,\"380\":2,\"399\":2,\"410\":3,\"422\":1,\"425\":1,\"426\":1,\"442\":2,\"445\":1,\"448\":1,\"449\":1,\"454\":2,\"455\":1,\"456\":1,\"459\":1,\"481\":1,\"512\":1,\"514\":1,\"515\":1,\"519\":6,\"520\":2,\"527\":6,\"531\":3,\"537\":1,\"538\":1,\"539\":1,\"541\":4,\"543\":2}}],[\"contexts\",{\"1\":{\"527\":1,\"529\":1}}],[\"context\",{\"0\":{\"442\":1,\"443\":1},\"1\":{\"411\":1,\"442\":14}}],[\"contextmenus\",{\"1\":{\"320\":1}}],[\"content\",{\"1\":{\"310\":1,\"320\":3,\"346\":6}}],[\"contents\",{\"1\":{\"92\":4,\"93\":2,\"193\":3}}],[\"container\",{\"1\":{\"285\":1,\"380\":2}}],[\"containers\",{\"1\":{\"196\":3}}],[\"containing\",{\"1\":{\"86\":3}}],[\"continue\",{\"1\":{\"21\":1}}],[\"control\",{\"0\":{\"144\":1},\"1\":{\"20\":1,\"327\":1}}],[\"color\",{\"1\":{\"207\":2,\"314\":4,\"317\":4,\"318\":3,\"319\":8,\"400\":2}}],[\"collection\",{\"1\":{\"134\":2}}],[\"collapse\",{\"1\":{\"13\":3}}],[\"column\",{\"1\":{\"16\":3}}],[\"copy\",{\"1\":{\"13\":2,\"19\":1,\"22\":1,\"47\":7,\"359\":2}}],[\"c\",{\"1\":{\"13\":2,\"15\":1,\"22\":1,\"47\":6,\"122\":6,\"136\":2,\"138\":4,\"139\":6,\"189\":1,\"298\":2,\"323\":1,\"324\":1,\"326\":2,\"327\":1}}],[\"ctrl+i\",{\"1\":{\"21\":1}}],[\"ctrl+k\",{\"1\":{\"21\":1}}],[\"ctrl+shift+w\",{\"1\":{\"12\":1}}],[\"ctrl\",{\"1\":{\"12\":6,\"13\":25,\"14\":7,\"15\":5,\"16\":7,\"17\":9,\"18\":9,\"19\":15,\"20\":13,\"22\":6}}],[\"pi\",{\"1\":{\"358\":1}}],[\"pink\",{\"1\":{\"207\":2,\"400\":1}}],[\"p>\",{\"1\":{\"319\":1,\"395\":1,\"408\":2,\"410\":1}}],[\"pm2是一个用于node\",{\"1\":{\"286\":1}}],[\"pm2命令\",{\"1\":{\"286\":1}}],[\"pm2\",{\"1\":{\"286\":10}}],[\"pm2的部署相对于docker需要安装node\",{\"1\":{\"286\":1}}],[\"pm2部署\",{\"0\":{\"286\":1}}],[\"ps\",{\"1\":{\"285\":1}}],[\"png\",{\"1\":{\"283\":1,\"313\":3,\"317\":12,\"320\":6}}],[\"platinumcard\",{\"1\":{\"375\":1}}],[\"playground\",{\"1\":{\"498\":1}}],[\"playbutton\",{\"1\":{\"416\":1}}],[\"playing\",{\"1\":{\"367\":4}}],[\"play\",{\"1\":{\"367\":6,\"454\":2}}],[\"player\",{\"1\":{\"367\":18}}],[\"player`\",{\"1\":{\"367\":4}}],[\"playsong\",{\"1\":{\"367\":4}}],[\"playmusic\",{\"1\":{\"367\":4}}],[\"plugins\",{\"1\":{\"283\":2}}],[\"plugin\",{\"1\":{\"282\":2,\"320\":2,\"544\":1,\"547\":2,\"548\":1,\"550\":1,\"551\":2}}],[\"please\",{\"1\":{\"69\":1}}],[\"people\",{\"1\":{\"410\":4}}],[\"permission\",{\"1\":{\"371\":2}}],[\"permissions\",{\"1\":{\"315\":2,\"317\":3,\"318\":1,\"320\":1}}],[\"person=\",{\"1\":{\"400\":1,\"402\":1,\"403\":4,\"405\":1}}],[\"person\",{\"1\":{\"163\":2,\"346\":6,\"402\":2,\"403\":2,\"410\":8,\"497\":8,\"498\":8,\"499\":7,\"500\":5,\"533\":16}}],[\"peekablequeue\",{\"1\":{\"93\":4}}],[\"peek\",{\"1\":{\"17\":1,\"93\":2}}],[\"point\",{\"1\":{\"533\":2}}],[\"possible\",{\"1\":{\"471\":1}}],[\"post\",{\"1\":{\"87\":2,\"167\":2,\"534\":3}}],[\"ports\",{\"1\":{\"285\":1}}],[\"pow\",{\"1\":{\"116\":1}}],[\"popup\",{\"1\":{\"313\":2,\"317\":15,\"318\":1,\"320\":4}}],[\"pop\",{\"0\":{\"295\":1},\"1\":{\"92\":2,\"295\":1,\"428\":1,\"493\":1}}],[\"public\",{\"1\":{\"289\":1,\"290\":1}}],[\"publisher\",{\"1\":{\"337\":13}}],[\"publish时报错\",{\"1\":{\"291\":1}}],[\"publish\",{\"1\":{\"283\":4,\"291\":1,\"336\":1}}],[\"pull\",{\"1\":{\"285\":1,\"536\":1}}],[\"put\",{\"1\":{\"87\":2,\"291\":1}}],[\"push\",{\"0\":{\"294\":1},\"1\":{\"50\":1,\"110\":2,\"294\":1,\"337\":1,\"338\":1,\"428\":1,\"490\":2,\"493\":1,\"507\":6}}],[\"primitive\",{\"1\":{\"471\":1}}],[\"principle\",{\"1\":{\"322\":5,\"327\":2}}],[\"private\",{\"1\":{\"191\":2,\"197\":1}}],[\"prependhello\",{\"1\":{\"544\":2,\"546\":2}}],[\"preventdefault\",{\"1\":{\"420\":2}}],[\"preview\",{\"1\":{\"19\":1,\"20\":2}}],[\"previous\",{\"1\":{\"14\":1,\"15\":1,\"18\":1,\"19\":1}}],[\"prettysure\",{\"1\":{\"477\":2}}],[\"pretty\",{\"1\":{\"283\":1}}],[\"presetbuttoncolors\",{\"1\":{\"319\":2}}],[\"presets\",{\"1\":{\"267\":1}}],[\"preset\",{\"0\":{\"266\":1},\"1\":{\"266\":2}}],[\"preferred\",{\"1\":{\"317\":1}}],[\"prefer\",{\"1\":{\"204\":1,\"471\":1}}],[\"process\",{\"1\":{\"551\":2}}],[\"processinput\",{\"1\":{\"60\":4}}],[\"provider>\",{\"1\":{\"442\":1}}],[\"provider\",{\"1\":{\"442\":4}}],[\"profile\",{\"1\":{\"402\":1,\"403\":1,\"404\":1,\"405\":1}}],[\"project\",{\"1\":{\"380\":4,\"523\":1,\"526\":1,\"536\":1}}],[\"production\",{\"1\":{\"380\":2}}],[\"proxy\",{\"1\":{\"283\":4,\"371\":10}}],[\"propname\",{\"1\":{\"499\":4,\"500\":2}}],[\"props是不可变的\",{\"0\":{\"406\":1}}],[\"props的传递\",{\"1\":{\"402\":1,\"403\":1}}],[\"props的传递方式和标签属性一样\",{\"1\":{\"402\":1}}],[\"props的传递和读取\",{\"0\":{\"402\":1}}],[\"props\",{\"0\":{\"401\":1,\"404\":1,\"416\":1},\"1\":{\"401\":3,\"402\":4,\"404\":2,\"405\":1,\"406\":3,\"410\":1,\"411\":1,\"416\":1,\"431\":1,\"433\":1,\"442\":4,\"448\":2,\"449\":1,\"458\":1}}],[\"property\",{\"1\":{\"354\":4,\"477\":1,\"488\":3,\"497\":1,\"499\":1,\"500\":3,\"512\":2,\"514\":2,\"519\":1,\"527\":1}}],[\"properties\",{\"0\":{\"113\":1},\"1\":{\"213\":1,\"274\":1,\"493\":1,\"498\":1}}],[\"proposals\",{\"0\":{\"214\":1}}],[\"prop\",{\"0\":{\"403\":1},\"1\":{\"115\":2,\"403\":1,\"405\":2,\"410\":1}}],[\"prototype\",{\"1\":{\"34\":20,\"46\":2,\"53\":1,\"74\":1,\"80\":1,\"82\":1,\"87\":2,\"92\":1,\"93\":1,\"94\":2,\"346\":9,\"350\":6,\"358\":5,\"367\":3}}],[\"problems\",{\"1\":{\"14\":1}}],[\"pause\",{\"1\":{\"454\":2}}],[\"pattern\",{\"1\":{\"331\":1,\"336\":1,\"342\":1,\"362\":1}}],[\"paths\",{\"1\":{\"250\":1,\"251\":1,\"536\":2}}],[\"path\",{\"0\":{\"24\":1},\"1\":{\"19\":1,\"107\":2,\"283\":1,\"523\":1,\"526\":1,\"536\":1}}],[\"panda\",{\"1\":{\"191\":4}}],[\"panel\",{\"1\":{\"14\":1,\"20\":1}}],[\"parentelement\",{\"1\":{\"319\":1}}],[\"parseint是代码运行慢的原因\",{\"1\":{\"184\":1}}],[\"parseint\",{\"1\":{\"183\":2,\"217\":1}}],[\"param\",{\"1\":{\"148\":1,\"153\":1}}],[\"parameters\",{\"1\":{\"213\":1,\"502\":2}}],[\"parameter\",{\"1\":{\"17\":1,\"490\":1,\"505\":2}}],[\"password\",{\"1\":{\"289\":2,\"290\":1}}],[\"passed\",{\"1\":{\"148\":2,\"150\":2}}],[\"pascalcase\",{\"1\":{\"193\":5}}],[\"paste\",{\"1\":{\"22\":1}}],[\"packages\",{\"1\":{\"283\":3}}],[\"package\",{\"1\":{\"46\":1,\"235\":2,\"240\":1,\"536\":1}}],[\"page\",{\"1\":{\"13\":1,\"16\":1,\"22\":1,\"310\":1,\"319\":4,\"320\":6,\"380\":3}}],[\"palette\",{\"1\":{\"12\":1}}],[\"pgdn\",{\"1\":{\"13\":1,\"16\":1,\"18\":1,\"22\":1}}],[\"pgup\",{\"1\":{\"13\":1,\"16\":1,\"18\":1,\"22\":1}}],[\"p\",{\"1\":{\"12\":2,\"14\":1,\"19\":1,\"285\":2,\"551\":1}}],[\"+inf\",{\"1\":{\"283\":2}}],[\"+inputvalue\",{\"1\":{\"183\":1}}],[\"+0\",{\"1\":{\"133\":1}}],[\"++语句来表达你的值也是更有表现力的\",{\"1\":{\"123\":1}}],[\"++或num\",{\"1\":{\"123\":1}}],[\"++\",{\"0\":{\"123\":1}}],[\"+=\",{\"1\":{\"37\":2,\"51\":1,\"110\":2,\"123\":2}}],[\"+\",{\"0\":{\"139\":1,\"279\":1,\"490\":1},\"1\":{\"12\":8,\"13\":37,\"14\":12,\"15\":8,\"16\":20,\"17\":13,\"18\":10,\"19\":18,\"20\":24,\"21\":2,\"22\":8,\"42\":2,\"55\":2,\"63\":2,\"64\":2,\"78\":1,\"85\":2,\"86\":2,\"88\":2,\"110\":4,\"123\":2,\"125\":3,\"139\":3,\"158\":1,\"160\":6,\"177\":3,\"182\":1,\"231\":1,\"250\":2,\"251\":2,\"257\":3,\"260\":2,\"305\":4,\"332\":1,\"408\":1,\"425\":3,\"426\":5,\"442\":1,\"473\":6,\"490\":1,\"502\":5,\"503\":2,\"505\":4,\"506\":4}}],[\"描述ui\",{\"0\":{\"392\":1}}],[\"描述\",{\"1\":{\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"gatsby\",{\"0\":{\"385\":1},\"1\":{\"385\":3}}],[\"gamma\",{\"1\":{\"328\":1}}],[\"given\",{\"1\":{\"486\":1}}],[\"gif\",{\"1\":{\"320\":1}}],[\"github\",{\"1\":{\"248\":2,\"255\":2,\"283\":1}}],[\"git\",{\"1\":{\"177\":2}}],[\"git命令\",{\"0\":{\"6\":1}}],[\"graphql\",{\"1\":{\"385\":1}}],[\"gravatar\",{\"1\":{\"283\":1}}],[\"gregorio\",{\"1\":{\"399\":1}}],[\"great\",{\"1\":{\"380\":1}}],[\"green\",{\"1\":{\"251\":1,\"269\":1}}],[\"group\",{\"1\":{\"14\":1,\"18\":3}}],[\"gender\",{\"1\":{\"498\":3,\"499\":6,\"500\":4}}],[\"generic\",{\"1\":{\"491\":1}}],[\"generators\",{\"0\":{\"109\":1},\"1\":{\"213\":1}}],[\"general\",{\"0\":{\"12\":1}}],[\"getcachedata<cat>\",{\"1\":{\"520\":1}}],[\"getcachedata<t>\",{\"1\":{\"520\":1}}],[\"getcachedata\",{\"1\":{\"515\":5,\"519\":8,\"520\":4}}],[\"getstring\",{\"1\":{\"488\":1}}],[\"getlength\",{\"1\":{\"488\":1}}],[\"getinstance\",{\"1\":{\"354\":6}}],[\"getitems\",{\"1\":{\"119\":3,\"120\":3}}],[\"getelementbyid\",{\"1\":{\"317\":1,\"319\":1,\"363\":3,\"380\":1}}],[\"getting\",{\"1\":{\"311\":1,\"312\":1,\"315\":1,\"317\":3,\"318\":1,\"319\":1,\"371\":2}}],[\"gettype\",{\"1\":{\"149\":3}}],[\"getmsg\",{\"1\":{\"250\":3,\"251\":1}}],[\"getage\",{\"1\":{\"163\":4,\"200\":1}}],[\"getxplusy\",{\"1\":{\"125\":2}}],[\"getx\",{\"1\":{\"125\":1}}],[\"getprop\",{\"1\":{\"115\":2}}],[\"getname\",{\"1\":{\"95\":2,\"96\":1,\"121\":2,\"371\":1,\"512\":1,\"537\":3,\"538\":2}}],[\"get\",{\"1\":{\"63\":3,\"87\":2,\"200\":1,\"202\":1,\"317\":13,\"318\":1,\"319\":1,\"359\":1,\"371\":1,\"531\":2,\"532\":1,\"534\":1,\"535\":1}}],[\"getfullname\",{\"1\":{\"58\":3}}],[\"getkey\",{\"1\":{\"41\":4}}],[\"globalthis\",{\"1\":{\"514\":1}}],[\"global\",{\"0\":{\"546\":1},\"1\":{\"34\":2,\"152\":1,\"522\":1,\"545\":1,\"546\":2,\"551\":1}}],[\"g\",{\"0\":{\"136\":1},\"1\":{\"14\":1,\"20\":1,\"79\":1,\"160\":2,\"197\":1,\"241\":1,\"266\":1,\"281\":1,\"286\":1,\"287\":1,\"468\":1}}],[\"goldcard\",{\"1\":{\"375\":2}}],[\"gof\",{\"1\":{\"328\":1}}],[\"gosportsteam\",{\"1\":{\"119\":3,\"120\":3}}],[\"good\",{\"1\":{\"36\":1,\"37\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":2,\"46\":1,\"47\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":4,\"56\":1,\"58\":1,\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"64\":1,\"66\":1,\"68\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"77\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":2,\"83\":2,\"85\":1,\"86\":4,\"87\":1,\"88\":3,\"89\":2,\"90\":1,\"92\":1,\"93\":1,\"94\":1,\"96\":1,\"97\":2,\"98\":3,\"101\":1,\"102\":1,\"103\":2,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"110\":2,\"112\":2,\"114\":1,\"116\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":2,\"125\":1,\"134\":3,\"136\":1,\"138\":1,\"139\":4,\"141\":3,\"142\":1,\"143\":3,\"145\":3,\"146\":1,\"148\":1,\"149\":3,\"150\":2,\"155\":1,\"156\":2,\"157\":2,\"158\":1,\"159\":1,\"160\":3,\"161\":3,\"162\":2,\"163\":1,\"164\":2,\"165\":1,\"166\":1,\"167\":2,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"174\":1,\"176\":2,\"177\":6,\"179\":2,\"182\":1,\"183\":2,\"184\":1,\"186\":1,\"188\":1,\"189\":1,\"190\":2,\"191\":1,\"192\":1,\"193\":1,\"196\":3,\"197\":1,\"200\":1,\"201\":1,\"204\":1,\"206\":2,\"207\":1,\"209\":3,\"216\":1,\"217\":1}}],[\"go\",{\"1\":{\"12\":1,\"13\":3,\"14\":6,\"17\":1,\"320\":1}}],[\"示例使用\",{\"1\":{\"350\":1}}],[\"示例\",{\"0\":{\"3\":1,\"333\":1,\"337\":1,\"346\":1,\"350\":1,\"354\":1,\"358\":1,\"363\":1,\"367\":1,\"371\":1,\"375\":1},\"1\":{\"363\":1},\"2\":{\"2\":1,\"4\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
